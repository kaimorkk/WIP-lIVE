//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511112_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511112) { }
//type("System.IO.Path"; System_IO_Path51511112) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193532 "Master Roll"
{
    RDLCLayout = './Layouts/MasterRoll.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("Posting Group") order(ascending);
            RequestFilterFields = "Posting Group", "Pay Period Filter", "No.";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Earngs_1_; Earngs[1])
            {
            }
            column(Earngs_2_; Earngs[2])
            {
            }
            column(Earngs_3_; Earngs[3])
            {
            }
            column(Earngs_4_; Earngs[4])
            {
            }
            column(Other_Allowances_; 'Other Allowances')
            {
            }
            column(GROSS_; 'GROSS')
            {
            }
            column(PAYE_; 'PAYE')
            {
            }
            column(ADVANCE_; 'ADVANCE')
            {
            }
            column(Deduction1_1_; Deduction1[1])
            {
            }
            column(Deduction1_2_; Deduction1[2])
            {
            }
            column(Deduction1_3_; Deduction1[3])
            {
            }
            column(Deduction1_4_; Deduction1[4])
            {
            }
            column(Other_DED_; 'Other-DED')
            {
            }
            column(Bisc_Loan_; 'Bisc-Loan')
            {
            }
            column(Other_Loans_; 'Other-Loans')
            {
            }
            column(Total_DED_; 'Total-DED')
            {
            }
            column(Net_Pay_; 'Net Pay')
            {
            }
            column(Employee__Posting_Group_; Employee."Posting Group")
            {
            }
            column(Employee__No__; Employee."No.")
            {
            }
            column(EmpName; EmpName)
            {
            }
            column(AllowanceAmount_1_; AllowanceAmount[1])
            {
            }
            column(AllowanceAmount_2_; AllowanceAmount[2])
            {
            }
            column(AllowanceAmount_3_; AllowanceAmount[3])
            {
            }
            column(AllowanceAmount_4_; AllowanceAmount[4])
            {
            }
            column(Otherallowances; Otherallowances)
            {
            }
            column(Gross; Gross)
            {
            }
            column(Employee_PAYE; Employee.PAYE)
            {
            }
            column(AdvanceAmt; AdvanceAmt)
            {
            }
            column(DedAmount_1_; DedAmount[1])
            {
            }
            column(DedAmount_2_; DedAmount[2])
            {
            }
            column(DedAmount_3_; DedAmount[3])
            {
            }
            column(DedAmount_4_; DedAmount[4])
            {
            }
            column(OtherDed; OtherDed)
            {
            }
            column(BiscoLoan; BiscoLoan)
            {
            }
            column(OtherLoans; OtherLoans)
            {
            }
            column(TotalDed; TotalDed)
            {
            }
            column(NetPay; NetPay)
            {
            }
            column(TotalFor___FIELDCAPTION__Posting_Group__; TotalFor + FieldCaption("Posting Group"))
            {
            }
            column(NetPay_Control1000000045; NetPay)
            {
            }
            column(TotalDed_Control1000000046; TotalDed)
            {
            }
            column(OtherLoans_Control1000000047; OtherLoans)
            {
            }
            column(BiscoLoan_Control1000000048; BiscoLoan)
            {
            }
            column(OtherDed_Control1000000049; OtherDed)
            {
            }
            column(DedAmount_4__Control1000000050; DedAmount[4])
            {
            }
            column(DedAmount_3__Control1000000051; DedAmount[3])
            {
            }
            column(DedAmount_2__Control1000000052; DedAmount[2])
            {
            }
            column(DedAmount_1__Control1000000053; DedAmount[1])
            {
            }
            column(AdvanceAmt_Control1000000054; AdvanceAmt)
            {
            }
            column(Employee_PAYE_Control1000000055; Employee.PAYE)
            {
            }
            column(Gross_Control1000000056; Gross)
            {
            }
            column(Otherallowances_Control1000000057; Otherallowances)
            {
            }
            column(AllowanceAmount_4__Control1000000058; AllowanceAmount[4])
            {
            }
            column(AllowanceAmount_3__Control1000000059; AllowanceAmount[3])
            {
            }
            column(AllowanceAmount_2__Control1000000060; AllowanceAmount[2])
            {
            }
            column(AllowanceAmount_1__Control1000000061; AllowanceAmount[1])
            {
            }
            column(Assignment_Matrix_XCaption; Assignment_Matrix_XCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Employee__Posting_Group_Caption; FieldCaption("Posting Group"))
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Posting Group");



            end;

            trigger OnAfterGetRecord();
            begin
                EmpName := '';
                Otherallowances := 0;
                Gross := 0;
                PAYE := 0;
                AdvanceAmt := 0;
                Clear(DedAmount);
                Clear(AllowanceAmount);
                TotalDed := 0;
                OtherDed := 0;
                OtherLoans := 0;
                BiscoLoan := 0;
                EmpName := Employee."Last Name" + ' ' + Employee."First Name" + ' ' + Employee."Middle Name";
                k := 1;
                repeat
                    AssMatrix.Reset;
                    AssMatrix.SetRange(AssMatrix."Employee No", Employee."No.");
                    AssMatrix.SetRange(AssMatrix.Type, AssMatrix.Type::Payment);
                    AssMatrix.SetRange(AssMatrix."Payroll Period", PayrollMonth);
                    AssMatrix.SetRange(AssMatrix.Code, EarngsCode[k]);
                    if AssMatrix.Find('-') then begin
                        AllowanceAmount[k] := AssMatrix.Amount;
                        Gross := Gross + AllowanceAmount[k];
                    end;
                    k := k + 1;
                until k = i;
                // Other Allowance
                EarnRec.Reset;
                EarnRec.SetRange(EarnRec."Show on Master Roll", false);
                EarnRec.SetRange(EarnRec."Earning Type", EarnRec."earning type"::"Normal Earning");
                if EarnRec.Find('-') then begin
                    repeat
                        AssMatrix.Reset;
                        AssMatrix.SetRange(AssMatrix."Employee No", Employee."No.");
                        AssMatrix.SetRange(AssMatrix.Type, AssMatrix.Type::Payment);
                        AssMatrix.SetRange(AssMatrix."Payroll Period", PayrollMonth);
                        AssMatrix.SetRange(AssMatrix.Code, EarnRec.Code);
                        if AssMatrix.Find('-') then
                            Otherallowances := Otherallowances + AssMatrix.Amount;
                    until EarnRec.Next = 0;
                end;
                Gross := Gross + Otherallowances;
                // Paye
                AssMatrix.Reset;
                AssMatrix.SetRange(AssMatrix."Employee No", Employee."No.");
                AssMatrix.SetRange(AssMatrix.Type, AssMatrix.Type::Deduction);
                AssMatrix.SetRange(AssMatrix."Payroll Period", PayrollMonth);
                AssMatrix.SetRange(AssMatrix.Paye, true);
                if AssMatrix.Find('-') then
                    PAYE := Abs(AssMatrix.Amount);
                // Calculate Advances
                // LoanSetup.Reset;
                // LoanSetup.SetCurrentkey(LoanSetup."Loan Category");
                // LoanSetup.SetRange("Loan Category", LoanSetup."loan category"::Advance);
                // if LoanSetup.Find('-') then begin
                //     repeat
                //         LoanApp.Reset;
                //         LoanApp.SetRange(LoanApp."Loan Product Type", LoanSetup.Code);
                //         LoanApp.SetRange(LoanApp."Employee No", Employee."No.");
                //         LoanApp.SetRange(LoanApp."Date filter", PayrollMonth);
                //         if LoanApp.Find('-') then begin
                //             LoanApp.CalcFields(LoanApp."Period Repayment");
                //             AdvanceAmt := AdvanceAmt + Abs(LoanApp."Period Repayment");
                //         end;
                //     until LoanSetup.Next = 0;
                // end;
                // Deductions
                y := 1;
                repeat
                    AssMatrix.Reset;
                    AssMatrix.SetRange(AssMatrix."Employee No", Employee."No.");
                    AssMatrix.SetRange(AssMatrix.Type, AssMatrix.Type::Deduction);
                    AssMatrix.SetRange(AssMatrix."Payroll Period", PayrollMonth);
                    AssMatrix.SetRange(AssMatrix.Code, Deductioncode[y]);
                    if AssMatrix.Find('-') then begin
                        DedAmount[y] := Abs(AssMatrix.Amount);
                        TotalDed := TotalDed + DedAmount[y];
                    end;
                    y := y + 1;
                until y = j;
                // Other Deductions
                DedRec.Reset;
                DedRec.SetRange(DedRec."Show on Master Roll", false);
                DedRec.SetRange(DedRec."PAYE Code", false);
                if DedRec.Find('-') then
                    repeat
                        AssMatrix.Reset;
                        AssMatrix.SetRange(AssMatrix."Employee No", Employee."No.");
                        AssMatrix.SetRange(AssMatrix.Type, AssMatrix.Type::Deduction);
                        AssMatrix.SetRange(AssMatrix."Payroll Period", PayrollMonth);
                        AssMatrix.SetRange(AssMatrix.Code, DedRec.Code);
                        if AssMatrix.Find('-') then
                            OtherDed := Abs(AssMatrix.Amount);
                    until DedRec.Next = 0;
                // Bisco Loan
                // LoanSetup.Reset;
                // LoanSetup.SetCurrentkey(LoanSetup."Loan Category");
                // LoanSetup.SetRange("Loan Category", LoanSetup."loan category"::"Bisco Loan");
                // if LoanSetup.Find('-') then begin
                //     repeat
                //         LoanApp.Reset;
                //         LoanApp.SetRange(LoanApp."Loan Product Type", LoanSetup.Code);
                //         LoanApp.SetRange(LoanApp."Employee No", Employee."No.");
                //         LoanApp.SetRange(LoanApp."Date filter", PayrollMonth);
                //         if LoanApp.Find('-') then begin
                //             LoanApp.CalcFields(LoanApp."Period Repayment");
                //             BiscoLoan := BiscoLoan + Abs(LoanApp."Period Repayment");
                //         end;
                //     until LoanSetup.Next = 0;
                // end;
                // Other Loan
                // LoanSetup.Reset;
                // LoanSetup.SetCurrentkey(LoanSetup."Loan Category");
                // LoanSetup.SetRange("Loan Category", LoanSetup."loan category"::"Other Loan");
                // if LoanSetup.Find('-') then begin
                //     repeat
                //         LoanApp.Reset;
                //         LoanApp.SetRange(LoanApp."Loan Product Type", LoanSetup.Code);
                //         LoanApp.SetRange(LoanApp."Employee No", Employee."No.");
                //         LoanApp.SetRange(LoanApp."Date filter", PayrollMonth);
                //         if LoanApp.Find('-') then begin
                //             LoanApp.CalcFields(LoanApp."Period Repayment");
                //             OtherLoans := OtherLoans + Abs(LoanApp."Period Repayment");
                //         end;
                //     until LoanSetup.Next = 0;
                // end;
                TotalDed := TotalDed + OtherDed + OtherLoans + BiscoLoan + PAYE + AdvanceAmt;
                NetPay := Gross - TotalDed;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        PayrollMonth := Employee.GetRangeMin(Employee."Pay Period Filter");
        EarnRec.Reset;
        i := 1;
        j := 1;
        EarnRec.SetRange(EarnRec."Earning Type", EarnRec."earning type"::"Normal Earning");
        EarnRec.SetRange(EarnRec."Show on Master Roll", true);
        if EarnRec.Find('-') then begin
            repeat
                Earngs[i] := EarnRec.Description;
                EarngsCode[i] := EarnRec.Code;
                i := i + 1;
            until EarnRec.Next = 0;
        end;
        j := 1;
        DedRec.Reset;
        DedRec.SetRange("Show on Master Roll", true);
        DedRec.SetRange(DedRec."PAYE Code", false);
        if DedRec.Find('-') then begin
            repeat
                Deduction1[j] := DedRec.Description;
                Deductioncode[j] := DedRec.Code;
                j := j + 1;
            until DedRec.Next = 0;
        end;
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        Earngs: array[1000] of Text[100];
        Deduction1: array[1000] of Text[100];
        EarngsCode: array[1000] of Code[20];
        Deductioncode: array[1000] of Code[20];
        EarnRec: Record EarningsX1;
        DedRec: Record DeductionsX1;
        PayrollMonth: Date;
        i: Integer;
        j: Integer;
        EmpName: Text[100];
        EmpRec: Record Employee;
        AllowanceAmount: array[1000] of Decimal;
        k: Integer;
        y: Integer;
        AssMatrix: Record "Assignment Matrix-X1";
        Otherallowances: Decimal;
        Gross: Decimal;
        PAYE: Decimal;
        // LoanSetup: Record "Loan Product Type1";
        // LoanApp: Record "Loan Application1";
        AdvanceAmt: Decimal;
        DedAmount: array[1000] of Decimal;
        TotalDed: Decimal;
        OtherDed: Decimal;
        OtherLoans: Decimal;
        BiscoLoan: Decimal;
        NetPay: Decimal;
        Assignment_Matrix_XCaptionLbl: label 'Assignment Matrix-X';
        CurrReport_PAGENOCaptionLbl: label 'Page';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511112_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511112;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
