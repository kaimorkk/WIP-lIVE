//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511106_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511106) { }
    //type("System.IO.Path"; System_IO_Path51511106) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193526 "fix Inventory issues"
{
    RDLCLayout = './Layouts/fixInventoryissues.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Item Ledger Entry"; "Item Ledger Entry")
        {
            DataItemTableView = sorting("Item No.", "Posting Date") where("Entry Type" = const("Negative Adjmt."));
            RequestFilterFields = "Item No.";
            column(ReportForNavId_7209; 7209) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Item_Ledger_Entry__Item_No__; "Item Ledger Entry"."Item No.")
            {
            }
            column(Item_Ledger_Entry__Item_No___Control1000000011; "Item Ledger Entry"."Item No.")
            {
            }
            column(Item_Ledger_Entry__Posting_Date_; "Item Ledger Entry"."Posting Date")
            {
            }
            column(Item_Ledger_Entry__Document_No__; "Item Ledger Entry"."Document No.")
            {
            }
            column(Item_Ledger_Entry_Description; "Item Ledger Entry".Description)
            {
            }
            column(Item_Ledger_Entry_Quantity; "Item Ledger Entry".Quantity)
            {
            }
            column(NoOfEntries; NoOfEntries)
            {
            }
            column(TotalFor___FIELDCAPTION__Item_No___; TotalFor + FieldCaption("Item No."))
            {
            }
            column(Item_Ledger_Entry_Quantity_Control1000000026; "Item Ledger Entry".Quantity)
            {
            }
            column(Item_Ledger_EntryCaption; Item_Ledger_EntryCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Item_Ledger_Entry__Item_No___Control1000000011Caption; FieldCaption("Item No."))
            {
            }
            column(Item_Ledger_Entry__Posting_Date_Caption; FieldCaption("Posting Date"))
            {
            }
            column(Item_Ledger_Entry__Document_No__Caption; FieldCaption("Document No."))
            {
            }
            column(Item_Ledger_Entry_DescriptionCaption; FieldCaption(Description))
            {
            }
            column(Item_Ledger_Entry_QuantityCaption; FieldCaption(Quantity))
            {
            }
            column(No__Of_EntriesCaption; No__Of_EntriesCaptionLbl)
            {
            }
            column(Item_Ledger_Entry__Item_No__Caption; FieldCaption("Item No."))
            {
            }
            column(Item_Ledger_Entry_Entry_No_; "Item Ledger Entry"."Entry No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Item No.");
            end;

            trigger OnAfterGetRecord();
            begin
                ile.Reset;
                ile.SetRange(ile."Item No.", "Item Ledger Entry"."Item No.");
                ile.SetRange(ile."Document No.", "Item Ledger Entry"."Document No.");
                ile.SetRange(ile."Entry Type", ile."entry type"::"Negative Adjmt.");
                NoOfEntries := ile.Count;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        ile: Record "Item Ledger Entry";
        NoOfEntries: Integer;
        Item_Ledger_EntryCaptionLbl: label 'Item Ledger Entry';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        No__Of_EntriesCaptionLbl: label 'No. Of Entries';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511106_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511106;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
