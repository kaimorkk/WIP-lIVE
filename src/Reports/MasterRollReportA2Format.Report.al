//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511170_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511170) { }
    //type("System.IO.Path"; System_IO_Path51511170) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193579 "Master Roll Report A2 Format"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/MasterRollReportA2Format.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "Pay Period Filter", "No.", Status;
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            column(TIME; Time)
            {
            }
            column(EarnDesc_1_; EarnDesc[1])
            {
            }
            column(EarnDesc_2_; EarnDesc[2])
            {
            }
            column(EarnDesc_3_; EarnDesc[3])
            {
            }
            column(DedDesc_1_; DedDesc[1])
            {
            }
            column(DedDesc_2_; DedDesc[2])
            {
            }
            column(DedDesc_3_; DedDesc[3])
            {
            }
            column(DedDesc_4_; DedDesc[4])
            {
            }
            column(DedDesc_5_; DedDesc[5])
            {
            }
            column(DedDesc_6_; DedDesc[6])
            {
            }
            column(DedDesc_7_; DedDesc[7])
            {
            }
            column(DedDesc_8_; DedDesc[8])
            {
            }
            column(DedDesc_9_; DedDesc[9])
            {
            }
            column(DedDesc_10_; DedDesc[10])
            {
            }
            column(Other_Deductions_; 'Other Deductions')
            {
            }
            column(Net_Pay_; 'Net Pay')
            {
            }
            column(PF_No__; 'PF No.')
            {
            }
            column(Name_; 'Name')
            {
            }
            column(EarnDesc_4_; EarnDesc[4])
            {
            }
            column(EarnDesc_5_; EarnDesc[5])
            {
            }
            column(EarnDesc_6_; EarnDesc[6])
            {
            }
            column(EarnDesc_7_; EarnDesc[7])
            {
            }
            column(EarnDesc_8_; EarnDesc[8])
            {
            }
            column(EarnDesc_9_; EarnDesc[9])
            {
            }
            column(EarnDesc_10_; EarnDesc[10])
            {
            }
            column(EarnDesc_11_; EarnDesc[11])
            {
            }
            column(EarnDesc_12_; EarnDesc[12])
            {
            }
            column(EarnDesc_13_; EarnDesc[13])
            {
            }
            column(EarnDesc_14_; EarnDesc[14])
            {
            }
            column(EarnDesc_15_; EarnDesc[15])
            {
            }
            column(EarnDesc_16_; EarnDesc[16])
            {
            }
            column(Employee__No__; Employee."No.")
            {
            }
            column(OtherEarn; OtherEarn)
            {
            }
            column(Deductions_1_; Deductions[1])
            {
            }
            column(Deductions_2_; Deductions[2])
            {
            }
            column(Deductions_3_; Deductions[3])
            {
            }
            column(Deductions_4_; Deductions[4])
            {
            }
            column(Deductions_5_; Deductions[5])
            {
            }
            column(Deductions_6_; Deductions[6])
            {
            }
            column(Deductions_7_; Deductions[7])
            {
            }
            column(Deductions_8_; Deductions[8])
            {
            }
            column(Deductions_9_; Deductions[9])
            {
            }
            column(Deductions_10_; Deductions[10])
            {
            }
            column(OtherDeduct; OtherDeduct)
            {
            }
            column(NetPay; NetPay)
            {
            }
            column(First_Name_________Middle_Name_______Last_Name_; "First Name" + ' ' + "Middle Name" + ' ' + "Last Name")
            {
            }
            column(Allowances_5_; Allowances[5])
            {
            }
            column(Allowances_6_; Allowances[6])
            {
            }
            column(Allowances_7_; Allowances[7])
            {
            }
            column(Allowances_8_; Allowances[8])
            {
            }
            column(Allowances_9_; Allowances[9])
            {
            }
            column(Allowances_10_; Allowances[10])
            {
            }
            column(Allowances_11_; Allowances[11])
            {
            }
            column(Allowances_12_; Allowances[12])
            {
            }
            column(Allowances_13_; Allowances[13])
            {
            }
            column(Allowances_14_; Allowances[14])
            {
            }
            column(Allowances_15_; Allowances[15])
            {
            }
            column(Allowances_16_; Allowances[16])
            {
            }
            column(Allowances_1_; Allowances[1])
            {
            }
            column(Allowances_2_; Allowances[2])
            {
            }
            column(Allowances_3_; Allowances[3])
            {
            }
            column(Allowances_4_; Allowances[4])
            {
            }
            column(DataItem1000000033; Allowances[1] + Allowances[2] + Allowances[3] + Allowances[4] + Allowances[5] + Allowances[6] + Allowances[7] + Allowances[8] + Allowances[9] + Allowances[10] + Allowances[11] + Allowances[12] + Allowances[13] + Allowances[14] + Allowances[15] + Allowances[16])
            {
            }
            column(STRSUBSTNO__Employees__1__counter_; StrSubstNo('Employees ='))
            {
            }
            column(Prepared_By______________________________________________________; 'Prepared By.....................................................')
            {
            }
            column(Approved_By_____________________________________________________; 'Approved By....................................................')
            {
            }
            column(Approved_By_____________________________________________; 'Approved By............................................')
            {
            }
            column(Allowances_5__Control1000000084; Allowances[5])
            {
            }
            column(Allowances_6__Control1000000085; Allowances[6])
            {
            }
            column(Allowances_7__Control1000000086; Allowances[7])
            {
            }
            column(Allowances_8__Control1000000087; Allowances[8])
            {
            }
            column(Allowances_9__Control1000000088; Allowances[9])
            {
            }
            column(Allowances_10__Control1000000089; Allowances[10])
            {
            }
            column(Allowances_11__Control1000000090; Allowances[11])
            {
            }
            column(Allowances_12__Control1000000091; Allowances[12])
            {
            }
            column(Allowances_13__Control1000000092; Allowances[13])
            {
            }
            column(Allowances_14__Control1000000093; Allowances[14])
            {
            }
            column(Allowances_15__Control1000000094; Allowances[15])
            {
            }
            column(Allowances_16__Control1000000095; Allowances[16])
            {
            }
            column(OtherEarn_Control1000000076; OtherEarn)
            {
            }
            column(Deductions_1__Control1000000077; Deductions[1])
            {
            }
            column(Deductions_2__Control1000000078; Deductions[2])
            {
            }
            column(Deductions_3__Control1000000081; Deductions[3])
            {
            }
            column(Deductions_4__Control1000000079; Deductions[4])
            {
            }
            column(Deductions_5__Control1000000084; Deductions[5])
            {
            }
            column(Deductions_6__Control1000000085; Deductions[6])
            {
            }
            column(Deductions_7__Control1000000086; Deductions[7])
            {
            }
            column(Deductions_8__Control1000000087; Deductions[8])
            {
            }
            column(Deductions_9__Control1000000088; Deductions[9])
            {
            }
            column(Deductions_10__Control1000000089; Deductions[10])
            {
            }
            column(OtherDeduct_Control1000000080; OtherDeduct)
            {
            }
            column(Allowances_1__Control1000000000; Allowances[1])
            {
            }
            column(Allowances_2__Control1000000012; Allowances[2])
            {
            }
            column(Allowances_3__Control1000000013; Allowances[3])
            {
            }
            column(Allowances_4__Control1000000063; Allowances[4])
            {
            }
            column(NetPay_Control1000000102; NetPay)
            {
            }
            column(DataItem1000000035; Allowances[1] + Allowances[2] + Allowances[3] + Allowances[4] + Allowances[5] + Allowances[6] + Allowances[7] + Allowances[8] + Allowances[9] + Allowances[10] + Allowances[11] + Allowances[12] + Allowances[13] + Allowances[14] + Allowances[15] + Allowances[16])
            {
            }
            column(MASTER_ROLLCaption; MASTER_ROLLCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Other_AllowancesCaption; Other_AllowancesCaptionLbl)
            {
            }
            column(Total_AllowancesCaption; Total_AllowancesCaptionLbl)
            {
            }
            column(TOTALSCaption; TOTALSCaptionLbl)
            {
            }
            column(Counter; counter)
            {
            }
            trigger OnPreDataItem();
            begin

                HRSetup.Get;
            end;

            trigger OnAfterGetRecord();
            begin
                Employee.CalcFields(Employee."Total Allowances", Employee."Total Deductions");
                if (Employee."Total Allowances" + Employee."Total Deductions") = 0 then
                    CurrReport.Skip;
                counter := counter + 1;
                NetPay := Employee."Total Allowances" + Employee."Total Deductions";
                NetPay := Payroll.PayrollRounding(NetPay);
                for i := 1 to 16 do begin
                    Clear(Allowances[i]);
                    Clear(Deductions[i]);
                end;
                OtherEarn := 0;
                OtherDeduct := 0;
                Totallowances := 0;
                OtherDeduct := 0;
                TotalDeductions := 0;
                for i := 1 to 16 do begin
                    Assignmat.Reset;
                    Assignmat.SetRange(Assignmat."Employee No", Employee."No.");
                    Assignmat.SetRange(Assignmat.Type, Assignmat.Type::Payment);
                    Assignmat.SetRange(Assignmat.Code, Earncode[i]);
                    Assignmat.SetRange(Assignmat."Payroll Period", DateSpecified);
                    if Assignmat.Find('-') then
                        Allowances[i] := Assignmat.Amount;
                    Totallowances := Totallowances + Allowances[i];
                end;
                OtherEarn := Employee."Total Allowances" - Totallowances;
                for i := 1 to 10 do begin
                    Assignmat.Reset;
                    Assignmat.SetRange(Assignmat."Employee No", Employee."No.");
                    Assignmat.SetRange(Assignmat.Type, Assignmat.Type::Deduction);
                    Assignmat.SetRange(Assignmat.Code, deductcode[i]);
                    Assignmat.SetRange(Assignmat."Payroll Period", DateSpecified);
                    if Assignmat.Find('-') then
                        Deductions[i] := Abs(Assignmat.Amount);
                    TotalDeductions := TotalDeductions + Deductions[i];
                end;
                OtherDeduct := Abs(Employee."Total Deductions" + TotalDeductions);
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        DateSpecified := Employee.GetRangeMin(Employee."Pay Period Filter");
        EarnRec.Reset;
        EarnRec.SetRange(EarnRec."Show on Master Roll", true);
        if EarnRec.Find('-') then
            repeat
                i := i + 1;
                Earncode[i] := EarnRec.Code;
                EarnDesc[i] := EarnRec.Description;
            until EarnRec.Next = 0;
        DedRec.Reset;
        DedRec.SetRange(DedRec."Show on Master Roll", true);
        if DedRec.Find('-') then
            repeat
                j := j + 1;
                deductcode[j] := DedRec.Code;
                DedDesc[j] := DedRec.Description;
            until DedRec.Next = 0;
        //;
        //ReportsForNavPre;
    end;

    var
        Allowances: array[30] of Decimal;
        Deductions: array[30] of Decimal;
        EarnRec: Record EarningsX1;
        DedRec: Record DeductionsX1;
        Earncode: array[30] of Code[10];
        deductcode: array[30] of Code[10];
        EarnDesc: array[30] of Text[50];
        DedDesc: array[30] of Text[50];
        i: Integer;
        j: Integer;
        Assignmat: Record "Assignment Matrix-X1";
        DateSpecified: Date;
        Totallowances: Decimal;
        TotalDeductions: Decimal;
        OtherEarn: Decimal;
        OtherDeduct: Decimal;
        counter: Integer;
        HRSetup: Record "Human Resources Setup";
        NetPay: Decimal;
        Payroll: Codeunit Payroll3;
        MASTER_ROLLCaptionLbl: label 'MASTER ROLL';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Other_AllowancesCaptionLbl: label 'Other Allowances';
        Total_AllowancesCaptionLbl: label 'Total Allowances';
        TOTALSCaptionLbl: label 'TOTALS';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511170_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511170;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
