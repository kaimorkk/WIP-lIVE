//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511157_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511157) { }
//type("System.IO.Path"; System_IO_Path51511157) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193571 "Individual Leave analysis"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/IndividualLeaveanalysis.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Employee Leaves1"; "Employee Leaves1")
        {
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Leave Code", "Employee No";
            column(ReportForNavId_7387; 7387) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Employee_Leaves1__Employee_No_; "Employee Leaves1"."Employee No")
            {
            }
            column(Employee_Leaves1__Employee_Leaves1__Entitlement; "Employee Leaves1".Entitlement)
            {
            }
            column(Employee_Leaves1__Employee_Leaves1___Balance_Brought_Forward_; "Employee Leaves1"."Balance Brought Forward")
            {
            }
            column(Employee_Leaves1__Employee_Leaves1___Total_Days_Taken_; "Employee Leaves1"."Total Days Taken")
            {
            }
            column(Name; Name)
            {
            }
            column(Employee_Leaves1__Employee_Leaves1___Recalled_Days_; "Employee Leaves1"."Recalled Days")
            {
            }
            column(Bal; Bal)
            {
            }
            column(FinalBal; FinalBal)
            {
            }
            column(Employee_Leaves1__Employee_Leaves1___Acrued_Days_; "Employee Leaves1"."Acrued Days")
            {
            }
            column(Employee_Leaves1__Days_Absent_; "Employee Leaves1"."Days Absent")
            {
            }
            column(Individual_Leave_AnalysisCaption; Individual_Leave_AnalysisCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Staff_No_Caption; Staff_No_CaptionLbl)
            {
            }
            column(NameCaption; NameCaptionLbl)
            {
            }
            column(Balance_B_FCaption; Balance_B_FCaptionLbl)
            {
            }
            column(EntitlmentCaption; EntitlmentCaptionLbl)
            {
            }
            column(Total_Days_TakenCaption; Total_Days_TakenCaptionLbl)
            {
            }
            column(Recalled_DaysCaption; Recalled_DaysCaptionLbl)
            {
            }
            column(Off_DaysCaption; Off_DaysCaptionLbl)
            {
            }
            column(BalanceCaption; BalanceCaptionLbl)
            {
            }
            column(Dates_TakenCaption; Dates_TakenCaptionLbl)
            {
            }
            column(Employee_Leaves1__Days_Absent_Caption; FieldCaption("Days Absent"))
            {
            }
            column(Employee_Leaves1_Leave_Code; "Employee Leaves1"."Leave Code")
            {
            }
            column(Employee_Leaves1_Maturity_Date; "Employee Leaves1"."Maturity Date")
            {
            }
            dataitem("Employee Leave Application1"; "Employee Leave Application1")
            {
                DataItemLink = "Employee No" = field("Employee No"), "Maturity Date" = field("Maturity Date");
                DataItemTableView = sorting("Application No") where(Status = const(Released));
                RequestFilterFields = "End Date", "Start Date";
                column(ReportForNavId_4132; 4132) { } // Autogenerated by ForNav - Do not delete
                column(Employee_Leave_Application1__Days_Applied_; "Employee Leave Application1"."Days Applied")
                {
                }
                column(STRSUBSTNO___1___2___Employee_Leave_Application1___Start_Date___Employee_Leave_Application1___End_Date__; StrSubstNo('%1..%2', "Employee Leave Application1"."Start Date", "Employee Leave Application1"."End Date"))
                {
                }
                column(Bal_Control1000000024; Bal)
                {
                }
                column(Employee_Leave_Application1_Application_No; "Employee Leave Application1"."Application No")
                {
                }
                column(Employee_Leave_Application1_Employee_No; "Employee Leave Application1"."Employee No")
                {
                }
                column(Employee_Leave_Application1_Maturity_Date; "Employee Leave Application1"."Maturity Date")
                {
                }
                column(STRSUBSTNO_1_Employee_Leave_Application1_Days_Applied; StrSubstNo('%1', "Employee Leave Application1"."Days Applied"))
                {
                }
                column(STRSUBSTNO_1_Employee_Leave_Application1_Recalled_Days; StrSubstNo('%1', "Employee Leave Application1"."Recalled Days"))
                {
                }
                column(STRSUBSTNO_1_Employee_Leave_Application1_Days_Absent; StrSubstNo('%1', "Employee Leave Application1"."Days Absent"))
                {
                }
                trigger OnAfterGetRecord();
                begin
                    Bal := Bal - "Employee Leave Application1"."Days Applied";
                end;

            }
            trigger OnPreDataItem();
            begin
                //"Employee Leaves".SETRANGE("Employee Leaves"."Maturity Date",MaturityDateFilter);
            end;

            trigger OnAfterGetRecord();
            begin
                if Emp.Get("Employee Leaves1"."Employee No") then begin
                    "Employee Leaves1".CalcFields("Employee Leaves1"."Total Days Taken", "Employee Leaves1"."Recalled Days");
                    Name := Emp."First Name" + ' ' + Emp."Middle Name" + ' ' + Emp."Last Name";
                end;
                Bal := 0;
                Bal := ("Employee Leaves1".Entitlement + "Employee Leaves1"."Balance Brought Forward" + "Employee Leaves1"."Recalled Days") -
                ("Employee Leaves1"."Days Absent");  //+"Employee Leaves1"."Total Days Taken"
                FinalBal := ("Employee Leaves1".Entitlement + "Employee Leaves1"."Balance Brought Forward" + "Employee Leaves1"."Recalled Days") -
                ("Employee Leaves1"."Days Absent" + "Employee Leaves1"."Total Days Taken");
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        AcctPeriod.Reset;
        AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
        AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
        if AcctPeriod.Find('+') then
            MaturityDateFilter := CalcDate('1Y', AcctPeriod."Starting Date") - 1;
        // MESSAGE('%1',MaturityDateFilter);
        //;
        //ReportsForNavPre;
    end;

    var
        Emp: Record Employee;
        Name: Text[50];
        AcctPeriod: Record "Payroll PeriodX1";
        MaturityDateFilter: Date;
        Bal: Decimal;
        Individual_Leave_AnalysisCaptionLbl: label 'Individual Leave Analysis';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Staff_No_CaptionLbl: label 'Staff No.';
        NameCaptionLbl: label 'Name';
        Balance_B_FCaptionLbl: label 'Balance B/F';
        EntitlmentCaptionLbl: label 'Entitlment';
        Total_Days_TakenCaptionLbl: label 'Days Taken';
        Recalled_DaysCaptionLbl: label 'Recalled Days';
        Off_DaysCaptionLbl: label 'Off Days';
        BalanceCaptionLbl: label 'Balance';
        Dates_TakenCaptionLbl: label 'Dates Taken';
        FinalBal: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511157_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511157;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
