//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511020_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511020) { }
    //type("System.IO.Path"; System_IO_Path51511020) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193458 "Generate EFT transactions"
{
    RDLCLayout = './Layouts/GenerateEFTtransactions.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
        {
            DataItemTableView = sorting("Bank Account No.", "Posting Date");
            RequestFilterFields = "Bank Account No.";
            column(ReportForNavId_4920; 4920) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Bank_Account_Ledger_Entry__Bank_Account_No__; "Bank Account Ledger Entry"."Bank Account No.")
            {
            }
            column(Bank_Account_Ledger_Entry__Posting_Date_; "Bank Account Ledger Entry"."Posting Date")
            {
            }
            column(Bank_Account_Ledger_Entry__Document_No__; "Bank Account Ledger Entry"."Document No.")
            {
            }
            column(Bank_Account_Ledger_Entry_Description; "Bank Account Ledger Entry".Description)
            {
            }
            column(Bank_Account_Ledger_Entry_Amount; "Bank Account Ledger Entry".Amount)
            {
            }
            column(TotalFor___FIELDCAPTION__Bank_Account_No___; TotalFor + FieldCaption("Bank Account No."))
            {
            }
            column(Bank_Account_Ledger_Entry_Amount_Control1000000023; "Bank Account Ledger Entry".Amount)
            {
            }
            column(Bank_Account_Ledger_EntryCaption; Bank_Account_Ledger_EntryCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Bank_Account_Ledger_Entry__Posting_Date_Caption; FieldCaption("Posting Date"))
            {
            }
            column(Bank_Account_Ledger_Entry__Document_No__Caption; FieldCaption("Document No."))
            {
            }
            column(Bank_Account_Ledger_Entry_DescriptionCaption; FieldCaption(Description))
            {
            }
            column(Bank_Account_Ledger_Entry_AmountCaption; FieldCaption(Amount))
            {
            }
            column(Bank_Account_Ledger_Entry__Bank_Account_No__Caption; FieldCaption("Bank Account No."))
            {
            }
            column(Bank_Account_Ledger_Entry_Entry_No_; "Bank Account Ledger Entry"."Entry No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
            end;

            trigger OnAfterGetRecord();
            begin
                if paymentsRec.Get("Bank Account Ledger Entry"."Document No.") then begin
                    if paymentsRec."Pay Mode" <> 'EFT' then
                        CurrReport.Skip;
                    EFTTransact.Init;
                    EFTTransact.TransferFields("Bank Account Ledger Entry");
                    if VendRec.Get(paymentsRec."Account No.") then begin
                        //EFTTransact."Bank Code":=VendRec."Bank Code";
                        //EFTTransact."Branch Code":=VendRec."Bank Branch Code";
                        //EFTTransact."Bank Account Number":=VendRec."Account Number";
                        EFTTransact.PayeeName := VendRec.Name;
                    end;
                    if not EFTTransact.Get("Bank Account Ledger Entry"."Entry No.") then
                        EFTTransact.Insert;
                end
                else
                    CurrReport.Skip;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        BBKCode := "Bank Account Ledger Entry".GetRangeMin("Bank Account Ledger Entry"."Bank Account No.");
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        BBKCode: Code[20];
        EFTTransact: Record EFT1;
        paymentsRec: Record Payments;
        VendRec: Record Vendor;
        Bank_Account_Ledger_EntryCaptionLbl: label 'Bank Account Ledger Entry';
        CurrReport_PAGENOCaptionLbl: label 'Page';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511020_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511020;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
