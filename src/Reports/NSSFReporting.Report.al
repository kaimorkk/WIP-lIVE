//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511143_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511143) { }
//type("System.IO.Path"; System_IO_Path51511143) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193558 "NSSF Reporting"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/NSSFReporting.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
        {
            DataItemTableView = sorting("Employee No", Type, Code, "Payroll Period", "Reference No") order(ascending) where(Type = const(Deduction));
            RequestFilterFields = "Payroll Period", "Code";
            RequestFilterHeading = 'NSSF';
            column(ReportForNavId_5751; 5751) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(CoNssf; CoNssf)
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___Month_Text___year4____; UpperCase(Format(DateSpecified, 0, '<Month Text> <year4>')))
            {
            }
            column(Assignment_Matrix_X1__Employee_No_; "Assignment Matrix-X1"."Employee No")
            {
            }
            column(Name; Name)
            {
            }
            column(ABS_Amount_; Abs(Amount))
            {
            }
            column(ABS__Employer_Amount___; Abs("Employer Amount"))
            {
            }
            column(Emp__NSSF_No__; Emp."Social Security No.")
            {
            }
            column(ABS__Employer_Amount____ABS_Amount_; Abs("Employer Amount") + Abs(Amount))
            {
            }
            column(EmployeeTotal; EmployeeTotal)
            {
            }
            column(EmployerTotal; EmployerTotal)
            {
            }
            column(SumTotal; SumTotal)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(COMPANY_NSSF_No_Caption; COMPANY_NSSF_No_CaptionLbl)
            {
            }
            column(UserCaption; UserCaptionLbl)
            {
            }
            column(CONTRIBUTIONS_RETURN_FORMCaption; CONTRIBUTIONS_RETURN_FORMCaptionLbl)
            {
            }
            column(PERIODCaption; PERIODCaptionLbl)
            {
            }
            column(NATIONAL_SOCIAL_SECURITY_FUNDCaption; NATIONAL_SOCIAL_SECURITY_FUNDCaptionLbl)
            {
            }
            column(P_O__BOX_30599Caption; P_O__BOX_30599CaptionLbl)
            {
            }
            column(NAIROBICaption; NAIROBICaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(NameCaption; NameCaptionLbl)
            {
            }
            column(Total_AmountCaption; Total_AmountCaptionLbl)
            {
            }
            column(Employer_AmountCaption; Employer_AmountCaptionLbl)
            {
            }
            column(Employee_AmountCaption; Employee_AmountCaptionLbl)
            {
            }
            column(NSSF_No_Caption; NSSF_No_CaptionLbl)
            {
            }
            column(TotalCaption; TotalCaptionLbl)
            {
            }
            column(Certified_correct_by_Company_Authorised_Officer_Caption; Certified_correct_by_Company_Authorised_Officer_CaptionLbl)
            {
            }
            column(NAME_________________________________________________________________________Caption; NAME_________________________________________________________________________CaptionLbl)
            {
            }
            column(SIGNATURE___________________________________________________________Caption; SIGNATURE___________________________________________________________CaptionLbl)
            {
            }
            column(DESIGNATION____________________________________________________________Caption; DESIGNATION____________________________________________________________CaptionLbl)
            {
            }
            column(DATE_____________________________________________________________________Caption; DATE_____________________________________________________________________CaptionLbl)
            {
            }
            column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
            {
            }
            column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
            {
            }
            column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
            {
            }
            column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo(Code);
                //"Assignment Matrix-X".SETRANGE("Assignment Matrix-X".Retirement,TRUE);
                "Assignment Matrix-X1".SetRange("Assignment Matrix-X1".Type, "Assignment Matrix-X1".Type::Deduction);
            end;

            trigger OnAfterGetRecord();
            begin
                if Emp.Get("Employee No") then begin
                    Name := Emp."First Name" + ' ' + Emp."Last Name";
                    Emp.SetRange(Emp."Pay Period Filter", "Assignment Matrix-X1"."Payroll Period");
                    Emp.CalcFields(Emp."Cumm. Basic Pay");
                    if BeginDate = DateSpecified then
                        BasicPay := Emp."Basic Pay"
                    else
                        BasicPay := Emp."Cumm. Basic Pay";
                    SSFNo := Emp."Social Security No.";
                end;
                if "Assignment Matrix-X1".Type = "Assignment Matrix-X1".Type::Payment then begin
                    if Payment.Get("Assignment Matrix-X1".Code) then
                        GroupHeader := Payment.Description;
                end;
                if "Assignment Matrix-X1".Type = "Assignment Matrix-X1".Type::Deduction then begin
                    if Deduction.Get("Assignment Matrix-X1".Code) then
                        GroupHeader := Deduction.Description;
                end;
                TotalBasic := TotalBasic + BasicPay;
                EmployerTotal := EmployerTotal + Abs("Assignment Matrix-X1"."Employer Amount");
                EmployeeTotal := EmployeeTotal + Abs("Assignment Matrix-X1".Amount);
                SumTotal := SumTotal + Abs("Assignment Matrix-X1"."Employer Amount") + Abs("Assignment Matrix-X1".Amount);
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompRec.Get;
        CoNssf := CompRec."N.S.S.F No.";
        GetPayPeriod;
        DateSpecified := "Assignment Matrix-X1".GetRangeMin("Assignment Matrix-X1"."Payroll Period");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodText := PayPeriod.Name;
        nssfcode := "Assignment Matrix-X1".GetRangeMin("Assignment Matrix-X1".Code);
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        Emp: Record Employee;
        Name: Text[250];
        Payment: Record EarningsX1;
        Deduction: Record DeductionsX1;
        TypeFilter: Text[30];
        GroupHeader: Text[30];
        BasicPay: Decimal;
        SSFNo: Code[30];
        TotalBasic: Decimal;
        PayPeriod: Record "Payroll PeriodX1";
        PayPeriodText: Text[30];
        Title: Text[30];
        DateSpecified: Date;
        BeginDate: Date;
        CompRec: Record "Company Information";
        CoNssf: Text[30];
        SumTotal: Decimal;
        EmployeeTotal: Decimal;
        EmployerTotal: Decimal;
        GetGroup: Codeunit Payroll5;
        GroupCode: Code[20];
        CUser: Code[20];
        nssfcode: Code[10];
        CurrReport_PAGENOCaptionLbl: label 'Page';
        COMPANY_NSSF_No_CaptionLbl: label 'COMPANY NSSF No.';
        UserCaptionLbl: label 'User';
        CONTRIBUTIONS_RETURN_FORMCaptionLbl: label 'CONTRIBUTIONS RETURN FORM';
        PERIODCaptionLbl: label 'PERIOD';
        NATIONAL_SOCIAL_SECURITY_FUNDCaptionLbl: label 'NATIONAL SOCIAL SECURITY FUND';
        P_O__BOX_30599CaptionLbl: label 'P.O. BOX 30599';
        NAIROBICaptionLbl: label 'NAIROBI';
        No_CaptionLbl: label 'No.';
        NameCaptionLbl: label 'Name';
        Total_AmountCaptionLbl: label 'Total Amount';
        Employer_AmountCaptionLbl: label 'Employer Amount';
        Employee_AmountCaptionLbl: label 'Employee Amount';
        NSSF_No_CaptionLbl: label 'NSSF No.';
        TotalCaptionLbl: label 'Total';
        Certified_correct_by_Company_Authorised_Officer_CaptionLbl: label 'Certified correct by Company Authorised Officer ';
        NAME_________________________________________________________________________CaptionLbl: label 'NAME  .......................................................................';
        SIGNATURE___________________________________________________________CaptionLbl: label 'SIGNATURE ..........................................................';
        DESIGNATION____________________________________________________________CaptionLbl: label 'DESIGNATION ...........................................................';
        DATE_____________________________________________________________________CaptionLbl: label 'DATE ....................................................................';

    procedure GetPayPeriod()
    begin
        PayPeriod.SetRange(PayPeriod.Closed, false);
        if PayPeriod.Find('-') then
            BeginDate := PayPeriod."Starting Date";
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511143_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511143;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
