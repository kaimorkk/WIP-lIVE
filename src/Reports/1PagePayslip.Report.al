//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
// assembly("ForNav.Reports.7.3.0.2559")
// {
//     type(ForNav.Report_7_3_0_2559; ForNavReport51511125_v7_3_0_2559) { }
// }
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511125) { }
//type("System.IO.Path"; System_IO_Path51511125) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193543 "1 Page Payslip"
{
    RDLCLayout = './Layouts/1PagePayslip.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("Global Dimension 1 Code") order(ascending);
            RequestFilterFields = "No.", "Pay Period Filter";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(First_Name________Middle_Name__________Last_Name_; "First Name" + ' ' + "Middle Name" + ' ' + "Last Name")
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            column(PAY_SLIP_; 'PAY SLIP')
            {
            }
            column(CoName; CoName)
            {
            }
            column(BasicSalary; BasicSalary)
            {
            }
            column(Employee__Job_Title_; Employee."Job Title")
            {
            }
            column(Employee_Employee__No__; Employee."No.")
            {
            }
            column(Employee__Global_Dimension_1_Code_; Employee."Global Dimension 1 Code")
            {
            }
            column(Employee__Global_Dimension_2_Code_; Employee."Global Dimension 2 Code")
            {
            }
            column(BankName; BankName)
            {
            }
            column(Employee__Bank_Account_Number_; Employee."Bank Account Number")
            {
            }
            column(BankBranch; BankBranch)
            {
            }
            column(IncomeTax; IncomeTax)
            {
            }
            column(Employee__P_I_N_; Employee."P.I.N")
            {
            }
            column(BASIC_PAYCaption; BASIC_PAYCaptionLbl)
            {
            }
            column(EarningsCaption; EarningsCaptionLbl)
            {
            }
            column(DeductionsCaption; DeductionsCaptionLbl)
            {
            }
            column(JOB_TITLECaption; JOB_TITLECaptionLbl)
            {
            }
            column(EMPLOYEE_NO_Caption; EMPLOYEE_NO_CaptionLbl)
            {
            }
            column(PROJECTCaption; PROJECTCaptionLbl)
            {
            }
            column(DEPARTMENTCaption; DEPARTMENTCaptionLbl)
            {
            }
            column(DescriptionCaption; DescriptionCaptionLbl)
            {
            }
            column(EMPLOYEE_BANKCaption; EMPLOYEE_BANKCaptionLbl)
            {
            }
            column(BANK_ACCOUNT_NUMBERCaption; BANK_ACCOUNT_NUMBERCaptionLbl)
            {
            }
            column(BANK_BRANCHCaption; BANK_BRANCHCaptionLbl)
            {
            }
            column(INCOME_TAX__P_A_Y_E_Caption; INCOME_TAX__P_A_Y_E_CaptionLbl)
            {
            }
            column(P_I_N_NUMBERCaption; P_I_N_NUMBERCaptionLbl)
            {
            }
            column(PrincipalCaption; PrincipalCaptionLbl)
            {
            }
            column(InterestCaption; InterestCaptionLbl)
            {
            }
            column(Employee_Pay_Period_Filter; Employee."Pay Period Filter")
            {
            }
            dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
            {
                DataItemLink = "Employee No" = field("No."), "Payroll Period" = field("Pay Period Filter");
                DataItemTableView = sorting("Employee No", Type, Code, "Payroll Period");
                column(ReportForNavId_5751; 5751) { } // Autogenerated by ForNav - Do not delete
                column(Assignment_Matrix_X1_Amount; "Assignment Matrix-X1".Amount)
                {
                }
                column(Assignment_Matrix_X1_Description; "Assignment Matrix-X1".Description)
                {
                }
                column(HoursBal; HoursBal)
                {
                }
                column(Assignment_Matrix_X1_Amount_Control5; "Assignment Matrix-X1".Amount)
                {
                }
                column(Assignment_Matrix_X1_Description_Control11; "Assignment Matrix-X1".Description)
                {
                }
                column(HoursBal_Control108; HoursBal)
                {
                }
                column(Principal; Principal)
                {
                }
                column(Interest; Interest)
                {
                }
                column(Employee__Total_Allowances___BasicSalary_Employee__Benefits_Non_Cash_; Employee."Total Allowances" + BasicSalary + Employee."Benefits-Non Cash")
                {
                }
                column(Employee__Total_Deductions___IncomeTax; Employee."Total Deductions" + IncomeTax)
                {
                }
                column(GrossPay; GrossPay)
                {
                }
                column(NetPay1; NetPay1)
                {
                }
                column(Employee__Benefits_Non_Cash_; Employee."Benefits-Non Cash")
                {
                }
                column(Employee__Pay_Mode_; Employee."Pay Mode")
                {
                }
                column(TaxableAmount; TaxableAmount)
                {
                }
                column(relief; relief)
                {
                }
                column(IncomeTax_Control70; IncomeTax)
                {
                }
                column(TaxablePay; TaxablePay)
                {
                }
                column(TotalQuarters; TotalQuarters)
                {
                }
                column(ROUND_TaxableAmount_20_1_____; ROUND(TaxableAmount / 20, 1, '<'))
                {
                }
                column(Assignment_Matrix_X1_Paye; "Assignment Matrix-X1".Paye)
                {
                }
                column(DenomArray_1_1_; DenomArray[1, 1])
                {
                }
                column(DenomArray_1_2_; DenomArray[1, 2])
                {
                }
                column(DenomArray_1_3_; DenomArray[1, 3])
                {
                }
                column(DenomArray_1_5_; DenomArray[1, 5])
                {
                }
                column(DenomArray_1_4_; DenomArray[1, 4])
                {
                }
                column(DenomArray_1_7_; DenomArray[1, 7])
                {
                }
                column(DenomArray_1_6_; DenomArray[1, 6])
                {
                }
                column(DenomArray_1_8_; DenomArray[1, 8])
                {
                }
                column(DenomArray_1_9_; DenomArray[1, 9])
                {
                }
                column(DenomArray_1_11_; DenomArray[1, 11])
                {
                }
                column(DenomArray_1_10_; DenomArray[1, 10])
                {
                }
                column(NoOfUnitsArray_1_11_; NoOfUnitsArray[1, 11])
                {
                }
                column(NoOfUnitsArray_1_10_; NoOfUnitsArray[1, 10])
                {
                }
                column(NoOfUnitsArray_1_9_; NoOfUnitsArray[1, 9])
                {
                }
                column(NoOfUnitsArray_1_7_; NoOfUnitsArray[1, 7])
                {
                }
                column(NoOfUnitsArray_1_8_; NoOfUnitsArray[1, 8])
                {
                }
                column(NoOfUnitsArray_1_6_; NoOfUnitsArray[1, 6])
                {
                }
                column(NoOfUnitsArray_1_5_; NoOfUnitsArray[1, 5])
                {
                }
                column(NoOfUnitsArray_1_4_; NoOfUnitsArray[1, 4])
                {
                }
                column(NoOfUnitsArray_1_3_; NoOfUnitsArray[1, 3])
                {
                }
                column(NoOfUnitsArray_1_2_; NoOfUnitsArray[1, 2])
                {
                }
                column(NoOfUnitsArray_1_1_; NoOfUnitsArray[1, 1])
                {
                }
                column(EmpRec_BfMpr; EmpRec.BfMpr)
                {
                }
                column(CfMpr; CfMpr)
                {
                }
                column(RetireCont; RetireCont)
                {
                }
                column(DenomArray_1_12_; DenomArray[1, 12])
                {
                }
                column(NoOfUnitsArray_1_12_; NoOfUnitsArray[1, 12])
                {
                }
                column(TotalsCaption; TotalsCaptionLbl)
                {
                }
                column(Gross_PayCaption; Gross_PayCaptionLbl)
                {
                }
                column(Net_PayCaption; Net_PayCaptionLbl)
                {
                }
                column(Total_BenefitsCaption; Total_BenefitsCaptionLbl)
                {
                }
                column(Payment_ByCaption; Payment_ByCaptionLbl)
                {
                }
                column(Taxable_Pay_Caption; Taxable_Pay_CaptionLbl)
                {
                }
                column(Less_Retirement_Contrib_Caption; Less_Retirement_Contrib_CaptionLbl)
                {
                }
                column(Net_Taxable_AmountCaption; Net_Taxable_AmountCaptionLbl)
                {
                }
                column(Net_Taxable_Kenya_PoundsCaption; Net_Taxable_Kenya_PoundsCaptionLbl)
                {
                }
                column(Tax_ChargedCaption; Tax_ChargedCaptionLbl)
                {
                }
                column(Monthly_Personal_ReliefCaption; Monthly_Personal_ReliefCaptionLbl)
                {
                }
                column(B_F_MPRCaption; B_F_MPRCaptionLbl)
                {
                }
                column(Tax_Paid_SHS_Caption; Tax_Paid_SHS_CaptionLbl)
                {
                }
                column(C_F_MPRCaption; C_F_MPRCaptionLbl)
                {
                }
                column(HousingCaption; HousingCaptionLbl)
                {
                }
                column(Income_Tax_DetailsCaption; Income_Tax_DetailsCaptionLbl)
                {
                }
                column(Assignment_Matrix_X1_Employee_No; "Assignment Matrix-X1"."Employee No")
                {
                }
                column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
                {
                }
                column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
                {
                }
                column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
                {
                }
                column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    HoursBal := 0;
                    Principal := 0;
                    Interest := 0;
                    if Type = Type::Deduction then begin
                        if Ded.Get(Code) then begin
                            if Ded.Loan = true then begin
                                Principal := "Assignment Matrix-X1".Amount - "Assignment Matrix-X1"."Interest Amount";
                                Interest := "Assignment Matrix-X1"."Interest Amount";
                            end else begin
                                Principal := 0;
                                Interest := 0;
                            end;
                            if Ded."Show Balance" then begin
                                Ded.SetRange("Employee Filter", Employee."No.");
                                Ded.SetRange("Pay Period Filter", 0D, DateSpecified);
                                Ded.CalcFields("Total Amount");
                                if "Loan Repay" then begin
                                    // if Loans.Get(Code, Employee."No.") then begin
                                    //     Loans.SetRange("Date Filter", 0D, DateSpecified);
                                    //     Loans.CalcFields("Amount Paid", "Interest Repaid to Date", "Cumm. Period Repayments");
                                    //     HoursBal := Abs(Loans."Loan Amount" - Loans."Cumm. Period Repayments");
                                    // end;
                                end
                                else begin
                                    HoursBal := Abs(Ded."Total Amount");
                                    Ded.Reset;
                                    Ded.SetRange("Employee Filter", Employee."No.");
                                    Ded.CalcFields("Opening Balance");
                                    HoursBal := Abs(HoursBal + Ded."Opening Balance");
                                end;
                            end;
                        end;
                    end
                    else begin
                        if Pay.Get(Code) then begin
                            if Pay."Show Balance" then begin
                                Pay.SetRange("Employee Filter", Employee."No.");
                                Pay.SetRange("Pay Period Filter", 0D, DateSpecified);
                                Pay.CalcFields("Total Amount");
                                if Pay."Overtime Factor" > 0 then
                                    HoursBal := "No. of Units"
                                else
                                    HoursBal := Pay."Total Amount";
                                Pay.Reset;
                                Pay.SetRange("Employee Filter", Employee."No.");
                                Pay.CalcFields("Opening Balance");
                                HoursBal := HoursBal + Pay."Opening Balance";
                            end;
                        end;
                    end;
                end;

            }
            trigger OnPreDataItem();
            begin
                Company.Get;
                CoName := Company.Name;
                if BeginDate = DateSpecified then
                    Employee.SetRange(Status, Employee.Status::Active);
                CUser := UserId;
                GetGroup.GetUserGroup(CUser, GroupCode);
                SetRange(Employee."Posting Group", GroupCode);
            end;

            trigger OnAfterGetRecord();
            begin
                CfMpr := 0;
                Employee.CalcFields("Cumm. Basic Pay");
                if (Employee."Cumm. Basic Pay" = 0) and (BeginDate <> DateSpecified) then
                    CurrReport.Quit;
                if EmpBank.Get("Employee's Bank", "Bank Branch") then begin
                    BankName := EmpBank.Name;
                    BankBranch := EmpBank."Name 2";
                end;
                Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount");
                Employee.CalcFields("Total Allowances", "Benefits-Non Cash", "Total Deductions");
                Employee.CalcFields("Retirement Contribution", "Total Savings");
                if BeginDate = DateSpecified then
                    BasicSalary := Employee."Basic Pay"
                else
                    BasicSalary := Employee."Cumm. Basic Pay";
                TaxableAmount := BasicSalary + Employee."Taxable Allowance";
                if Employee."Housed by Employer" then begin
                    case Housing of
                        Housing::Ordinary:
                            Employee."Total Quarters" := 0.15 * TaxableAmount;
                        Housing::Directors:
                            Employee."Total Quarters" := 0.15 * TaxableAmount;
                        Housing::Agricultural:
                            Employee."Total Quarters" := 0.1 * TaxableAmount;
                    end;
                end;
                CompRec.Get;
                HseLimit := CompRec."Housing Earned Limit";
                TaxCode := CompRec."Tax Table";
                if ((TaxableAmount > HseLimit) and (Employee."Total Quarters" > 0)) then begin
                    if Employee."Employer Rent" then
                        if Employee."House Rent" > Employee."Total Quarters" then
                            Employee."Total Quarters" := Employee."House Rent"
                        else
                            Employee."Total Quarters" := Employee."Total Quarters"
                    else
                        Employee."Total Quarters" := Employee."Total Quarters" - Employee."House Rent";
                end;
                if BeginDate <> DateSpecified then begin
                    Employee.SetRange("Pay Period Filter", DateSpecified);
                    Employee.CalcFields(Employee."Cumulative Quarters");
                    Employee."Total Quarters" := Employee."Cumulative Quarters";
                end;
                Employee."Total Quarters" := ROUND(Employee."Total Quarters", 0.01);
                TaxableAmount := TaxableAmount + Employee."Total Quarters" + Employee."Tax Deductible Amount";
                //Checking for Pension Limit to allow for tax
                retirecontribution := 0;
                retirecontribution := -Employee."Retirement Contribution";
                if Employee."Retirement Contribution" > CompRec."Pension Limit Amount" then begin
                    ExcessRetirement := retirecontribution - CompRec."Pension Limit Amount";
                    TaxableAmount := TaxableAmount + ExcessRetirement
                end;
                //END----Checking for pension Limit
                GrossPay := BasicSalary + Employee."Total Allowances";
                TotalBenefits := Employee."Benefits-Non Cash";
                TaxablePay := BasicSalary + Employee."Taxable Allowance";
                RetireCont := Employee."Tax Deductible Amount" + ExcessRetirement;
                TotalQuarters := Employee."Total Quarters";
                TaxableAmount := ROUND(TaxableAmount, 1, '>');
                //MESSAGE('Taxable amt=%1',TaxableAmount);
                GetTaxBracket(TaxableAmount);
                PAYE := IncomeTax;
                relief := Employee."Tax Relief Amount";
                if (Format(DateSpecified, 0, '<month>')) <> '1' then begin
                    EmpRec.Reset;
                    EmpRec.SetRange(EmpRec."Pay Period Filter", CalcDate('-1M', DateSpecified));
                    EmpRec.Get(Employee."No.");
                    EmpRec.CalcFields(EmpRec.BfMpr);
                    IncomeTax := IncomeTax + relief + EmpRec.BfMpr;
                    BfMpr := EmpRec.BfMpr;
                end
                else
                    IncomeTax := IncomeTax + relief;
                if not Employee."Pays tax" then begin
                    IncomeTax := 0;
                    TaxablePay := 0;
                    RetireCont := 0;
                    TotalQuarters := 0;
                    TaxableAmount := 0;
                    relief := 0;
                    PAYE := 0;
                end;
                if IncomeTax > 0 then begin
                    CfMpr := IncomeTax;
                    IncomeTax := 0;
                end;
                if BeginDate = DateSpecified then
                    Employee.SetRange(Employee."Pay Period Filter", BeginDate);
                NetPay := BasicSalary + Employee."Total Allowances"
                        + Employee."Total Deductions" + IncomeTax + Employee."Total Savings";
                // To compute coinage
                NetPay1 := NetPay;
                Index := 1;
                Intex := 1;
                for Intex := 1 to 12 do begin
                    repeat
                        Clear(NoOfUnitsArray[1] [Intex]);
                        Clear(DenomArray[1] [Index]);
                        Index := Index + 1;
                        Intex := Intex + 1;
                    until Index > 12;
                end;
                if Employee."Pay Mode" = Employee."pay mode"::Cash then
                    PayMode := 'Cash';
                if Employee."Pay Mode" = Employee."pay mode"::Bank then
                    PayMode := 'Bank';
                if Employee."Pay Mode" = Employee."pay mode"::"Bank Transfer" then
                    PayMode := 'Bank Transfer';
                if Employee."Pay Mode" = Employee."pay mode"::Cheque then
                    PayMode := 'Cheque';
                Index := 12;
                /*
                IF CoinageTable.FIND('-') THEN
                BEGIN
                 REPEAT
                 DenomArray[1][Index]:=CoinageTable."Amount Description";
                 AmountArray[1][Index]:=CoinageTable.Amount;
                 Index:=Index-1;
                 UNTIL CoinageTable.NEXT=0;
                END;
                FOR Intex:=1 TO 12 DO
                BEGIN
                IF ((NetPay >= AmountArray[1][Intex]) AND (AmountArray[1][Intex]<>0)) THEN
                NoOfUnitsArray[1][Intex]:=NetPay DIV AmountArray[1][Intex];
                NetPay:=NetPay-NoOfUnitsArray[1][Intex]*AmountArray[1][Intex];
                END;
                Index:=1;
                Intex:=1;
                IF PayMode<>'Cash' THEN
                FOR Intex:=1 TO 12 DO
                BEGIN
                 REPEAT
                  CLEAR(NoOfUnitsArray[1][Intex]);
                  CLEAR(DenomArray[1][Index]);
                  Index:=Index+1;
                  Intex:=Intex+1;
                 UNTIL Index > 12;
                END;
                */

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GetPayPeriod;
        PayPeriodtext := Employee.GetFilter("Pay Period Filter");
        if PayPeriodtext = '' then
            Error('Pay period must be specified for this report');
        DateSpecified := Employee.GetRangeMin(Employee."Pay Period Filter");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodtext := PayPeriod.Name;
        EndDate := CalcDate('1M', DateSpecified - 1);
        //;
        //ReportsForNavPre;
    end;

    var
        Text001: label 'Page';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TaxableAmount: Decimal;
        IncomeTax: Decimal;
        NetPay: Decimal;
        RightBracket: Boolean;
        AmountRemaining: Decimal;
        Company: Record "Company Information";
        Companyz: Code[10];
        Flat: Decimal;
        Percentage: Decimal;
        // Loans: Record "Loans transactionsX1";
        LoanAmount: Decimal;
        Outstanding: Decimal;
        PayPeriodtext: Text[30];
        PayPeriod: Record "Payroll PeriodX1";
        EmpBank: Record "Employee Bank AccountX1";
        BankName: Text[30];
        AmountPaid: Decimal;
        StartDate: Date;
        DateSpecified: Date;
        EndDate: Date;
        CumSSF: Decimal;
        CummTaxes: Decimal;
        PAYE: Decimal;
        CumEmployerSSF: Decimal;
        BeginDate: Date;
        BasicSalary: Decimal;
        CompRec: Record "Human Resources Setup";
        HseLimit: Decimal;
        Index: Integer;
        DenomArray: array[1, 12] of Text[50];
        NoOfUnitsArray: array[1, 12] of Integer;
        AmountArray: array[1, 12] of Decimal;
        PayMode: Text[30];
        Intex: Integer;
        NetPay1: Decimal;
        ExcessRetirement: Decimal;
        CfMpr: Decimal;
        relief: Decimal;
        GrossPay: Decimal;
        TotalBenefits: Decimal;
        RetireCont: Decimal;
        TotalQuarters: Decimal;
        TaxablePay: Decimal;
        TaxCode: Code[10];
        HoursBal: Decimal;
        Ded: Record DeductionsX1;
        Pay: Record EarningsX1;
        BankBranch: Text[30];
        CoName: Text[60];
        EmpRec: Record Employee;
        retirecontribution: Decimal;
        Principal: Decimal;
        Interest: Decimal;
        GetGroup: Codeunit Payroll3;
        GroupCode: Code[20];
        CUser: Code[20];
        BASIC_PAYCaptionLbl: label 'BASIC PAY';
        EarningsCaptionLbl: label 'Earnings';
        DeductionsCaptionLbl: label 'Deductions';
        JOB_TITLECaptionLbl: label 'JOB TITLE';
        EMPLOYEE_NO_CaptionLbl: label 'EMPLOYEE NO.';
        PROJECTCaptionLbl: label 'PROJECT';
        DEPARTMENTCaptionLbl: label 'DEPARTMENT';
        DescriptionCaptionLbl: label 'Description';
        EMPLOYEE_BANKCaptionLbl: label 'EMPLOYEE BANK';
        BANK_ACCOUNT_NUMBERCaptionLbl: label 'BANK ACCOUNT NUMBER';
        BANK_BRANCHCaptionLbl: label 'BANK BRANCH';
        INCOME_TAX__P_A_Y_E_CaptionLbl: label 'INCOME TAX (P.A.Y.E)';
        P_I_N_NUMBERCaptionLbl: label 'P.I.N NUMBER';
        PrincipalCaptionLbl: label 'Principal';
        InterestCaptionLbl: label 'Interest';
        TotalsCaptionLbl: label 'Totals';
        Gross_PayCaptionLbl: label 'Gross Pay';
        Net_PayCaptionLbl: label 'Net Pay';
        Total_BenefitsCaptionLbl: label 'Total Benefits';
        Payment_ByCaptionLbl: label 'Payment By';
        Taxable_Pay_CaptionLbl: label 'Taxable Pay ';
        Less_Retirement_Contrib_CaptionLbl: label 'Less Retirement Contrib.';
        Net_Taxable_AmountCaptionLbl: label 'Net Taxable Amount';
        Net_Taxable_Kenya_PoundsCaptionLbl: label 'Net Taxable Kenya Pounds';
        Tax_ChargedCaptionLbl: label 'Tax Charged';
        Monthly_Personal_ReliefCaptionLbl: label 'Monthly Personal Relief';
        B_F_MPRCaptionLbl: label 'B/F MPR';
        Tax_Paid_SHS_CaptionLbl: label 'Tax Paid(SHS)';
        C_F_MPRCaptionLbl: label 'C/F MPR';
        HousingCaptionLbl: label 'Housing';
        Income_Tax_DetailsCaptionLbl: label 'Income Tax Details';

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
        AmountRemaining := TaxableAmount;
        AmountRemaining := ROUND(AmountRemaining, 0.01);
        EndTax := false;
        TaxTable.SetRange("Table Code", TaxCode);
        if TaxTable.Find('-') then begin
            repeat
                if AmountRemaining <= 0 then
                    EndTax := true
                else begin
                    if ROUND((TaxableAmount), 0.01) > TaxTable."Upper Limit" then
                        Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                    else begin
                        Tax := AmountRemaining * TaxTable.Percentage / 100;
                        TotalTax := TotalTax + Tax;
                        EndTax := true;
                    end;
                    if not EndTax then begin
                        AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                        TotalTax := TotalTax + Tax;
                    end;
                end;
            until (TaxTable.Next = 0) or EndTax = true;
        end;
        TotalTax := TotalTax;
        TotalTax := PayrollRounding(TotalTax);
        IncomeTax := -TotalTax;
        if not Employee."Pays tax" then
            IncomeTax := 0;
    end;

    procedure GetPayPeriod()
    begin
        PayPeriod.SetRange(PayPeriod."Close Pay", false);
        if PayPeriod.Find('-') then begin
            PayPeriodtext := PayPeriod.Name;
            BeginDate := PayPeriod."Starting Date";
        end;
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511125_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511125;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
