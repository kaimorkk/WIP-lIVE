//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511202_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511202) { }
//type("System.IO.Path"; System_IO_Path51511202) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193607 "New Payslipx1"
{
    RDLCLayout = './Layouts/NewPayslipx1.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("Global Dimension 1 Code") order(ascending);
            RequestFilterFields = "Pay Period Filter", "No.", "Global Dimension 1 Code";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(Addr_1__1_; Addr[1] [1])
            {
            }
            column(Addr_1__2_; Addr[1] [2])
            {
            }
            column(DeptArr_1_1_; DeptArr[1, 1])
            {
            }
            column(ArrEarnings_1_1_; ArrEarnings[1, 1])
            {
            }
            column(ArrEarnings_1_2_; ArrEarnings[1, 2])
            {
            }
            column(ArrEarnings_1_3_; ArrEarnings[1, 3])
            {
            }
            column(ArrEarningsAmt_1_1_; ArrEarningsAmt[1, 1])
            {
                //DecimalPlaces = 2 : 2;
            }
            column(ArrEarningsAmt_1_2_; ArrEarningsAmt[1, 2])
            {
                //DecimalPlaces = 2 : 2;
            }
            column(ArrEarningsAmt_1_3_; ArrEarningsAmt[1, 3])
            {
                //DecimalPlaces = 2 : 2;
            }
            column(ArrEarnings_1_4_; ArrEarnings[1, 4])
            {
            }
            column(ArrEarningsAmt_1_4_; ArrEarningsAmt[1, 4])
            {
                //DecimalPlaces = 2 : 2;
            }
            column(ArrEarnings_1_5_; ArrEarnings[1, 5])
            {
            }
            column(ArrEarningsAmt_1_5_; ArrEarningsAmt[1, 5])
            {
                //DecimalPlaces = 2 : 2;
            }
            column(ArrEarnings_1_6_; ArrEarnings[1, 6])
            {
            }
            column(ArrEarningsAmt_1_6_; ArrEarningsAmt[1, 6])
            {
            }
            column(ArrEarnings_1_7_; ArrEarnings[1, 7])
            {
            }
            column(ArrEarningsAmt_1_7_; ArrEarningsAmt[1, 7])
            {
            }
            column(ArrEarnings_1_8_; ArrEarnings[1, 8])
            {
            }
            column(ArrEarningsAmt_1_8_; ArrEarningsAmt[1, 8])
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            column(CoName; CoName)
            {
            }
            column(ArrEarningsAmt_1_9_; ArrEarningsAmt[1, 9])
            {
            }
            column(ArrEarningsAmt_1_10_; ArrEarningsAmt[1, 10])
            {
            }
            column(ArrEarningsAmt_1_11_; ArrEarningsAmt[1, 11])
            {
            }
            column(ArrEarningsAmt_1_12_; ArrEarningsAmt[1, 12])
            {
            }
            column(ArrEarningsAmt_1_13_; ArrEarningsAmt[1, 13])
            {
            }
            column(ArrEarningsAmt_1_14_; ArrEarningsAmt[1, 14])
            {
            }
            column(ArrEarningsAmt_1_15_; ArrEarningsAmt[1, 15])
            {
            }
            column(ArrEarningsAmt_1_16_; ArrEarningsAmt[1, 16])
            {
            }
            column(ArrEarnings_1_9_; ArrEarnings[1, 9])
            {
            }
            column(ArrEarnings_1_10_; ArrEarnings[1, 10])
            {
            }
            column(ArrEarnings_1_11_; ArrEarnings[1, 11])
            {
            }
            column(ArrEarnings_1_12_; ArrEarnings[1, 12])
            {
            }
            column(ArrEarnings_1_13_; ArrEarnings[1, 13])
            {
            }
            column(ArrEarnings_1_14_; ArrEarnings[1, 14])
            {
            }
            column(ArrEarnings_1_15_; ArrEarnings[1, 15])
            {
            }
            column(ArrEarnings_1_16_; ArrEarnings[1, 16])
            {
            }
            column(ArrEarningsAmt_1_17_; ArrEarningsAmt[1, 17])
            {
            }
            column(ArrEarnings_1_17_; ArrEarnings[1, 17])
            {
            }
            column(ArrEarnings_1_18_; ArrEarnings[1, 18])
            {
            }
            column(ArrEarnings_1_19_; ArrEarnings[1, 19])
            {
            }
            column(ArrEarnings_1_20_; ArrEarnings[1, 20])
            {
            }
            column(ArrEarnings_1_21_; ArrEarnings[1, 21])
            {
            }
            column(ArrEarnings_1_22_; ArrEarnings[1, 22])
            {
            }
            column(ArrEarnings_1_23_; ArrEarnings[1, 23])
            {
            }
            column(ArrEarnings_1_25_; ArrEarnings[1, 25])
            {
            }
            column(ArrEarnings_1_26_; ArrEarnings[1, 26])
            {
            }
            column(ArrEarnings_1_34_; ArrEarnings[1, 34])
            {
            }
            column(ArrEarnings_1_33_; ArrEarnings[1, 33])
            {
            }
            column(ArrEarnings_1_32_; ArrEarnings[1, 32])
            {
            }
            column(ArrEarnings_1_31_; ArrEarnings[1, 31])
            {
            }
            column(ArrEarnings_1_30_; ArrEarnings[1, 30])
            {
            }
            column(ArrEarnings_1_29_; ArrEarnings[1, 29])
            {
            }
            column(ArrEarnings_1_28_; ArrEarnings[1, 28])
            {
            }
            column(ArrEarnings_1_27_; ArrEarnings[1, 27])
            {
            }
            column(ArrEarnings_1_41_; ArrEarnings[1, 41])
            {
            }
            column(ArrEarnings_1_40_; ArrEarnings[1, 40])
            {
            }
            column(ArrEarnings_1_39_; ArrEarnings[1, 39])
            {
            }
            column(ArrEarnings_1_38_; ArrEarnings[1, 38])
            {
            }
            column(ArrEarnings_1_37_; ArrEarnings[1, 37])
            {
            }
            column(ArrEarnings_1_36_; ArrEarnings[1, 36])
            {
            }
            column(ArrEarnings_1_35_; ArrEarnings[1, 35])
            {
            }
            column(ArrEarningsAmt_1_33_; ArrEarningsAmt[1, 33])
            {
            }
            column(ArrEarningsAmt_1_32_; ArrEarningsAmt[1, 32])
            {
            }
            column(ArrEarningsAmt_1_31_; ArrEarningsAmt[1, 31])
            {
            }
            column(ArrEarningsAmt_1_30_; ArrEarningsAmt[1, 30])
            {
            }
            column(ArrEarningsAmt_1_29_; ArrEarningsAmt[1, 29])
            {
            }
            column(ArrEarningsAmt_1_28_; ArrEarningsAmt[1, 28])
            {
            }
            column(ArrEarningsAmt_1_27_; ArrEarningsAmt[1, 27])
            {
            }
            column(ArrEarningsAmt_1_26_; ArrEarningsAmt[1, 26])
            {
            }
            column(ArrEarningsAmt_1_25_; ArrEarningsAmt[1, 25])
            {
            }
            column(ArrEarningsAmt_1_24_; ArrEarningsAmt[1, 24])
            {
            }
            column(ArrEarningsAmt_1_23_; ArrEarningsAmt[1, 23])
            {
            }
            column(ArrEarningsAmt_1_22_; ArrEarningsAmt[1, 22])
            {
            }
            column(ArrEarningsAmt_1_21_; ArrEarningsAmt[1, 21])
            {
            }
            column(ArrEarningsAmt_1_20_; ArrEarningsAmt[1, 20])
            {
            }
            column(ArrEarningsAmt_1_19_; ArrEarningsAmt[1, 19])
            {
            }
            column(ArrEarningsAmt_1_18_; ArrEarningsAmt[1, 18])
            {
            }
            column(ArrEarnings_1_24_; ArrEarnings[1, 24])
            {
            }
            column(ArrEarningsAmt_1_39_; ArrEarningsAmt[1, 39])
            {
            }
            column(ArrEarningsAmt_1_38_; ArrEarningsAmt[1, 38])
            {
            }
            column(ArrEarningsAmt_1_37_; ArrEarningsAmt[1, 37])
            {
            }
            column(ArrEarningsAmt_1_36_; ArrEarningsAmt[1, 36])
            {
            }
            column(ArrEarningsAmt_1_35_; ArrEarningsAmt[1, 35])
            {
            }
            column(ArrEarningsAmt_1_34_; ArrEarningsAmt[1, 34])
            {
            }
            column(ArrEarningsAmt_1_41_; ArrEarningsAmt[1, 41])
            {
            }
            column(ArrEarningsAmt_1_40_; ArrEarningsAmt[1, 40])
            {
            }
            column(Message1; Message1)
            {
            }
            column(Message2_1_1_; Message2[1, 1])
            {
            }
            column(ArrEarnings_1_42_; ArrEarnings[1, 42])
            {
            }
            column(ArrEarnings_1_43_; ArrEarnings[1, 43])
            {
            }
            column(ArrEarnings_1_44_; ArrEarnings[1, 44])
            {
            }
            column(ArrEarnings_1_45_; ArrEarnings[1, 45])
            {
            }
            column(ArrEarnings_1_46_; ArrEarnings[1, 46])
            {
            }
            column(ArrEarnings_1_47_; ArrEarnings[1, 47])
            {
            }
            column(ArrEarnings_1_48_; ArrEarnings[1, 48])
            {
            }
            column(ArrEarnings_1_49_; ArrEarnings[1, 49])
            {
            }
            column(ArrEarnings_1_50_; ArrEarnings[1, 50])
            {
            }
            column(ArrEarnings_1_51_; ArrEarnings[1, 51])
            {
            }
            column(ArrEarnings_1_52_; ArrEarnings[1, 52])
            {
            }
            column(ArrEarnings_1_53_; ArrEarnings[1, 53])
            {
            }
            column(ArrEarnings_1_54_; ArrEarnings[1, 54])
            {
            }
            column(ArrEarnings_1_55_; ArrEarnings[1, 55])
            {
            }
            column(ArrEarningsAmt_1_42_; ArrEarningsAmt[1, 42])
            {
            }
            column(ArrEarningsAmt_1_43_; ArrEarningsAmt[1, 43])
            {
            }
            column(ArrEarningsAmt_1_44_; ArrEarningsAmt[1, 44])
            {
            }
            column(ArrEarningsAmt_1_45_; ArrEarningsAmt[1, 45])
            {
            }
            column(ArrEarningsAmt_1_46_; ArrEarningsAmt[1, 46])
            {
            }
            column(ArrEarningsAmt_1_47_; ArrEarningsAmt[1, 47])
            {
            }
            column(ArrEarningsAmt_1_48_; ArrEarningsAmt[1, 48])
            {
            }
            column(ArrEarningsAmt_1_49_; ArrEarningsAmt[1, 49])
            {
            }
            column(ArrEarningsAmt_1_50_; ArrEarningsAmt[1, 50])
            {
            }
            column(ArrEarningsAmt_1_51_; ArrEarningsAmt[1, 51])
            {
            }
            column(ArrEarningsAmt_1_52_; ArrEarningsAmt[1, 52])
            {
            }
            column(ArrEarningsAmt_1_53_; ArrEarningsAmt[1, 53])
            {
            }
            column(ArrEarningsAmt_1_54_; ArrEarningsAmt[1, 54])
            {
            }
            column(ArrEarningsAmt_1_55_; ArrEarningsAmt[1, 55])
            {
            }
            column(CoRec_Picture; CoRec.Picture)
            {
            }
            column(BalanceArray_1_1_; BalanceArray[1, 1])
            {
            }
            column(BalanceArray_1_2_; BalanceArray[1, 2])
            {
            }
            column(BalanceArray_1_3_; BalanceArray[1, 3])
            {
            }
            column(BalanceArray_1_4_; BalanceArray[1, 4])
            {
            }
            column(BalanceArray_1_5_; BalanceArray[1, 5])
            {
            }
            column(BalanceArray_1_6_; BalanceArray[1, 6])
            {
            }
            column(BalanceArray_1_7_; BalanceArray[1, 7])
            {
            }
            column(BalanceArray_1_8_; BalanceArray[1, 8])
            {
            }
            column(BalanceArray_1_9_; BalanceArray[1, 9])
            {
            }
            column(BalanceArray_1_10_; BalanceArray[1, 10])
            {
            }
            column(BalanceArray_1_11_; BalanceArray[1, 11])
            {
            }
            column(BalanceArray_1_12_; BalanceArray[1, 12])
            {
            }
            column(BalanceArray_1_13_; BalanceArray[1, 13])
            {
            }
            column(BalanceArray_1_14_; BalanceArray[1, 14])
            {
            }
            column(BalanceArray_1_15_; BalanceArray[1, 15])
            {
            }
            column(BalanceArray_1_16_; BalanceArray[1, 16])
            {
            }
            column(BalanceArray_1_17_; BalanceArray[1, 17])
            {
            }
            column(BalanceArray_1_19_; BalanceArray[1, 19])
            {
            }
            column(BalanceArray_1_18_; BalanceArray[1, 18])
            {
            }
            column(BalanceArray_1_20_; BalanceArray[1, 20])
            {
            }
            column(BalanceArray_1_22_; BalanceArray[1, 22])
            {
            }
            column(BalanceArray_1_21_; BalanceArray[1, 21])
            {
            }
            column(BalanceArray_1_23_; BalanceArray[1, 23])
            {
            }
            column(BalanceArray_1_26_; BalanceArray[1, 26])
            {
            }
            column(BalanceArray_1_25_; BalanceArray[1, 25])
            {
            }
            column(BalanceArray_1_24_; BalanceArray[1, 24])
            {
            }
            column(BalanceArray_1_28_; BalanceArray[1, 28])
            {
            }
            column(BalanceArray_1_27_; BalanceArray[1, 27])
            {
            }
            column(BalanceArray_1_30_; BalanceArray[1, 30])
            {
            }
            column(BalanceArray_1_29_; BalanceArray[1, 29])
            {
            }
            column(BalanceArray_1_32_; BalanceArray[1, 32])
            {
            }
            column(BalanceArray_1_31_; BalanceArray[1, 31])
            {
            }
            column(BalanceArray_1_34_; BalanceArray[1, 34])
            {
            }
            column(BalanceArray_1_33_; BalanceArray[1, 33])
            {
            }
            column(BalanceArray_1_36_; BalanceArray[1, 36])
            {
            }
            column(BalanceArray_1_35_; BalanceArray[1, 35])
            {
            }
            column(BalanceArray_1_38_; BalanceArray[1, 38])
            {
            }
            column(BalanceArray_1_37_; BalanceArray[1, 37])
            {
            }
            column(BalanceArray_1_40_; BalanceArray[1, 40])
            {
            }
            column(BalanceArray_1_39_; BalanceArray[1, 39])
            {
            }
            column(BalanceArray_1_41_; BalanceArray[1, 41])
            {
            }
            column(BalanceArray_1_42_; BalanceArray[1, 42])
            {
            }
            column(BalanceArray_1_43_; BalanceArray[1, 43])
            {
            }
            column(BalanceArray_1_44_; BalanceArray[1, 44])
            {
            }
            column(BalanceArray_1_46_; BalanceArray[1, 46])
            {
            }
            column(BalanceArray_1_45_; BalanceArray[1, 45])
            {
            }
            column(BalanceArray_1_48_; BalanceArray[1, 48])
            {
            }
            column(BalanceArray_1_47_; BalanceArray[1, 47])
            {
            }
            column(STRSUBSTNO__Date__1__2__TODAY_TIME_; StrSubstNo('Date %1 %2', Today, Time))
            {
            }
            column(USERID; UserId)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(EarningsCaption; EarningsCaptionLbl)
            {
            }
            column(Employee_No_Caption; Employee_No_CaptionLbl)
            {
            }
            column(Name_Caption; Name_CaptionLbl)
            {
            }
            column(Dept_Caption; Dept_CaptionLbl)
            {
            }
            column(AmountCaption; AmountCaptionLbl)
            {
            }
            column(Pay_slipCaption; Pay_slipCaptionLbl)
            {
            }
            column(EmptyStringCaption; EmptyStringCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Employee_No_; Employee."No.")
            {
            }
            trigger OnPreDataItem();
            begin
                CompRec.Get;
                Message2[1, 1] := CompRec."General Payslip Message";
                CoRec.CalcFields(Picture);
                CUser := UserId;
                if UserSetup.Get(UserId) then
                    SetRange(Employee."No.", UserSetup."Employee No.");
            end;

            trigger OnAfterGetRecord();
            begin
                Clear(Addr);
                Clear(DeptArr);
                Clear(BasicPay);
                Clear(EmpArray);
                Clear(ArrEarnings);
                Clear(ArrEarningsAmt);
                Clear(BalanceArray);
                GrossPay := 0;
                TotalDeduction := 0;
                Totalcoopshares := 0;
                Totalnssf := 0;
                NetPay := 0;
                Addr[1] [1] := Employee."No.";
                Addr[1] [2] := Employee."First Name" + ' ' + Employee."Last Name";
                // get Department Name
                DimVal.Reset;
                DimVal.SetRange(DimVal.Code, Employee."Global Dimension 1 Code");
                DimVal.SetRange("Global Dimension No.", 1);
                if DimVal.Find('-') then
                    DeptArr[1, 1] := DimVal.Name;
                // Get Basic Salary
                Earn.Reset;
                Earn.SetRange(Earn."Basic Salary Code", true);
                if Earn.Find('-') then begin
                    AssignMatrix.Reset;
                    AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                    AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                    AssignMatrix.SetRange(AssignMatrix.Code, Earn.Code);
                    AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                    /*IF AssignMatrix.FIND('-') THEN BEGIN
                     BasicPay[1,1]:=Earn.Description;
                     EmpArray[1,1]:=AssignMatrix.Amount;
                     GrossPay:=GrossPay+AssignMatrix.Amount;
                    END;*/
                end;
                i := 1;
                Earn.Reset;
                Earn.SetRange(Earn."Earning Type", Earn."earning type"::"Normal Earning");
                Earn.SetRange(Earn."Non-Cash Benefit", false);
                if Earn.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        // AssignMatrix.SETRANGE(AssignMatrix."Basic Salary Code",FALSE);
                        AssignMatrix.SetRange(Code, Earn.Code);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                ArrEarnings[1, i] := AssignMatrix.Description;
                                Evaluate(ArrEarningsAmt[1, i], Format(AssignMatrix.Amount));
                                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                                GrossPay := GrossPay + AssignMatrix.Amount;
                                i := i + 1;
                            until AssignMatrix.Next = 0;
                        end;
                    until Earn.Next = 0;
                end;
                ArrEarnings[1, i] := 'GROSS PAY';
                Evaluate(ArrEarningsAmt[1, i], Format(GrossPay));
                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '************************************************';
                i := i + 1;
                // taxation
                ArrEarnings[1, i] := 'Taxations';
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                // Non Cash Benefits
                Earn.Reset;
                Earn.SetRange(Earn."Earning Type", Earn."earning type"::"Normal Earning");
                Earn.SetRange(Earn."Non-Cash Benefit", true);
                if Earn.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix."Basic Salary Code", false);
                        AssignMatrix.SetRange(Code, Earn.Code);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                ArrEarnings[1, i] := AssignMatrix.Description;
                                Evaluate(ArrEarningsAmt[1, i], Format(AssignMatrix.Amount));
                                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                                i := i + 1;
                            until AssignMatrix.Next = 0;
                        end;
                    until Earn.Next = 0;
                end;
                // end of non cash
                AssignMatrix.Reset;
                AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                AssignMatrix.SetRange(Type, AssignMatrix.Type::Deduction);
                AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                AssignMatrix.SetRange(AssignMatrix.Paye, true);
                if AssignMatrix.Find('-') then begin
                    ArrEarnings[1, i] := 'Less Pension contribution benefit';
                    Evaluate(ArrEarningsAmt[1, i], Format(Abs(AssignMatrix."Less Pension Contribution")));
                    ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                    TaxableAmt := 0;
                    PAYE := 0;
                    TaxableAmt := AssignMatrix."Taxable amount";
                    PAYE := AssignMatrix.Amount;
                end;
                i := i + 1;
                Earn.Reset;
                Earn.SetRange(Earn."Earning Type", Earn."earning type"::"Owner Occupier");
                if Earn.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix."Basic Salary Code", false);
                        AssignMatrix.SetRange(Code, Earn.Code);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                ArrEarnings[1, i] := AssignMatrix.Description;
                                Evaluate(ArrEarningsAmt[1, i], Format(AssignMatrix.Amount));
                                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                                i := i + 1;
                            until AssignMatrix.Next = 0;
                        end;
                    until Earn.Next = 0;
                end;
                // Taxable amount
                ArrEarnings[1, i] := 'Taxable Amount';
                Evaluate(ArrEarningsAmt[1, i], Format(Abs(TaxableAmt)));
                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                i := i + 1;
                ArrEarnings[1, i] := 'Tax Charged';
                Evaluate(ArrEarningsAmt[1, i], Format(Abs(PAYE)));
                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                i := i + 1;
                // Relief
                Earn.Reset;
                Earn.SetFilter(Earn."Earning Type", '%1|%2', Earn."earning type"::"Tax Relief",
                Earn."earning type"::"Insurance Relief");
                if Earn.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix."Basic Salary Code", false);
                        AssignMatrix.SetRange(Code, Earn.Code);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                ArrEarnings[1, i] := AssignMatrix.Description;
                                Evaluate(ArrEarningsAmt[1, i], Format(Abs(AssignMatrix.Amount)));
                                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                                i := i + 1;
                            until AssignMatrix.Next = 0;
                        end;
                    until Earn.Next = 0;
                end;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                // Deductions
                ArrEarnings[1, i] := 'Deductions';
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                AssignMatrix.Reset;
                AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                AssignMatrix.SetRange(Type, AssignMatrix.Type::Deduction);
                AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                AssignMatrix.SetRange(AssignMatrix.Paye, true);
                if AssignMatrix.Find('-') then begin
                    ArrEarnings[1, i] := AssignMatrix.Description;
                    Evaluate(ArrEarningsAmt[1, i], Format(Abs(AssignMatrix.Amount)));
                    ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                    TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount);
                end;
                i := i + 1;
                Deduct.Reset;
                Deduct.SetFilter(Deduct."Calculation Method", '<>%1', Deduct."calculation method"::"% of Salary Recovery");
                if Deduct.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetFilter(Type, '%1|%2', AssignMatrix.Type::Deduction, AssignMatrix.Type::Loan);
                        AssignMatrix.SetRange(AssignMatrix.Code, Deduct.Code);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix.Paye, false);
                        // AssignMatrix.SETRANGE(AssignMatrix.Shares,FALSE);
                        // AssignMatrix.SETRANGE(AssignMatrix."Insurance Code",FALSE);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                ArrEarnings[1, i] := AssignMatrix.Description;
                                Evaluate(ArrEarningsAmt[1, i], Format(Abs(AssignMatrix.Amount)));
                                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                                TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount);
                                if Deduct.Get(AssignMatrix.Code) then begin
                                    if Deduct."Show Balance" then begin
                                        message('');
                                        // LoanBalances.Reset;
                                        // LoanBalances.SetRange(LoanBalances."Loan No", AssignMatrix."Reference No");
                                        // LoanBalances.SetRange(LoanBalances."Deduction Code", AssignMatrix.Code);
                                        // if LoanBalances.Find('-') then begin
                                        //     LoanBalances.SetRange(LoanBalances."Date filter", 0D, DateSpecified);
                                        //     LoanBalances.CalcFields(LoanBalances."Total Repayment");
                                        //     // MESSAGE('%1 Loan amount=%2',LoanBalances."Total Repayment",LoanBalances."Approved Amount");
                                        //     BalanceArray[1, i] := (LoanBalances."Approved Amount" + LoanBalances."Total Repayment");
                                    end
                                    else begin
                                        Deduct.SetRange(Deduct."Employee Filter", Employee."No.");
                                        Deduct.SetRange(Deduct."Pay Period Filter", 0D, DateSpecified);
                                        Deduct.CalcFields(Deduct."Total Amount");
                                        BalanceArray[1, i] := Abs(Deduct."Total Amount");
                                        //MESSAGE('Balance=%1',Deduct."Total Amount");
                                    end;
                                    // end;
                                end;
                                i := i + 1;
                            until AssignMatrix.Next = 0;
                        end;
                    until Deduct.Next = 0;
                end;
                Deduct.Reset;
                Deduct.SetRange(Deduct."Calculation Method", Deduct."calculation method"::"% of Salary Recovery");
                if Deduct.Find('-') then begin
                    repeat
                        LoanBalance := 0;
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", DateSpecified);
                        AssignMatrix.SetFilter(Type, '%1|%2', AssignMatrix.Type::Deduction, AssignMatrix.Type::Loan);
                        AssignMatrix.SetRange(Code, Deduct.Code);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix.Paye, false);
                        // AssignMatrix.SETRANGE(AssignMatrix.Shares,FALSE);
                        // AssignMatrix.SETRANGE(AssignMatrix."Insurance Code",FALSE);
                        if AssignMatrix.Find('-') then begin
                            //  REPEAT
                            AssignMatrix.CalcSums(Amount);
                            ArrEarnings[1, i] := AssignMatrix.Description;
                            PositivePAYEManual := 0;
                            Earn.Reset;
                            Earn.SetRange(Earn."Calculation Method", Earn."calculation method"::"% of Salary Recovery");
                            if Earn.Find('-') then begin
                                // REPEAT
                                PayDeduct.Reset;
                                PayDeduct.SetRange(PayDeduct."Payroll Period", DateSpecified);
                                PayDeduct.SetFilter(Type, '%1', PayDeduct.Type::Payment);
                                PayDeduct.SetRange(Code, Earn.Code);
                                PayDeduct.SetRange(PayDeduct."Employee No", Employee."No.");
                                PayDeduct.SetRange(PayDeduct."Manual Entry", true);
                                // AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                                if PayDeduct.Find('-') then begin
                                    repeat
                                        PositivePAYEManual := PositivePAYEManual + PayDeduct.Amount;
                                    until PayDeduct.Next = 0;
                                end;
                            end;
                            //  MESSAGE('negative paye manual=%1',AssignMatrix.Amount);
                            Evaluate(ArrEarningsAmt[1, i], Format(PayrollRounding(AssignMatrix.Amount) + PayrollRounding(PositivePAYEManual)));
                            ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                            TotalDeduction := TotalDeduction + PayrollRounding(AssignMatrix.Amount) + PayrollRounding(PositivePAYEManual);
                            // END;
                            i := i + 1;
                            //  i:=i+1;
                            //  UNTIL AssignMatrix.NEXT=0;
                        end;
                    until Deduct.Next = 0;
                end;
                //i:=i+1;
                /*AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix."Insurance Code",TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'842');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                // MESSAGE('HAPO');
                //  ArrEarnings[1,i]:=AssignMatrix.Description;
                 // EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(AssignMatrix.Amount)));
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                 // MESSAGE('%1',Totalcoopshares);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 // i:=i+1;
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1;
            IF   Totalcoopshares>0 THEN BEGIN
                   ArrEarnings[1,i]:='INSURANCES';
                  EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Totalcoopshares)));
                  ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                  Totalcoopshares:=0;
                    i:=i+1;
            END;
            //i:=i+1;
                AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'853');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                // MESSAGE('HAPO');
                //  ArrEarnings[1,i]:=AssignMatrix.Description;
                 // EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(AssignMatrix.Amount)));
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                 // MESSAGE('%1',Totalcoopshares);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 // i:=i+1;
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1;
            IF   Totalcoopshares>0 THEN BEGIN
                   ArrEarnings[1,i]:='COOP. SOCIETY SHARES';
                  EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Totalcoopshares)));
                  ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                  Totalcoopshares:=0;
                    i:=i+1;
            END;
            //i:=i+1;
                AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'854');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                // MESSAGE('HAPO');
                //  ArrEarnings[1,i]:=AssignMatrix.Description;
                 // EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(AssignMatrix.Amount)));
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                 // MESSAGE('%1',Totalcoopshares);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 // i:=i+1;
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1;
             IF   Totalcoopshares>0 THEN BEGIN
                  ArrEarnings[1,i]:='COOP. SOCIETY INVESTMENTS';
                  EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Totalcoopshares)));
                  ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                  Totalcoopshares:=0;
                  i:=i+1;
              END;
            //i:=i+1;
                AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'866');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1;
             IF   Totalcoopshares>0 THEN BEGIN
                  ArrEarnings[1,i]:='SACCO BBF/SINKING FUND';
                  EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Totalcoopshares)));
                  ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                  Totalcoopshares:=0;
            i:=i+1;
            END;
            //i:=i+1;
                AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'869');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1;
             IF   Totalcoopshares>0 THEN BEGIN
                  ArrEarnings[1,i]:='COOP. INTEREST';
                  EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Totalcoopshares)));
                  ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                  Totalcoopshares:=0;
            i:=i+1;
            END;
            //i:=i+1;
                AssignMatrix.RESET;
                AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'832');
                IF AssignMatrix.FIND('-') THEN BEGIN
                 REPEAT
                  Totalcoopshares:=Totalcoopshares+ABS(AssignMatrix.Amount);
                  TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                 UNTIL AssignMatrix.NEXT=0;
                 END;
             // i:=i+1; BKK*/
                if Totalcoopshares > 0 then begin
                    ArrEarnings[1, i] := 'SPORTS/SOCIAL WELFARE';
                    Evaluate(ArrEarningsAmt[1, i], Format(Abs(Totalcoopshares)));
                    ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                    Totalcoopshares := 0;
                    i := i + 1;
                end;
                ArrEarnings[1, i] := 'TOTAL DEDUCTIONS';
                Evaluate(ArrEarningsAmt[1, i], Format(TotalDeduction));
                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                // Net Pay
                ArrEarnings[1, i] := 'NET PAY';
                NetPay := GrossPay - TotalDeduction;
                Evaluate(ArrEarningsAmt[1, i], Format(NetPay));
                ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                //Information
                ArrEarnings[1, i] := 'Information';
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                Ded.Reset;
                Ded.SetRange(Ded."Tax deductible", true);
                Ded.SetRange(Ded."Pay Period Filter", DateSpecified);
                Ded.SetRange(Ded."Employee Filter", Employee."No.");
                Ded.SetRange(Ded."Show on Payslip Information", true);
                if Ded.Find('-') then
                    repeat
                        //MESSAGE('fOUND');
                        Ded.CalcFields(Ded."Total Amount", Ded."Total Amount Employer");
                        ArrEarnings[1, i] := Ded.Description + '(Employer)';
                        Evaluate(ArrEarningsAmt[1, i], Format(Abs(Ded."Total Amount Employer")));
                        ArrEarningsAmt[1, i] := ChckRound(ArrEarningsAmt[1, i]);
                        i := i + 1;
                    /* ArrEarnings[1,i]:=Ded.Description;
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(Ded."Total Amount")));
                     ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                     i:=i+1;*/
                    until Ded.Next = 0;
                /*
                  AssignMatrix.RESET;
                   AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Deduction);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Retirement,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   IF AssignMatrix.FIND('-') THEN BEGIN
                   REPEAT
                         ArrEarnings[1,i]:=AssignMatrix.Description;
                         //+'  (Authority)';
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(AssignMatrix."Employer Amount")));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                     i:=i+1;
                    UNTIL AssignMatrix.NEXT=0;
                   END;
                   //i:=i+1;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Deduction);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Retirement,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   AssignMatrix.SETRANGE(AssignMatrix.Description,'NSSF');
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                      Totalnssf:=Totalnssf+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                  IF  Totalnssf>0 THEN BEGIN
                    ArrEarnings[1,i]:='NSSF (YTD)';
                    EVALUATE(ArrEarningsAmt[1,i],FORMAT(Totalnssf));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                   i:=i+1;
                   Totalnssf:=0;
               END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Deduction);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Retirement,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    IF AssignMatrix.Description <> 'NSSF' THEN BEGIN
                      Totalpension:=Totalpension+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                     END;
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                  IF  Totalpension>0 THEN BEGIN
                    ArrEarnings[1,i]:='PENSIONS (YTD)';
                    EVALUATE(ArrEarningsAmt[1,i],FORMAT(Totalpension));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                   i:=i+1;
                   Totalpension:=0;
               END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Deduction);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Retirement,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                     Totalnssf:=Totalnssf+ABS(AssignMatrix."Opening Balance Company")+ABS(AssignMatrix."Employer Amount");
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                  IF  Totalnssf>0 THEN BEGIN
                    ArrEarnings[1,i]:='NSSF (YTD);
                    // AUTHORITY';
                    EVALUATE(ArrEarningsAmt[1,i],FORMAT(Totalnssf));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                   i:=i+1;
                   Totalnssf:=0;
                  END;
                   //  MESSAGE ('HAPO POA');
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Deduction);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Retirement,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    IF AssignMatrix.Description <> 'PENSION' THEN BEGIN
                     Totalpension:=Totalpension+ABS(AssignMatrix."Opening Balance Company")+ABS(AssignMatrix."Employer Amount");
                       END;
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                  IF  Totalpension>0 THEN BEGIN
                    ArrEarnings[1,i]:='PENSIONS (YTD);
                    // AUTHORITY';
                    EVALUATE(ArrEarningsAmt[1,i],FORMAT(Totalpension));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                   i:=i+1;
                   Totalpension:=0;
                  END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'853');
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    LoanBal:=LoanBal+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                   // MESSAGE('%1',LoanBal);
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                IF   LoanBal>0 THEN BEGIN
                     ArrEarnings[1,i]:='COOP. SOCIETY SHARES';
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(LoanBal)));
                     ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                    LoanBal:=0;
                     i:=i+1;
                 END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'866');
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    LoanBal:=LoanBal+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                   // MESSAGE('%1',LoanBal);
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                IF   LoanBal>0 THEN BEGIN
                     ArrEarnings[1,i]:='SACCO BBF/SINKING FUND';
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(LoanBal)));
                     ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                    LoanBal:=0;
                     i:=i+1;
                 END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'854');
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    LoanBal:=LoanBal+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                IF   LoanBal>0 THEN BEGIN
                     ArrEarnings[1,i]:='COOP. SOCIETY INVESTMENTS';
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(LoanBal)));
                     ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                    LoanBal:=0;
                     i:=i+1;
                 END;
                   AssignMatrix.RESET;
                  // AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1|%2',AssignMatrix.Type::Deduction,AssignMatrix.Type::Loan);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Shares,TRUE);
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   AssignMatrix.SETRANGE(AssignMatrix."Main Deduction Code",'869');
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                    LoanBal:=LoanBal+ABS(AssignMatrix."Opening Balance")+ABS(AssignMatrix.Amount);
                    UNTIL AssignMatrix.NEXT=0;
                    END;
                IF   LoanBal>0 THEN BEGIN
                     ArrEarnings[1,i]:='COOP. INTEREST';
                     EVALUATE(ArrEarningsAmt[1,i],FORMAT(ABS(LoanBal)));
                     ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                    LoanBal:=0;
                     i:=i+1;
                 END;
                  // i:=i+1;
                  LoanBalances.RESET;
                  LoanBalances.SETRANGE(LoanBalances."Employee No",Employee."No.");
                 // AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                  // AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                  IF LoanBalances.FIND('-') THEN BEGIN
                   REPEAT
                  ArrEarnings[1,i]:=LoanBalances.Description;
                    LoanBal:=LoanBalances."Approved Amount";//+ABS(AssignMatrix.Amount);
                   AssignMatrix.RESET;
                   //AssignMatrix.SETRANGE(AssignMatrix."Payroll Period",DateSpecified);
                   AssignMatrix.SETFILTER(Type,'%1',AssignMatrix.Type::Loan);
                   AssignMatrix.SETFILTER(AssignMatrix.Description,LoanBalances.Description);
                   AssignMatrix.SETRANGE(AssignMatrix."Employee No",Employee."No.");
                   AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                   IF AssignMatrix.FIND('-') THEN BEGIN
                    REPEAT
                     TotalRepayment:=TotalRepayment+ABS(AssignMatrix.Amount);
                     //i:=i+1;
                    UNTIL AssignMatrix.NEXT=0;
                     END;
                EVALUATE(ArrEarningsAmt[1,i],FORMAT(LoanBal-TotalRepayment));
                   ArrEarningsAmt[1,i]:=ChckRound(ArrEarningsAmt[1,i]);
                    // TotalDeduction:=TotalDeduction+ABS(AssignMatrix.Amount);
                     i:=i+1;
                     LoanBal:=0;
                     TotalRepayment:=0;
                  UNTIL LoanBalances.NEXT=0;
                    END;
               */
                // i:=i+1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                ArrEarnings[1, i] := 'Employee Details';
                // Employee details
                i := i + 1;
                ArrEarnings[1, i] := '************************************************';
                ArrEarningsAmt[1, i] := '***********************************************';
                i := i + 1;
                ArrEarnings[1, i] := 'P.I.N';
                ArrEarningsAmt[1, i] := Employee."PIN Number";
                i := i + 1;
                if EmpBank.Get("Employee's Bank", "Bank Branch") then
                    BankName := EmpBank.Name;
                ArrEarnings[1, i] := 'Employee Bank';
                ArrEarningsAmt[1, i] := BankName;
                i := i + 1;
                ArrEarnings[1, i] := 'Bank Branch';
                ArrEarningsAmt[1, i] := EmpBank."Name 2";
                i := i + 1;
                ArrEarnings[1, i] := 'NSSF No';
                ArrEarningsAmt[1, i] := Employee."Social Security No.";
                i := i + 1;
                ArrEarnings[1, i] := 'NHIF No';
                ArrEarningsAmt[1, i] := Employee."N.H.I.F No";
                i := i + 1;
                ArrEarnings[1, i] := 'Leave Balance';
                AccPeriod.Reset;
                AccPeriod.SetRange(AccPeriod."Starting Date", 0D, Today);
                AccPeriod.SetRange(AccPeriod."New Fiscal Year", true);
                if AccPeriod.Find('+') then begin
                    FiscalStart := AccPeriod."Starting Date";
                    MaturityDate := CalcDate('1Y', AccPeriod."Starting Date") - 1;
                    //   ArrEarnings[1,i]:='Leave Balance';
                    // MESSAGE('MATURITY DATE=%1',MaturityDate);
                    LeaveApplication.Reset;
                    LeaveApplication.SetRange(LeaveApplication."Employee No", Employee."No.");
                    LeaveApplication.SetRange(LeaveApplication."Maturity Date", MaturityDate);
                    LeaveApplication.SetRange(LeaveApplication.Status, LeaveApplication.Status::Released);
                    if LeaveApplication.Find('+') then
                        // BEGIN
                        ArrEarningsAmt[1, i] := Format(LeaveApplication."Leave balance");
                    //	  MESSAGE('EMPLOYEE=%1, LEAVE BALANCE=%2',Employee."No.",LeaveApplication."Leave balance");
                    //  END;
                end;
                i := i + 1;
                ArrEarnings[1, i] := '*******End of Payslip********';
                i := i + 1;
                CompRec.Get;
                ArrEarnings[1, i] := CompRec."General Payslip Message";

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        PayPeriodtext := Employee.GetFilter("Pay Period Filter");
        Evaluate(PayrollMonth, Format(PayPeriodtext));
        PayrollMonthText := Format(PayrollMonth, 1, 4);
        if PayPeriodtext = '' then
            Error('Pay period must be specified for this report');
        CoRec.Get;
        CoName := CoRec.Name;
        Evaluate(DateSpecified, Format(PayPeriodtext));
        //;
        //ReportsForNavPre;
    end;

    var
        Addr: array[10, 100] of Text[250];
        NoOfRecords: Integer;
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        i: Integer;
        AmountRemaining: Decimal;
        IncomeTax: Decimal;
        PayPeriod: Record "Payroll PeriodX1";
        PayPeriodtext: Text[30];
        BeginDate: Date;
        DateSpecified: Date;
        EndDate: Date;
        EmpBank: Record "Employee Bank AccountX1";
        BankName: Text[250];
        BasicSalary: Decimal;
        TaxableAmt: Decimal;
        RightBracket: Boolean;
        NetPay: Decimal;
        PayPeriodRec: Record "Payroll PeriodX1";
        PayDeduct: Record "Assignment Matrix-X1";
        EmpRec: Record Employee;
        EmpNo: Code[10];
        TaxableAmount: Decimal;
        PAYE: Decimal;
        ArrEarnings: array[3, 100] of Text[250];
        ArrDeductions: array[3, 100] of Text[250];
        Index: Integer;
        Index1: Integer;
        j: Integer;
        ArrEarningsAmt: array[3, 100] of Text[60];
        ArrDeductionsAmt: array[3, 100] of Decimal;
        Year: Integer;
        EmpArray: array[10, 15] of Decimal;
        HoldDate: Date;
        DenomArray: array[3, 12] of Text[50];
        NoOfUnitsArray: array[3, 12] of Integer;
        AmountArray: array[3, 12] of Decimal;
        PayModeArray: array[3] of Text[30];
        HoursArray: array[3, 60] of Decimal;
        CompRec: Record "Human Resources Setup";
        HseLimit: Decimal;
        ExcessRetirement: Decimal;
        CfMpr: Decimal;
        relief: Decimal;
        TaxCode: Code[10];
        HoursBal: Decimal;
        Pay: Record EarningsX1;
        Ded: Record DeductionsX1;
        HoursArrayD: array[3, 60] of Decimal;
        BankBranch: Text[30];
        CoName: Text[30];
        retirecontribution: Decimal;
        EarngingCount: Integer;
        DeductionCount: Integer;
        EarnAmount: Decimal;
        GrossTaxCharged: Decimal;
        DimVal: Record "Dimension Value";
        Department: Text[60];
        LowInterestBenefits: Decimal;
        SpacePos: Integer;
        NetPayLength: Integer;
        AmountText: Text[30];
        DecimalText: Text[30];
        DecimalAMT: Decimal;
        InsuranceRelief: Decimal;
        InsuranceReliefText: Text[30];
        PayrollCodeunit: Codeunit Payroll5;
        IncometaxNew: Decimal;
        NewRelief: Decimal;
        TaxablePayNew: Decimal;
        InsuranceReliefNew: Decimal;
        TaxChargedNew: Decimal;
        finalTax: Decimal;
        TotalBenefits: Decimal;
        RetireCont: Decimal;
        TotalQuarters: Decimal;
        "Employee Payroll": Record Employee;
        PayMode: Text[30];
        Intex: Integer;
        NetPay1: Decimal;
        Principal: Decimal;
        Interest: Decimal;
        Desc: Text[50];
        dedrec: Record DeductionsX1;
        RoundedNetPay: Decimal;
        diff: Decimal;
        CFWD: Decimal;
        Nssfcomptext: Text[30];
        Nssfcomp: Decimal;
        LoanDesc: Text[60];
        LoanDesc1: Text[60];
        Deduct: Record DeductionsX1;
        OriginalLoan: Decimal;
        LoanBalance: Decimal;
        Message1: Text[250];
        Message2: array[3, 1] of Text[250];
        DeptArr: array[3, 1] of Text[60];
        BasicPay: array[3, 1] of Text[250];
        InsurEARN: Decimal;
        HasInsurance: Boolean;
        RoundedAmt: Decimal;
        TerminalDues: Decimal;
        Earn: Record EarningsX1;
        AssignMatrix: Record "Assignment Matrix-X1";
        RoundingDesc: Text[60];
        BasicChecker: Decimal;
        CoRec: Record "Company Information";
        GrossPay: Decimal;
        TotalDeduction: Decimal;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        GetPaye: Codeunit Payroll5;
        PayeeTest: Decimal;
        GetGroup: Codeunit Payroll5;
        GroupCode: Code[20];
        CUser: Code[20];
        Totalcoopshares: Decimal;
        LoanBal: Decimal;
        // LoanBalances: Record "Loan Application1";
        TotalRepayment: Decimal;
        Totalnssf: Decimal;
        Totalpension: Decimal;
        Totalprovid: Decimal;
        BalanceArray: array[3, 100] of Decimal;
        UserSetup: Record "User Setup";
        EarningsCaptionLbl: label 'Earnings';
        Employee_No_CaptionLbl: label 'Employee No:';
        Name_CaptionLbl: label 'Name:';
        Dept_CaptionLbl: label 'Dept:';
        AmountCaptionLbl: label 'Amount';
        Pay_slipCaptionLbl: label 'Pay slip';
        EmptyStringCaptionLbl: label '***************************************************';
        CurrReport_PAGENOCaptionLbl: label 'Copy';
        PositivePAYEManual: Decimal;
        LeaveApplication: Record "Employee Leave Application1";
        EmpLeaves: Record "Employee Leaves1";
        FiscalStart: Date;
        MaturityDate: Date;
        AccPeriod: Record "Accounting Period";

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
    end;

    procedure GetPayPeriod()
    begin
    end;

    procedure GetTaxBracket1(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
    end;

    procedure CoinageAnalysis(var NetPay: Decimal; var ColNo: Integer)
    var
        Index: Integer;
        Intex: Integer;
    begin
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    procedure ChckRound(var AmtText: Text[30]) ChckRound: Text[30]
    var
        LenthOfText: Integer;
        DecimalPos: Integer;
        AmtWithoutDec: Text[30];
        DecimalAmt: Text[30];
        Decimalstrlen: Integer;
    begin
        LenthOfText := StrLen(AmtText);
        DecimalPos := StrPos(AmtText, '.');
        if DecimalPos = 0 then begin
            AmtWithoutDec := AmtText;
            DecimalAmt := '.00';
        end else begin
            AmtWithoutDec := CopyStr(AmtText, 1, DecimalPos - 1);
            DecimalAmt := CopyStr(AmtText, DecimalPos + 1, 2);
            Decimalstrlen := StrLen(DecimalAmt);
            if Decimalstrlen < 2 then begin
                DecimalAmt := '.' + DecimalAmt + '0';
            end else
                DecimalAmt := '.' + DecimalAmt
        end;
        ChckRound := AmtWithoutDec + DecimalAmt;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511202_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511202;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
