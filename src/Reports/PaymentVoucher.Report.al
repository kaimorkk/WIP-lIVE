//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51507700_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51507700) { }
//type("System.IO.Path"; System_IO_Path51507700) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193440 "Payment Voucher"
{
    RDLCLayout = './Layouts/PaymentVoucher.rdlc';
    DefaultLayout = RDLC;

    // dataset
    // {
    //     dataitem(Payments; Payments)
    //     {
    //         DataItemTableView = sorting(No);
    //         column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
    //                                                           //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
    //                                                           // {
    //                                                           // }
    //         column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
    //         {
    //         }
    //         column(CompInfo_Picture; CompInfo.Picture)
    //         {
    //             IncludeCaption = true;
    //         }
    //         column(CompInfo_Name; CompInfo.Name)
    //         {
    //             IncludeCaption = true;
    //         }
    //         column(CompInfo_Address; CompInfo.Address)
    //         {
    //         }
    //         column(CompInfo_PhoneNo; CompInfo."Phone No.")
    //         {
    //         }
    //         column(CompInfo_PostCode; CompInfo."Post Code")
    //         {
    //         }
    //         column(CompInfo_City; CompInfo.City)
    //         {
    //         }
    //         column(CompInfo_Country; CompInfo."Country/Region Code")
    //         {
    //         }
    //         column(NumberText1; NumberText[1])
    //         {
    //         }
    //         column(NumberText2; NumberText[2])
    //         {
    //         }
    //         column(No_Payments; Payments.No)
    //         {
    //         }
    //         column(PayMode_Payments; Payments."Pay Mode")
    //         {
    //         }
    //         column(ChequeNo_Payments; Payments."Cheque No")
    //         {
    //         }
    //         column(Date_Payments; Payments.Date)
    //         {
    //         }
    //         column(ChequeDate_Payments; Payments."Cheque Date")
    //         {
    //         }
    //         column(OnBehalfOf_Payments; Payments."On Behalf Of")
    //         {
    //         }
    //         column(AccountNo_Payments; Payments."Account No.")
    //         {
    //         }
    //         column(AccountName_Payments; Payments."Account Name")
    //         {
    //         }
    //         column(Remarks_Payments; Payments.Remarks)
    //         {
    //         }
    //         column(TransactionName_Payments; Payments."Transaction Name")
    //         {
    //         }
    //         column(PayingBankAccount_Payments; Payments."Paying Bank Account")
    //         {
    //         }
    //         column(Payee_Payments; Payments.Payee)
    //         {
    //         }
    //         column(POINVNo_Payments; Payments."PO/INV No")
    //         {
    //         }
    //         column(BankAccountNo_Payments; Payments."Bank Account No")
    //         {
    //         }
    //         column(BankName_Payments; Payments."Bank Name")
    //         {
    //         }
    //         column(VendorNo_Payments; Payments."Vendor No")
    //         {
    //         }
    //         column(TotalAmount_Payments; Payments."Total Amount")
    //         {
    //         }
    //         column(VATAmount_Payments; Payments."VAT Amount")
    //         {
    //         }
    //         column(WithholdingTaxAmount_Payments; Payments."Withholding Tax Amount")
    //         {
    //         }
    //         column(AccountNumber; AccountNumber)
    //         {
    //         }
    //         column(AccountName; AccountName)
    //         {
    //         }
    //         column(VatAmount; VatAmount)
    //         {
    //         }
    //         column(WhTAmount; WhTAmount)
    //         {
    //         }
    //         column(V1stapprover_; "1stapprover")
    //         {
    //         }
    //         column(V2ndapprover_; "2ndapprover")
    //         {
    //         }
    //         column(UserRecApp2_Picture; UserRecApp2.Picture)
    //         {
    //         }
    //         column(UserRecApp1_Picture; UserRecApp1.Picture)
    //         {
    //         }
    //         column(UserRecApp3_Picture; UserRecApp3.Picture)
    //         {
    //         }
    //         column(V3rdapprover_; "3rdapprover")
    //         {
    //         }
    //         column(V3rdapproverdate_; "3rdapproverdate")
    //         {
    //         }
    //         column(V2ndapproverdate_; "2ndapproverdate")
    //         {
    //         }
    //         column(V1stapproverdate_; "1stapproverdate")
    //         {
    //         }
    //         column(PREPARED_BYCaption; PREPARED_BYCaptionLbl)
    //         {
    //         }
    //         column(RECEIVED__BY_Caption; RECEIVED__BY_CaptionLbl)
    //         {
    //         }
    //         column(SIGNATURECaption; SIGNATURECaptionLbl)
    //         {
    //         }
    //         column(SIGNATURECaption_Control1000000032; SIGNATURECaption_Control1000000032Lbl)
    //         {
    //         }
    //         column(DATE__________________________________________________Caption; DATE__________________________________________________CaptionLbl)
    //         {
    //         }
    //         column(DATE__________________________________________________Caption_Control1000000036; DATE__________________________________________________Caption_Control1000000036Lbl)
    //         {
    //         }
    //         column(APPROVED_BY_Caption; APPROVED_BY_CaptionLbl)
    //         {
    //         }
    //         column(SIGNATURE_Caption; SIGNATURE_CaptionLbl)
    //         {
    //         }
    //         column(DATE__________________________________________________Caption_Control1000000040; DATE__________________________________________________Caption_Control1000000040Lbl)
    //         {
    //         }
    //         column(DATE__________________________________________________Caption15; DATE__________________________________________________Caption15Lbl)
    //         {
    //         }
    //         trigger OnAfterGetRecord();
    //         begin
    // 			/*
    // 			IF Payments1.Currency<>'' THEN
    // 			CurrencyCodeText:=Payments1.Currency
    // 			ELSE
    // 			CurrencyCodeText:=GLsetup."LCY Code";
    // 			Banks.RESET;
    // 			Banks.SETRANGE(Banks."No.",Payments1."Bank Account");
    // 			IF Banks.FIND('-') THEN BEGIN
    // 			BankName:=Banks.Name;
    // 			END
    // 			ELSE BEGIN
    // 			BankName:='';
    // 			END;
    // 			IF Payments1."Original Document"=Payments1."Original Document"::"0" THEN BEGIN
    // 			ApprovalEntries.RESET;
    // 			ApprovalEntries.SETRANGE(ApprovalEntries."Table ID",51508015);
    // 			ApprovalEntries.SETRANGE(ApprovalEntries."Document No.",Payments1.No);
    // 			//ApprovalEntries.SETRANGE(ApprovalEntries."Document Type",Payments1."Payment Type");
    // 			ApprovalEntries.SETRANGE(ApprovalEntries.Status,ApprovalEntries.Status::Approved);
    // 			IF ApprovalEntries.FINDFIRST THEN BEGIN
    // 			i:=0;
    // 			REPEAT
    // 			i:=i+1;
    // 			IF i=1 THEN BEGIN
    // 			"1stapprover":=ApprovalEntries."Sender ID";
    // 			"1stapproverdate":=ApprovalEntries."Date-Time Sent for Approval";
    // 			 IF UserRecApp1.GET("1stapprover") THEN
    // 				UserRecApp1.CALCFIELDS(UserRecApp1.Picture);
    // 			END;
    // 			IF i=2 THEN BEGIN
    // 			DimensionRec.SETRANGE(DimensionRec.AIE,TRUE);
    // 			 IF DimensionRec.FINDFIRST THEN BEGIN
    // 			   //Check which dimension value is for budget
    // 				 Payments1.TESTFIELD("Global Dimension 1 Code");
    // 				 IF DimensionValueRec.GET(DimensionRec.Code,Payments1."Global Dimension 1 Code") THEN BEGIN
    // 					DimensionValueRec.TESTFIELD("AIE Holder");
    // 					AIEHolder:=DimensionValueRec."AIE Holder";
    // 				 END
    // 			  ELSE BEGIN
    // 			  Payments1.TESTFIELD("Global Dimension 2 Code");
    // 			  IF DimensionValueRec.GET(DimensionRec.Code,Payments1."Global Dimension 2 Code") THEN BEGIN
    // 				 DimensionValueRec.TESTFIELD("AIE Holder");
    // 				 AIEHolder:=DimensionValueRec."AIE Holder";
    // 			  END;
    // 			  {ELSE
    // 			  ERROR(Text131);}
    // 			  END;
    // 			  END;
    // 			  {ELSE
    // 			  ERROR(Text132);}
    // 			  IF UserSetup.GET(AIEHolder) THEN BEGIN
    // 			  IF NOT UserSetup."Unlimited Purchase Approval" THEN BEGIN
    // 			  "2ndapprover":=ApprovalEntries."Approver ID";
    // 			  "2ndapproverdate":=ApprovalEntries."Last Date-Time Modified";
    // 			   IF UserRecApp2.GET("2ndapprover") THEN
    // 			   UserRecApp2.CALCFIELDS(UserRecApp2.Picture);
    // 			  END ELSE BEGIN
    // 			  "3rdapprover":=ApprovalEntries."Approver ID";
    // 			  "3rdapproverdate":=ApprovalEntries."Last Date-Time Modified";
    // 			   IF UserRecApp3.GET("3rdapprover") THEN
    // 			   UserRecApp3.CALCFIELDS(UserRecApp3.Picture);
    // 			  END;
    // 			END;{ELSE
    // 			ERROR(Text133,AIEHolder);}
    // 			END;
    // 			IF i=3 THEN BEGIN
    // 			DimensionRec.SETRANGE(DimensionRec.AIE,TRUE);
    // 			 IF DimensionRec.FINDFIRST THEN BEGIN
    // 			   //Check which dimension value is for budget
    // 				 Payments1.TESTFIELD("Global Dimension 1 Code");
    // 				 IF DimensionValueRec.GET(DimensionRec.Code,Payments1."Global Dimension 1 Code") THEN BEGIN
    // 					DimensionValueRec.TESTFIELD("AIE Holder");
    // 					AIEHolder:=DimensionValueRec."AIE Holder";
    // 				 END
    // 			  ELSE BEGIN
    // 			  Payments1.TESTFIELD("Global Dimension 2 Code");
    // 			  IF DimensionValueRec.GET(DimensionRec.Code,Payments1."Global Dimension 2 Code") THEN BEGIN
    // 				 DimensionValueRec.TESTFIELD("AIE Holder");
    // 				 AIEHolder:=DimensionValueRec."AIE Holder";
    // 			  END;
    // 			 { ELSE
    // 			  ERROR(Text131);}
    // 			  END;
    // 			  END;
    // 			  {ELSE
    // 			  ERROR(Text132);}
    // 			  IF UserSetup.GET(AIEHolder) THEN BEGIN
    // 			  IF NOT UserSetup."Unlimited Purchase Approval" THEN BEGIN
    // 			  "3rdapprover":=ApprovalEntries."Approver ID";
    // 			  "3rdapproverdate":=ApprovalEntries."Last Date-Time Modified";
    // 			   IF UserRecApp3.GET("3rdapprover") THEN
    // 			   UserRecApp3.CALCFIELDS(UserRecApp3.Picture);
    // 			 END ELSE BEGIN
    // 			  "2ndapprover":=ApprovalEntries."Approver ID";
    // 			  "2ndapproverdate":=ApprovalEntries."Last Date-Time Modified";
    // 			   IF UserRecApp2.GET("2ndapprover") THEN
    // 			   UserRecApp2.CALCFIELDS(UserRecApp2.Picture);
    // 			 END;
    // 			END;{ ELSE
    // 			ERROR(Text133,AIEHolder);}
    // 			END;
    // 			IF i=4 THEN BEGIN
    // 			"4thapprover":=ApprovalEntries."Approver ID";
    // 			"4thapproverdate":=ApprovalEntries."Last Date-Time Modified";
    // 			 IF UserRecApp4.GET("4thapprover") THEN
    // 			 UserRecApp4.CALCFIELDS(UserRecApp4.Picture);
    // 			END;
    // 			UNTIL ApprovalEntries.NEXT=0;
    // 			END;
    // 			END ELSE IF Payments1."Original Document"=Payments1."Original Document"::Imprest THEN BEGIN
    // 			//Approvals
    // 			//*****Imprest Requisitioning*********//
    // 			ApprovalEntries.Reset;
    //             ApprovalEntries.SetRange(ApprovalEntries."Table ID", 50000);
    //             ApprovalEntries.SetRange(ApprovalEntries."Document No.", Payments1.No);
    //             ApprovalEntries.SetRange(ApprovalEntries."Document Type", Payments1."payment type"::"Imprest Requisitioning");
    //             ApprovalEntries.SetRange(ApprovalEntries.Status, ApprovalEntries.Status::Approved);
    //             if ApprovalEntries.Find('-') then begin
    //                 repeat
    //                     i := i + 1;
    //                     if i = 1 then begin
    //                         //"1stapprover":=Payments1."PV Creator ID";
    //                         //"1stapproverdate":=Payments1."PV Creation DateTime";
    //                         if UserRecApp1.Get(Payments1."PV Creator ID") then
    //                             UserRecApp1.CalcFields(UserRecApp1.Picture);
    //                     end;
    //                     if i = 2 then begin
    //                         DimensionRec.SetRange(DimensionRec.AIE, true);
    //                         if DimensionRec.FindFirst then begin
    //                             //Check which dimension value is for budget
    //                             Payments1.TestField("Global Dimension 1 Code");
    //                             if DimensionValueRec.Get(DimensionRec.Code, Payments1."Global Dimension 1 Code") then begin
    //                                 DimensionValueRec.TestField("AIE Holder");
    //                                 AIEHolder := DimensionValueRec."AIE Holder";
    //                             end
    //                             else begin
    //                                 Payments1.TestField("Global Dimension 2 Code");
    //                                 if DimensionValueRec.Get(DimensionRec.Code, Payments1."Global Dimension 2 Code") then begin
    //                                     DimensionValueRec.TestField("AIE Holder");
    //                                     AIEHolder := DimensionValueRec."AIE Holder";
    //                                 end;
    // 			  {else
    //                                 Error(Text131);
    //                             end;
    //                             "END"";"
    // 			  {"ELSE"
    //                          Error(Text132);}


    //     }
    // }
    // requestpage
    // {
    //     SaveValues = false;
    //     layout
    //     {
    //     }
    // }
    // labels
    // {
    //     PreparedByLbl = 'Prepared By:';
    //     CheckedByLbl = 'Checked By:';
    //     AuthorisedByLbl = 'Authorised By:';
    //     DateLbl = 'Date:';
    //     MailToLbl = 'Mailed To:';
    //     AddressLbl = 'Address:';
    //     TelephoneLbl = 'Telephone No:';
    //     EmailLbl = 'Email:';
    //     ReceivedByLbl = 'Received By:';
    //     IdNoLlb = 'ID No:';
    //     PaymentVoucherLbl = 'PAYMENT VOUCHER';
    //     PayeeLbl = 'PAYEE:';
    //     PurposeLbl = 'PURPOSE:';
    //     ChequeNoLbl = 'Cheque Number';
    //     VoucherNoLbl = 'Voucher Number';
    //     AmountKshLbl = 'Amount Kshs';
    //     AmountInWordsLbl = 'Amount in words:';
    //     PaymentSupportingDocsLbl = 'Payment Supporting Documents (Attached)';
    //     IFRNoLbl = 'IRF No.';
    //     QuotationsLbl = 'Quotations';
    //     TendersLbl = 'Tenders';
    //     ContractLbl = 'Contracts';
    //     CostcentresLbl = 'Cost Centres';
    //     LpoLsoLbl = 'LPO/LSO/S15/S12/S13';
    //     InvoiceAmtLbl = 'Invoiced Amount';
    //     VatLbl = 'TAX';
    //     WithheldTaxLbl = 'Withheld Tax(6% of VAT)';
    //     NetAmountLbl = 'Net Amount';
    //     PoBoxLbl = 'P.O. Box';
    //     PhysicalAddressLbl = 'National Bank Building';
    //     WhenreplyingpleasequoteLbl = 'When replying please quote:';
    // }
    // trigger OnInitReport();
    // begin
    //     //;
    //     //ReportsForNavInit;
    // end;

    // trigger OnPreReport();
    // begin
    //     //;
    //     //ReportsForNavPre;
    // end;

    // trigger OnPostReport();
    // begin
    //     //;
    //     ////ReportForNav.Post;
    // end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    //  var
    //[WithEvents]
    //ReportForNav: DotNet ForNavReport51507700_v7_3_0_2559;
    // ReportForNavOpenDesigner: Boolean;

    // ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51507700;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
