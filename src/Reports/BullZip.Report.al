//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511222_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511222) { }
//type("System.IO.Path"; System_IO_Path51511222) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193627 BullZip
{
    RDLCLayout = './Layouts/BullZip.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Customer; Customer)
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_6836; 6836) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; userid)
            {
            }
            column(Customer__No__; Customer."No.")
            {
            }
            column(Customer_Name; Customer.Name)
            {
            }
            column(CustomerCaption; CustomerCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Customer__No__Caption; FieldCaption("No."))
            {
            }
            column(Customer_NameCaption; FieldCaption(Name))
            {
            }
            trigger OnAfterGetRecord();
            begin
                /*REPORT.RUN(REPORT::ProcessAndPrintSalesInvoices,FALSE,FALSE,SalesInvHeader);
				the final code in the custom report:
				IF ISCLEAR(BullZipPDF) THEN
				CREATE(BullZipPDF);
				//
				ReportSelection.RESET;
				ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
				ReportSelection.FINDSET;
				//
				ReportID := ReportSelection."Report ID";
				FileDirectory := 'C:\Temp\';
				IF JobSetup.GET THEN
				IF JobSetup."UNC PDF Directory" <> '' THEN
				FileDirectory := JobSetup."UNC PDF Directory" + '\';
				Object.GET(Object.Type::Report,'',ReportID);
				SalesInvHeader.GET("Sales Invoice Header"."No.");
				SalesInvHeader.SETRECFILTER;
				FileName := SalesInvHeader."No." + '.pdf';
				BullZipPDF.Init;
				BullZipPDF.LoadSettings;
				RunOnceFile := BullZipPDF.GetSettingsFileName(TRUE);
				BullZipPDF.SetValue('Output',FileDirectory+FileName);
				BullZipPDF.SetValue('Showsettings', 'never');
				BullZipPDF.SetValue('ShowPDF', 'no');
				BullZipPDF.SetValue('ShowProgress', 'no');
				BullZipPDF.SetValue('ShowProgressFinished', 'no');
				BullZipPDF.SetValue('SuppressErrors', 'yes');
				BullZipPDF.SetValue('ConfirmOverwrite', 'no');
				IF SalesInvHeader.HASLINKS THEN BEGIN
				MergeFile:='';
				RecLinks.SETRANGE(RecLinks.Description,'Order: ' + SalesInvHeader."Pre-Assigned No.",
				'Order: ' + SalesInvHeader."Pre-Assigned No." + 'z');
				RecLinks.SETRANGE(Company,COMPANYNAME);
				RecLinks.FINDSET;
				REPEAT
				IF MergeFile = '' THEN
				MergeFile:='.|' + RecLinks.URL1
				ELSE
				IF COPYSTR(RecLinks.URL1,1,7) = 'file://' THEN
				MergeFile:='.|' + COPYSTR(RecLinks.URL1,8)
				ELSE
				MergeFile:='.|' + RecLinks.URL1;
				UNTIL RecLinks.NEXT = 0;
				BullZipPDF.SetValue('MergeFile', MergeFile);
				END;
				BullZipPDF.WriteSettings(TRUE);
				REPORT.RUNMODAL(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
				BullZipPDF.WriteSettings(TRUE);
				TimeOut := 0;
				WHILE EXISTS(RunOnceFile) AND (TimeOut < 10) DO BEGIN
				SLEEP(1000);
				TimeOut := TimeOut + 1;
				END;
				SalesInvHeader.ADDLINK(FileDirectory+FileName,'Sales Invoice: ' + SalesInvHeader."No.");
				CurrReport.BREAK;*/

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        CustomerCaptionLbl: label 'Customer';
        CurrReport_PAGENOCaptionLbl: label 'Page';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511222_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511222;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
