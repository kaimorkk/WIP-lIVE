//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511401_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511401) { }
//type("System.IO.Path"; System_IO_Path51511401) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193702 "Payroll Reconciliation Report"
{
    RDLCLayout = './Layouts/PayrollReconciliationReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(No_Employee; Employee."No.")
            {
            }
            column(EmployeeName; EmployeeName)
            {
            }
            column(CurrentValue; CurrentValue)
            {
            }
            column(PreviousValue; PreviousValue)
            {
            }
            column(Variance; Variance)
            {
            }
            column(PerVariance; PerVariance)
            {
            }
            column(CurrentDate; CurrentDate)
            {
            }
            column(PreviousDate; PreviousDate)
            {
            }
            column(Title; StrSubstNo('VARIANCE FOR %1, %2', CodFilter, CurrentDate))
            {
            }
            trigger OnPreDataItem();
            begin
                //EmployeeName:=Employee."First Name"+Employee."Middle Name"+Employee."Last Name";
            end;

            trigger OnAfterGetRecord();
            begin
                EmployeeName := Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                CurrentDate := Format(PeriodFilter, 0, '<month text> <year4>');
                PreviousDate := Format(CalcDate('-1M', PeriodFilter), 0, '<month text> <year4>');
                if TypeFilter = Typefilter::Payment then begin
                    Earn.Reset;
                    //Earn.SETRANGE(Code,CodFilter);
                    if Earn.Find('-') then begin
                        repeat
                            AssignMatrix.Reset;
                            AssignMatrix.SetRange(Type, TypeFilter);
                            AssignMatrix.SetRange("Employee No", "No.");
                            AssignMatrix.SetRange(AssignMatrix.Code, CodFilter);
                            AssignMatrix.SetRange("Payroll Period", PeriodFilter);
                            AssignMatrix.CalcSums(Amount);
                            CurrentValue := Abs(AssignMatrix.Amount);
                            AssignMatrixCopy.Reset;
                            AssignMatrixCopy.SetRange(Type, TypeFilter);
                            AssignMatrixCopy.SetRange("Employee No", "No.");
                            AssignMatrixCopy.SetRange(Code, CodFilter);
                            AssignMatrixCopy.SetRange("Payroll Period", CalcDate('-1M', PeriodFilter));
                            AssignMatrixCopy.CalcSums(Amount);
                            PreviousValue := Abs(AssignMatrixCopy.Amount);
                            Variance := CurrentValue - PreviousValue;
                            if Variance <> 0 then
                                if CurrentValue = 0 then
                                    PerVariance := -100 else
                                    PerVariance := ROUND((Variance / CurrentValue) * 100, 0.05);
                        until Earn.Next = 0;
                    end;
                end else begin
                    Deduct.Reset;
                    //Deduct.SETRANGE(Code,CodFilter);
                    if Deduct.Find('-') then begin
                        repeat
                            AssignMatrix.Reset;
                            AssignMatrix.SetRange(Type, TypeFilter);
                            AssignMatrix.SetRange("Employee No", "No.");
                            AssignMatrix.SetRange(AssignMatrix.Code, CodFilter);
                            AssignMatrix.SetRange("Payroll Period", PeriodFilter);
                            AssignMatrix.CalcSums(Amount);
                            CurrentValue := Abs(AssignMatrix.Amount);
                            AssignMatrixCopy.Reset;
                            AssignMatrixCopy.SetRange(Type, TypeFilter);
                            AssignMatrixCopy.SetRange("Employee No", "No.");
                            AssignMatrixCopy.SetRange(AssignMatrixCopy.Code, CodFilter);
                            AssignMatrixCopy.SetRange("Payroll Period", CalcDate('1M', PeriodFilter));
                            AssignMatrixCopy.CalcSums(Amount);
                            PreviousValue := Abs(AssignMatrixCopy.Amount);
                            Variance := CurrentValue - PreviousValue;
                            if Variance <> 0 then
                                PerVariance := ROUND((Variance / CurrentValue * 100), 0.05);
                        until Deduct.Next = 0;
                    end;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field(Period; PeriodFilter)
                {
                    ApplicationArea = Basic;

                    trigger OnLookup(var Text: Text): Boolean
                    begin
                        PayrollPeriod.Reset;
                        if Page.RunModal(51511259, PayrollPeriod) = Action::LookupOK then
                            PeriodFilter := PayrollPeriod."Starting Date";
                    end;
                }
                field(Type; TypeFilter)
                {
                    ApplicationArea = Basic;
                    OptionCaption = 'Payment,Deduction,Saving Scheme,Loan,Informational';
                }
                field("Code"; CodFilter)
                {
                    ApplicationArea = Basic;

                    trigger OnLookup(var Text: Text): Boolean
                    begin
                        if TypeFilter = Typefilter::Payment then begin
                            Earn.Reset;
                            if Page.RunModal(51511271, Earn) = Action::LookupOK then
                                CodFilter := Earn.Code;
                        end else begin
                            Deduct.Reset;
                            if Page.RunModal(51511272, Deduct) = Action::LookupOK then
                                CodFilter := Deduct.Code;
                        end;
                    end;
                }
                field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                {
                    ApplicationArea = Basic;
                    Caption = 'Design';
                    Visible = ReportForNavAllowDesign;
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        EmployeeName: Text[150];
        CurrentValue: Decimal;
        PreviousValue: Decimal;
        Earn: Record EarningsX1;
        Deduct: Record DeductionsX1;
        AssignMatrix: Record "Assignment Matrix-X1";
        Variance: Decimal;
        PerVariance: Decimal;
        TypeFilter: Option Payment,Deduction,"Saving Scheme",Loan,Informational;
        CodFilter: Code[10];
        PeriodFilter: Date;
        PayrollPeriod: Record "Payroll PeriodX1";
        AssignMatrixCopy: Record "Assignment Matrix-X1";
        PreviousDate: Text[100];
        CurrentDate: Text[100];

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511401_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511401;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
