//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511400_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511400) { }
//type("System.IO.Path"; System_IO_Path51511400) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193701 "Leave Balance 1"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/LeaveBalance1.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = where(Status = const(Active));
            RequestFilterFields = "No.", "Contract Type", Status, "Full / Part Time";
            column(No_Employee; Employee."No.")
            {
            }
            column(Name; Name)
            {
            }
            column(Balance_B_FCaptionLbl; Balance_B_FCaptionLbl)
            {
            }
            column(BalanceCaptionLbl; BalanceCaptionLbl)
            {
            }
            column(NameCaptionLbl; NameCaptionLbl)
            {
            }
            column(EntitlmentCaptionLbl; EntitlmentCaptionLbl)
            {
            }
            column(Days_TakenCaptionLbl; Days_TakenCaptionLbl)
            {
            }
            column(Days_RecalledCaptionLbl; Days_RecalledCaptionLbl)
            {
            }
            column(Days_AbsentCaptionLbl; Days_AbsentCaptionLbl)
            {
            }
            column(BalanceBF; BalanceBF)
            {
            }
            column(Entitlement; Entitlement)
            {
            }
            column(TotalRecalls; TotalRecalls)
            {
            }
            column(TotalAbsence; TotalAbsence)
            {
            }
            column(TotalTaken; TotalTaken)
            {
            }
            column(Balance; Balance)
            {
            }
            column(Picture; CompanyInfo.Picture)
            {
            }
            column(DateFilter; StrSubstNo('AS AT %1', DateFilter))
            {
            }
            trigger OnAfterGetRecord();
            begin
                Name := Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                //Balance Brought Forward;
                BalanceBF := 0;
                Entitlement := 0;
                LeaveTypes.Reset;
                LeaveTypes.SetRange(LeaveTypes."Annual Leave", true);
                if LeaveTypes.Find('-') then begin
                    if Leavefilter = LeaveTypes.Code then begin
                        EmployeePG.Reset;
                        EmployeePG.SetRange(EmployeePG."Employee Type", EmployeePG."employee type"::Parmanent);//,EmployeePG."Employee Type"::Seconded);
                        if EmployeePG.Find('-') then begin
                            //MESSAGE('pg=%1',EmployeePG.Code);
                            if Employee."Posting Group" = EmployeePG.Code then begin
                                HRSetup.Get();
                                EmployeeLeaves.Reset;
                                EmployeeLeaves.SetRange("Employee No", "No.");
                                EmployeeLeaves.SetFilter("Maturity Date", '>=%1', DateFilter);
                                EmployeeLeaves.SetRange(EmployeeLeaves."Leave Code", Leavefilter);
                                if EmployeeLeaves.Find('-') then begin
                                    BalanceBF := EmployeeLeaves."Balance Brought Forward";
                                    Entitlement := EmployeeLeaves.Entitlement;
                                    EndDate := EmployeeLeaves."Maturity Date";
                                    StartDate := CalcDate('-1Y', EmployeeLeaves."Maturity Date") + 1;
                                    // MESSAGE('StartDate=%3\EndDate=%2\Entitlement=%1',Entitlement,EndDate,StartDate);
                                end else begin
                                    AcctPeriod.Reset;
                                    AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
                                    AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
                                    if AcctPeriod.Find('-') then begin
                                        StartingDate := AcctPeriod."Starting Date";
                                        Employee.TestField("Date Of Join");
                                        // MESSAGE('MATURITY=%1\Dateof Join=%2',MaturityDateFilter,Employee."Date Of Join");
                                        if Employee."Date Of Join" <> 0D then
                                            if Employee."Date Of Join" > AcctPeriod."Starting Date" then
                                                Entitlement := ROUND(((MaturityDateFilter - Employee."Date Of Join") / 30) * HRSetup.PermMonthlyEntitlement, 0.5);
                                        EmployeeLeaves.Init;
                                        EmployeeLeaves."Leave Code" := Leavefilter;
                                        EmployeeLeaves."Employee No" := "No.";
                                        EmployeeLeaves.Entitlement := Entitlement;
                                        EmployeeLeaves."Maturity Date" := MaturityDateFilter;
                                        if not EmployeeLeaves.Get(EmployeeLeaves."Employee No", EmployeeLeaves."Leave Code", EmployeeLeaves."Maturity Date") then
                                            EmployeeLeaves.Insert;
                                    end;
                                end;
                            end;
                        end;
                        EmployeePG.Reset;
                        EmployeePG.SetRange(EmployeePG."Employee Type", EmployeePG."employee type"::Seconded);
                        if EmployeePG.Find('-') then begin
                            // MESSAGE('pg=%1',EmployeePG.Code);
                            if Employee."Posting Group" = EmployeePG.Code then begin
                                HRSetup.Get();
                                EmployeeLeaves.Reset;
                                EmployeeLeaves.SetRange("Employee No", "No.");
                                EmployeeLeaves.SetFilter("Maturity Date", '>=%1', DateFilter);
                                EmployeeLeaves.SetRange(EmployeeLeaves."Leave Code", Leavefilter);
                                if EmployeeLeaves.Find('-') then begin
                                    BalanceBF := EmployeeLeaves."Balance Brought Forward";
                                    Entitlement := EmployeeLeaves.Entitlement;
                                    EndDate := EmployeeLeaves."Maturity Date";
                                    StartDate := CalcDate('-1Y', EmployeeLeaves."Maturity Date") + 1;
                                    // MESSAGE('StartDate=%3\EndDate=%2\Entitlement=%1',Entitlement,EndDate,StartDate);
                                end else begin
                                    AcctPeriod.Reset;
                                    AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
                                    AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
                                    if AcctPeriod.Find('-') then begin
                                        StartingDate := AcctPeriod."Starting Date";
                                        Employee.TestField("Date Of Join");
                                        //  MESSAGE('MATURITY=%1\Dateof Join=%2',MaturityDateFilter,Employee."Date Of Join");
                                        if Employee."Date Of Join" <> 0D then
                                            if Employee."Date Of Join" > AcctPeriod."Starting Date" then
                                                Entitlement := ROUND(((MaturityDateFilter - Employee."Date Of Join") / 30) * HRSetup.PermMonthlyEntitlement, 0.5);
                                        EmployeeLeaves.Init;
                                        EmployeeLeaves."Leave Code" := Leavefilter;
                                        EmployeeLeaves."Employee No" := "No.";
                                        EmployeeLeaves.Entitlement := Entitlement;
                                        EmployeeLeaves."Maturity Date" := MaturityDateFilter;
                                        if not EmployeeLeaves.Get(EmployeeLeaves."Employee No", EmployeeLeaves."Leave Code", EmployeeLeaves."Maturity Date") then
                                            EmployeeLeaves.Insert;
                                    end;
                                end;
                            end;
                        end;
                        EmployeePG.Reset;
                        EmployeePG.SetRange(EmployeePG."Employee Type", EmployeePG."employee type"::"Temporary");//,EmployeePG."Employee Type"::Intern);
                        if EmployeePG.Find('-') then begin
                            if Employee."Posting Group" = EmployeePG.Code then begin
                                HRSetup.Get();
                                AcctPeriod.Reset;
                                AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
                                AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
                                if AcctPeriod.Find('-') then begin
                                    StartingDate := AcctPeriod."Starting Date";
                                    Employee.TestField("Date Of Join");
                                    //MESSAGE('MATURITY=%1\Dateof Join=%2',MaturityDateFilter,Employee."Date Of Join");
                                    if Employee."Date Of Join" > AcctPeriod."Starting Date" then
                                        Entitlement := ROUND(((DateFilter - Employee."Date Of Join") / 30) * HRSetup.TempMonthlyEntitlement, 0.5)
                                    else
                                        Entitlement := ROUND(((DateFilter - StartingDate) / 30) * HRSetup.TempMonthlyEntitlement, 0.5);
                                    //BalanceBF:=;
                                    EmployeeLeaves.Init;
                                    EmployeeLeaves."Leave Code" := Leavefilter;
                                    EmployeeLeaves."Employee No" := "No.";
                                    EmployeeLeaves.Entitlement := Entitlement;
                                    EmployeeLeaves."Maturity Date" := MaturityDateFilter;
                                    if not EmployeeLeaves.Get(EmployeeLeaves."Employee No", EmployeeLeaves."Leave Code", EmployeeLeaves."Maturity Date") then
                                        EmployeeLeaves.Insert
                                    else
                                        EmployeeLeaves.Modify;
                                end;
                            end;
                        end;
                        EmployeePG.Reset;
                        EmployeePG.SetRange(EmployeePG."Employee Type", EmployeePG."employee type"::Intern);//,EmployeePG."Employee Type"::Intern);
                        if EmployeePG.Find('-') then begin
                            if Employee."Posting Group" = EmployeePG.Code then begin
                                HRSetup.Get();
                                AcctPeriod.Reset;
                                AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
                                AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
                                if AcctPeriod.Find('-') then begin
                                    StartingDate := AcctPeriod."Starting Date";
                                    Employee.TestField("Date Of Join");
                                    //MESSAGE('MATURITY=%1\Dateof Join=%2',MaturityDateFilter,Employee."Date Of Join");
                                    if Employee."Date Of Join" > AcctPeriod."Starting Date" then
                                        Entitlement := ROUND(((DateFilter - Employee."Date Of Join") / 30) * HRSetup.InternMonthlyEntitlement, 0.5)
                                    else
                                        Entitlement := ROUND(((DateFilter - StartingDate) / 30) * HRSetup.InternMonthlyEntitlement, 0.5);
                                    //BalanceBF:=;
                                    EmployeeLeaves.Init;
                                    EmployeeLeaves."Leave Code" := Leavefilter;
                                    EmployeeLeaves."Employee No" := "No.";
                                    EmployeeLeaves.Entitlement := Entitlement;
                                    EmployeeLeaves."Maturity Date" := MaturityDateFilter;
                                    if not EmployeeLeaves.Get(EmployeeLeaves."Employee No", EmployeeLeaves."Leave Code", EmployeeLeaves."Maturity Date") then
                                        EmployeeLeaves.Insert
                                    else
                                        EmployeeLeaves.Modify;
                                end;
                            end;
                        end;
                    end;
                end;
                LeaveTypes.Reset;
                LeaveTypes.SetRange(LeaveTypes."Annual Leave", true);
                if LeaveTypes.Find('-') then begin
                    if Leavefilter <> LeaveTypes.Code then begin
                        EmployeeLeaves.Reset;
                        EmployeeLeaves.SetRange("Employee No", "No.");
                        EmployeeLeaves.SetFilter("Maturity Date", '>%1', DateFilter);
                        //EmployeeLeaves.SETRANGE(EmployeeLeaves."Leave Code",Leavefilter);
                        if EmployeeLeaves.Find('+') then begin
                            EndDate := EmployeeLeaves."Maturity Date";
                            StartDate := CalcDate('-1Y', EmployeeLeaves."Maturity Date") + 1;
                        end;
                    end;
                end;
                //message('%1, %2',Leavefilter,DateFilter);
                TotalTaken := 0;
                EmpLeaveApps.Reset;
                EmpLeaveApps.SetRange("Employee No", "No.");
                EmpLeaveApps.SetRange("Maturity Date", EndDate);
                EmpLeaveApps.SetRange(Status, EmpLeaveApps.Status::Released);
                EmpLeaveApps.SetRange("Leave Code", Leavefilter);
                EmpLeaveApps.SetFilter(EmpLeaveApps."Start Date", '<=%1', DateFilter);
                if EmpLeaveApps.Find('-') then begin
                    repeat
                        TotalTaken := TotalTaken + EmpLeaveApps."Days Applied";
                    until EmpLeaveApps.Next = 0;
                end;
                TotalRecalls := 0;
                LeaveTypes.Reset;
                LeaveTypes.SetRange(LeaveTypes."Annual Leave", true);
                if LeaveTypes.Find('-') then begin
                    if Leavefilter = LeaveTypes.Code then begin
                        Recalls.Reset;
                        Recalls.SetRange("Employee No", "No.");
                        Recalls.SetRange("Maturity Date", EndDate);
                        Recalls.SetFilter(Recalls."Recalled To", '<=%1', DateFilter);
                        Recalls.CalcSums(Recalls."No. of Off Days");
                        TotalRecalls := Recalls."No. of Off Days";
                        Absences.Reset;
                        Absences.SetRange("Employee No", "No.");
                        Absences.SetRange("Maturity Date", EndDate);
                        Absences.SetFilter(Absences."Absent To", '<=%1', DateFilter);
                        Absences.CalcSums(Absences."No. of  Days Absent");
                        TotalAbsence := Absences."No. of  Days Absent";
                        // Balance := BalanceBF + Entitlement - TotalTaken + TotalRecalls - TotalAbsence;
                    end;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                field("Date Filter"; DateFilter)
                {
                    ApplicationArea = Basic;
                }
                field(LeaveFilter; Leavefilter)
                {
                    ApplicationArea = Basic;

                    trigger OnLookup(var Text: Text): Boolean
                    begin
                        LeaveTypes.Reset;
                        if Page.RunModal(51511390, LeaveTypes) = Action::LookupOK then
                            Leavefilter := LeaveTypes.Code;
                    end;
                }
                // field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                // {
                //     ApplicationArea = Basic;
                //     Caption = 'Design';
                //     Visible = ReportForNavAllowDesign;
                // }
            }
        }

    }
    labels
    {
        // label(;;='')
        // Label = 'ANNUAL LEAVE BALANCE';
    }

    trigger OnInitReport()
    begin
        // ;ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        // ;//ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        AcctPeriod.Reset;
        AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
        AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
        if AcctPeriod.Find('+') then
            MaturityDateFilter := CalcDate('1Y', AcctPeriod."Starting Date") - 1;
        CompanyInfo.CalcFields(Picture);
        // ;ReportsForNavPre;
    end;

    var
        Emp: Record Employee;
        Name: Text[50];
        AcctPeriod: Record "Accounting Period";
        MaturityDateFilter: Date;
        CompanyInfo: Record "Company Information";
        EmpLeaveApps: Record "Employee Leave Application1";
        TotalTaken: Decimal;
        Recalls: Record "Employee Off/Holidays1";
        TotalRecalls: Decimal;
        Absences: Record "Employee Absentism1";
        TotalAbsence: Decimal;
        ANNUAL_LEAVE_BALANCE_CaptionLbl: label 'ANNUAL LEAVE BALANCE ';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Staff_No_CaptionLbl: label 'Staff No.';
        NameCaptionLbl: label 'Name';
        Balance_B_FCaptionLbl: label 'Balance B/F';
        BalanceCaptionLbl: label 'Balance';
        EntitlmentCaptionLbl: label 'Entitlment';
        Days_TakenCaptionLbl: label 'Days Taken';
        Days_RecalledCaptionLbl: label 'Days Recalled';
        Days_AbsentCaptionLbl: label 'Days Absent';
        BalanceBF: Decimal;
        Entitlement: Decimal;
        EmployeeLeaves: Record "Employee Leaves1";
        Balance: Decimal;
        DateFilter: Date;
        StartDate: Date;
        EndDate: Date;
        Leavefilter: Code[30];
        LeaveTypes: Record "Leave Types1";
        StartingDate: Date;
        EmployeePG: Record "Employee Posting GroupX1";
        HRSetup: Record "Human Resources Setup";

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    // var 
    // [WithEvents]
    // ReportForNav : DotNet ForNavReport51511400_v7_3_0_2559;
    //    ReportForNavOpenDesigner : Boolean;

    //    ReportForNavAllowDesign : Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511400;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
   // begin
        ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
        //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
