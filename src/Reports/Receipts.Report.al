//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51507701_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51507701) { }
//type("System.IO.Path"; System_IO_Path51507701) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193441 Receipts
{
    RDLCLayout = './Layouts/Receipts.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account Ledger Entry"; "Bank Account Ledger Entry")
        {
            DataItemTableView = where(Amount = filter(> 0));
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            column(Description_BankAccountLedgerEntry; "Bank Account Ledger Entry".Description)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(CompInfo_Picture; CompInfo.Picture)
            {
                IncludeCaption = true;
            }
            column(CompInfo_City; CompInfo.City)
            {
            }
            column(CompInfo_Name; CompInfo.Name)
            {
                IncludeCaption = true;
            }
            column(Receipt_Number; "Bank Account Ledger Entry"."Document No.")
            {
                IncludeCaption = true;
            }
            column(Date; "Bank Account Ledger Entry"."Posting Date")
            {
                IncludeCaption = true;
            }
            column(Description; "Bank Account Ledger Entry".Description)
            {
                IncludeCaption = true;
            }
            column(PayMode; PayMode)
            {
            }
            column(ChequeDate; ChequeDate)
            {
            }
            column(Cheque_No; "Bank Account Ledger Entry"."External Document No.")
            {
                IncludeCaption = true;
            }
            column(ReceivedFrom; ReceivedFrom)
            {
            }
            column(OnBehalfOf; OnbehalfOf)
            {
            }
            column(Remarks; "Bank Account Ledger Entry".Remarks)
            {
            }
            column(NumberText1; NumberText[1])
            {
            }
            column(NumberText2; NumberText[2])
            {
            }
            column(Amount_In_Words; StrSubstNo('%1  %2', CurrencyCodeText, Amount))
            {
            }
            column(Remarks1; "Bank Account Ledger Entry".Remarks)
            {
            }
            column(Remarks_BankAccountLedgerEntry; "Bank Account Ledger Entry".Remarks)
            {
            }
            column(AccountNo; AccNo)
            {
            }
            column(ReceiptLineDescription; ReceiptLineDescription)
            {
            }
            column(Amount_BankAccountLedgerEntry; "Bank Account Ledger Entry".Amount)
            {
            }
            column(DocumentNo_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Document No.")
            {
            }
            column(BalAccountType_BankAccountLedgerEntry; "Bank Account Ledger Entry"."Bal. Account Type")
            {
            }
            column(AccountType_Caption; AccountType)
            {
            }
            column(AccountName_Caption; AccountName)
            {
            }
            trigger OnAfterGetRecord();
            begin
                CompInfo.Get;
                CompInfo.CalcFields(Picture);
                if "Currency Code" <> '' then
                    CurrencyCodeText := "Currency Code"
                else
                    CurrencyCodeText := GLsetup."LCY Code";
                Banks.Reset;
                Banks.SetRange(Banks."No.", "Bank Account Ledger Entry"."Bank Account No.");
                if Banks.Find('-') then begin
                    BankName := Banks.Name;
                end
                else begin
                    BankName := '';
                end;
                InitTextVariable;
                FormatNoText(NumberText, Amount, CurrencyCodeText);
                //Get Description
                GLEntry.SetRange(GLEntry."Transaction No.", "Bank Account Ledger Entry"."Transaction No.");
                GLEntry.SetFilter(GLEntry."Source No.", '<>%1', "Bank Account Ledger Entry"."Bank Account No.");
                if GLEntry.FindFirst then begin
                    repeat
                        Desc := GLEntry.Description;
                    until
                    GLEntry.Next = 0;
                end;
                //get Record from receipts
                Receipt.SetRange(Receipt."No.", "Bank Account Ledger Entry"."Document No.");
                if Receipt.FindFirst then begin
                    ReceivedFrom := Receipt."Received From";
                    // Remarks := Receipt.Remarks;
                    //onbehalfof & accno
                    OnbehalfOf := Receipt."On Behalf Of";
                    PayMode := Receipt."Pay Mode";
                    ChequeDate := Receipt."Cheque Date";
                end;
                // Get the records from receipt line
                ReceiptLine1.SetRange(ReceiptLine1."Receipt No.", "Bank Account Ledger Entry"."Document No.");
                if ReceiptLine1.FindFirst then begin
                    AccNo := ReceiptLine1."Account No.";
                    ReceiptLineDescription := ReceiptLine1.Description;
                    AccountType := ReceiptLine1."Account Type";
                    AccountName := ReceiptLine1."Account Name";
                end
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    labels
    {
        CashierLbl = 'Cashier';
        StationLbl = 'Station';
        OfficialReceiptALbl = 'OFFICIAL RECEIPT';
        ShillingsLbl = 'Shillings';
        OnAccountOfLbl = 'On Account of';
        VoteHead = 'Vote Head';
        SubHeadLbl = 'Sub Head';
        ItemLbl = 'Item';
        SignatureOfOfficerLbl = 'Signature of officer receiving remitance';
        CashChequeNoLbl = 'Cash/Cheque No.';
        KshsLbl = 'Kshs';
        AccountNoLbl = 'Account No.';
        ReceivedFromLbl = 'RECEIVED FROM';
    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        DimValues: Record "Dimension Value";
        CompName: Text[100];
        TypeOfDoc: Text[100];
        RecPayTypes: Record "Imprest Lines";
        BankName: Text[100];
        Banks: Record "Bank Account";
        CompInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        OnesText: array[20] of Text[30];
        TensText: array[10] of Text[30];
        ExponentText: array[5] of Text[30];
        GLsetup: Record "General Ledger Setup";
        NumberText: array[2] of Text[80];
        CurrencyCodeText: Code[10];
        Users: Record "User Setup";
        UserName: Text[130];
        Desc: Text[70];
        GLEntry: Record "G/L Entry";
        CurrReport_PAGENOCaptionLbl: label 'Page';
        ReceiptCaptiononLbl: label 'Receipt';
        Text000: label 'Preview is not allowed.';
        TXT002: label '%1, %2 %3';
        Text001: label 'Last Check No. must be filled in.';
        Text002: label 'Filters on %1 and %2 are not allowed.';
        Text003: label 'XXXXXXXXXXXXXXXX';
        Text004: label 'must be entered.';
        Text005: label 'The Bank Account and the General Journal Line must have the same currency.';
        Text006: label 'Salesperson';
        Text007: label 'Purchaser';
        Text008: label 'Both Bank Accounts must have the same currency.';
        Text009: label 'Our Contact';
        Text010: label 'XXXXXXXXXX';
        Text011: label 'XXXX';
        Text012: label 'XX.XXXXXXXXXX.XXXX';
        Text013: label '%1 already exists.';
        Text014: label 'Check for %1 %2';
        Text015: label 'Payment';
        Text016: label 'In the Check report, One Check per Vendor and Document No.\';
        Text017: label 'must not be activated when Applies-to ID is specified in the journal lines.';
        Text018: label 'XXX';
        Text019: label 'Total';
        Text020: label 'The total amount of check %1 is %2. The amount must be positive.';
        Text021: label 'VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID';
        Text022: label 'NON-NEGOTIABLE';
        Text023: label 'Test print';
        Text024: label 'XXXX.XX';
        Text025: label 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
        Text026: label 'ZERO';
        Text027: label 'HUNDRED';
        Text028: label 'AND';
        Text029: label '%1 results in a written number that is too long.';
        Text030: label ' is already applied to %1 %2 for customer %3.';
        Text031: label ' is already applied to %1 %2 for vendor %3.';
        Text032: label 'ONE';
        Text033: label 'TWO';
        Text034: label 'THREE';
        Text035: label 'FOUR';
        Text036: label 'FIVE';
        Text037: label 'SIX';
        Text038: label 'SEVEN';
        Text039: label 'EIGHT';
        Text040: label 'NINE';
        Text041: label 'TEN';
        Text042: label 'ELEVEN';
        Text043: label 'TWELVE';
        Text044: label 'THIRTEEN';
        Text045: label 'FOURTEEN';
        Text046: label 'FIFTEEN';
        Text047: label 'SIXTEEN';
        Text048: label 'SEVENTEEN';
        Text049: label 'EIGHTEEN';
        Text050: label 'NINETEEN';
        Text051: label 'TWENTY';
        Text052: label 'THIRTY';
        Text053: label 'FORTY';
        Text054: label 'FIFTY';
        Text055: label 'SIXTY';
        Text056: label 'SEVENTY';
        Text057: label 'EIGHTY';
        Text058: label 'NINETY';
        Text059: label 'THOUSAND';
        Text060: label 'MILLION';
        Text061: label 'BILLION';
        Text062: label 'G/L Account,Customer,Vendor,Bank Account';
        Text063: label 'Net Amount %1';
        Text064: label '%1 must not be %2 for %3 %4.';
        User: Code[80];
        Receipt: Record "Receipts Header1";
        OnbehalfOf: Text;
        ReceivedFrom: Text[100];
        Remarks: Text[100];
        PayMode: Code[20];
        ChequeDate: Date;
        AccNo: Code[20];
        ReceiptLine1: Record "Receipt Lines1";
        ReceiptLineDescription: Text[50];
        AccountType: Option;
        AccountName: Text;

    procedure FormatNoText(var NoText: array[2] of Text[80]; No: Decimal; CurrencyCode: Code[10])
    var
        PrintExponent: Boolean;
        Ones: Integer;
        Tens: Integer;
        Hundreds: Integer;
        Exponent: Integer;
        NoTextIndex: Integer;
    begin
        Clear(NoText);
        NoTextIndex := 1;
        NoText[1] := '****';
        if No < 1 then
            AddToNoText(NoText, NoTextIndex, PrintExponent, Text026)
        else begin
            for Exponent := 4 downto 1 do begin
                PrintExponent := false;
                Ones := No DIV Power(1000, Exponent - 1);
                Hundreds := Ones DIV 100;
                Tens := (Ones MOD 100) DIV 10;
                Ones := Ones MOD 10;
                if Hundreds > 0 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Hundreds]);
                    AddToNoText(NoText, NoTextIndex, PrintExponent, Text027);
                end;
                if Tens >= 2 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, TensText[Tens]);
                    if Ones > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Ones]);
                end else
                    if (Tens * 10 + Ones) > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Tens * 10 + Ones]);
                if PrintExponent and (Exponent > 1) then
                    AddToNoText(NoText, NoTextIndex, PrintExponent, ExponentText[Exponent]);
                No := No - (Hundreds * 100 + Tens * 10 + Ones) * Power(1000, Exponent - 1);
            end;
        end;
        AddToNoText(NoText, NoTextIndex, PrintExponent, Text028);
        AddToNoText(NoText, NoTextIndex, PrintExponent, Format(No * 100) + '/100');
        if CurrencyCode <> '' then
            AddToNoText(NoText, NoTextIndex, PrintExponent, CurrencyCode);
    end;

    local procedure AddToNoText(var NoText: array[2] of Text[80]; var NoTextIndex: Integer; var PrintExponent: Boolean; AddText: Text[30])
    begin
        PrintExponent := true;
        while StrLen(NoText[NoTextIndex] + ' ' + AddText) > MaxStrLen(NoText[1]) do begin
            NoTextIndex := NoTextIndex + 1;
            if NoTextIndex > ArrayLen(NoText) then
                Error(Text029, AddText);
        end;
        NoText[NoTextIndex] := DelChr(NoText[NoTextIndex] + ' ' + AddText, '<');
    end;

    procedure InitTextVariable()
    begin
        OnesText[1] := Text032;
        OnesText[2] := Text033;
        OnesText[3] := Text034;
        OnesText[4] := Text035;
        OnesText[5] := Text036;
        OnesText[6] := Text037;
        OnesText[7] := Text038;
        OnesText[8] := Text039;
        OnesText[9] := Text040;
        OnesText[10] := Text041;
        OnesText[11] := Text042;
        OnesText[12] := Text043;
        OnesText[13] := Text044;
        OnesText[14] := Text045;
        OnesText[15] := Text046;
        OnesText[16] := Text047;
        OnesText[17] := Text048;
        OnesText[18] := Text049;
        OnesText[19] := Text050;
        TensText[1] := '';
        TensText[2] := Text051;
        TensText[3] := Text052;
        TensText[4] := Text053;
        TensText[5] := Text054;
        TensText[6] := Text055;
        TensText[7] := Text056;
        TensText[8] := Text057;
        TensText[9] := Text058;
        ExponentText[1] := '';
        ExponentText[2] := Text059;
        ExponentText[3] := Text060;
        ExponentText[4] := Text061;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51507701_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51507701;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
