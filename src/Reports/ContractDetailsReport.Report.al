//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511358_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511358) { }
    //type("System.IO.Path"; System_IO_Path51511358) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193668 "Contract Details Report"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/ContractDetailsReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Contract; Contract)
        {
            DataItemTableView = where(Status = const(Released), "Contract Status" = const(Ongoing));
            RequestFilterFields = "Contract No";
            column(ReportForNavId_1461; 1461) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Conveyance_Details1__Conveyance_Code_; Contract."Contract No")
            {
            }
            column(Conveyance_Details1__Conveyance_Serv__Desc__; Contract."Contract Description")
            {
            }
            column(Conveyance_Details1__Service_Provider_Name_; Contract."Service Provider Name")
            {
            }
            column(Conveyance_Details1__Contract_Start_Date_; Contract."Contract Start Date")
            {
            }
            column(Conveyance_Details1__Contract_Expiry_Date_; Contract."Contract Expiry Date")
            {
            }
            column(Conveyance_Details1__Performance_Security_Amount_; Contract."Performance Security Amount")
            {
            }
            column(BidBond; BidBond)
            {
            }
            column(TenderFees; TenderFees)
            {
            }
            column(BondExpiry; BondExpiry)
            {
            }
            column(STRSUBSTNO_Text000_TenderOpening_TenderClosing_; StrSubstNo(Text000, TenderOpening, TenderClosing))
            {
            }
            column(Contract_DetailsCaption; Contract_DetailsCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Contract_NoCaption; Contract_NoCaptionLbl)
            {
            }
            column(DescriptionCaption; DescriptionCaptionLbl)
            {
            }
            column(Conveyance_Details1__Service_Provider_Name_Caption; FieldCaption("Service Provider Name"))
            {
            }
            column(Conveyance_Details1__Contract_Start_Date_Caption; FieldCaption("Contract Start Date"))
            {
            }
            column(Conveyance_Details1__Contract_Expiry_Date_Caption; FieldCaption("Contract Expiry Date"))
            {
            }
            column(Conveyance_Details1__Performance_Security_Amount_Caption; FieldCaption("Performance Security Amount"))
            {
            }
            column(Bid_BondCaption; Bid_BondCaptionLbl)
            {
            }
            column(Tender_FeeCaption; Tender_FeeCaptionLbl)
            {
            }
            column(Bid_Bond_ExpiryCaption; Bid_Bond_ExpiryCaptionLbl)
            {
            }
            column(Tender_Validity_PeriodsCaption; Tender_Validity_PeriodsCaptionLbl)
            {
            }
            trigger OnAfterGetRecord();
            begin
                BidBondRec.Reset;
                BidBondRec.SetRange("Tender No", Contract."Tender No");
                if BidBondRec.Find('-') then begin
                    BidBondRec.CalcSums("Bid Bond");
                    BidBond := BidBondRec."Bid Bond";
                    BondExpiry := BidBondRec."Expiry Date";
                end;
                TenderFeesRec.Reset;
                TenderFeesRec.SetRange("Tender No", Contract."Tender No");
                if TenderFeesRec.Find('-') then begin
                    TenderFeesRec.CalcSums("Tender fee");
                    TenderFees := TenderFeesRec."Tender fee";
                end;
                if TenderRec.Get(Contract."Tender No") then begin
                    Evaluate(TenderOpening, Format(TenderRec."Tender Opening Date"));
                    Evaluate(TenderClosing, Format(TenderRec."Tender Closing Date"));
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        BidBond: Decimal;
        TenderFees: Decimal;
        BidBondRec: Record "Bid Bond";
        TenderFeesRec: Record "Tender Fees";
        BondExpiry: Date;
        TenderRec: Record "Procurement Request1";
        TenderOpening: Date;
        TenderClosing: Date;
        Text000: label '%1 - %2';
        Contract_DetailsCaptionLbl: label 'Contract Details';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Contract_NoCaptionLbl: label 'Contract No';
        DescriptionCaptionLbl: label 'Description';
        Bid_BondCaptionLbl: label 'Bid Bond';
        Tender_FeeCaptionLbl: label 'Tender Fee';
        Bid_Bond_ExpiryCaptionLbl: label 'Bid Bond Expiry';
        Tender_Validity_PeriodsCaptionLbl: label 'Tender Validity Periods';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511358_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511358;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
