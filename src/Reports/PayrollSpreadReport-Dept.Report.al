//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511023_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511023) { }
//type("System.IO.Path"; System_IO_Path51511023) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193461 "Payroll Spread Report-Dept"
{
    RDLCLayout = './Layouts/PayrollSpreadReport-Dept.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Dimension Value"; "Dimension Value")
        {
            DataItemTableView = sorting(Code, "Global Dimension No.") order(ascending) where("Global Dimension No." = const(1));
            column(ReportForNavId_6363; 6363) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            column(STRSUBSTNO__Total_Amount_for_this_Voucher____1__ROUND_TotalNetPay__; StrSubstNo('Total Amount for this Voucher = %1', ROUND(TotalNetPay)))
            {
            }
            column(Prepared_By______________________________________________________; 'Prepared By.....................................................')
            {
            }
            column(Approved_By_____________________________________________________; 'Approved By....................................................')
            {
            }
            column(Passed_for_Payment_By____________________________________________________; 'Passed for Payment By...................................................')
            {
            }
            column(ABS_TotalDeductions_; Abs(TotalDeductions))
            {
            }
            column(TotalBasic; TotalBasic)
            {
            }
            column(ABS_TotalTaxDeduct_; Abs(TotalTaxDeduct))
            {
            }
            column(ABS_TaxableAmount_; Abs(TaxableAmount))
            {
            }
            column(TotalNetPay; TotalNetPay)
            {
            }
            column(TotalAllowance; TotalAllowance)
            {
            }
            column(ABS_TotalTax_; Abs(TotalTax))
            {
            }
            column(ABS_TotalDeductions_TotalTax_TotalSavings_; Abs(TotalDeductions + TotalTax + TotalSavings))
            {
            }
            column(Company_Payroll_SummaryCaption; Company_Payroll_SummaryCaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(NameCaption; NameCaptionLbl)
            {
            }
            column(Basic_PayCaption; Basic_PayCaptionLbl)
            {
            }
            column(Total_AllowancesCaption; Total_AllowancesCaptionLbl)
            {
            }
            column(Retirement_ContributionCaption; Retirement_ContributionCaptionLbl)
            {
            }
            column(Taxable_IncomeCaption; Taxable_IncomeCaptionLbl)
            {
            }
            column(Income_Tax_P_A_Y_E_Caption; Income_Tax_P_A_Y_E_CaptionLbl)
            {
            }
            column(Other_DeductionsCaption; Other_DeductionsCaptionLbl)
            {
            }
            column(Net_SalaryCaption; Net_SalaryCaptionLbl)
            {
            }
            column(PageCaption; PageCaptionLbl)
            {
            }
            column(Total_DeductionsCaption; Total_DeductionsCaptionLbl)
            {
            }
            column(UserCaption; UserCaptionLbl)
            {
            }
            column(PERIODCaption; PERIODCaptionLbl)
            {
            }
            column(GRAND_TOTALCaption; GRAND_TOTALCaptionLbl)
            {
            }
            column(Dimension_Value_Dimension_Code; "Dimension Value"."Dimension Code")
            {
            }
            column(Dimension_Value_Code; "Dimension Value".Code)
            {
            }
            dataitem(Employee; Employee)
            {
                DataItemLink = "Global Dimension 1 Code" = field(Code);
                RequestFilterFields = "Pay Period Filter", "No.";
                column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
                column(COMPANYNAME_Control1000000002; COMPANYNAME)
                {
                }
                column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4_____Control1000000006; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
                {
                }
                column(FORMAT_TODAY_0_4__Control1000000013; Format(Today, 0, 4))
                {
                }
                column(USERID_Control1000000016; UserId)
                {
                }
                // column(CurrReport_PAGENO_Control1000000018; Format(//ReportForNav.PageNo))
                // {
                // }
                column(STRSUBSTNO___1____Dimension_Value__Name__; StrSubstNo('%1', ("Dimension Value".Name)))
                {
                }
                column(ABS_IncomeTax_; Abs(IncomeTax))
                {
                }
                column(ABS_TaxableAmount__Control32; Abs(TaxableAmount))
                {
                }
                column(BasicSalary; BasicSalary)
                {
                }
                column(Employee__First_Name_; Employee."First Name")
                {
                }
                column(ABS__Tax_Deductible_Amount__; Abs("Tax Deductible Amount"))
                {
                }
                column(Employee__No__; Employee."No.")
                {
                }
                column(Employee__Last_Name_; Employee."Last Name")
                {
                }
                column(Employee__Total_Allowances_; Employee."Total Allowances")
                {
                }
                column(ABS__Total_Deductions__; Abs("Total Deductions"))
                {
                }
                column(NetPay; NetPay)
                {
                }
                column(ABS_IncomeTax__Total_Deductions___Total_Savings__; Abs(IncomeTax + "Total Deductions" + "Total Savings"))
                {
                }
                column(STRSUBSTNO__TOTAL_FOR___1____Dimension_Value__Name__; StrSubstNo('TOTAL FOR  %1', ("Dimension Value".Name)))
                {
                }
                column(DeptTotBasic; DeptTotBasic)
                {
                }
                column(Employee_Employee__Total_Allowances_; Employee."Total Allowances")
                {
                }
                column(ABS_Employee__Tax_Deductible_Amount__; Abs(Employee."Tax Deductible Amount"))
                {
                }
                column(ABS_DeptTaxableIncome_; Abs(DeptTaxableIncome))
                {
                }
                column(ABS_DeptIncomeTax_; Abs(DeptIncomeTax))
                {
                }
                column(ABS_DeptTotalDeductions_; Abs(DeptTotalDeductions))
                {
                }
                column(ABS_DeptTotalDeductions_DeptIncomeTax_Employee__Total_Savings__; Abs(DeptTotalDeductions + DeptIncomeTax + Employee."Total Savings"))
                {
                }
                column(DeptNetPay; DeptNetPay)
                {
                }
                column(Prepared_By_______________________________________________________Control1000000019; 'Prepared By.....................................................')
                {
                }
                column(STRSUBSTNO__Total_Amount_for_this_Voucher____1__ROUND_TotalNetPay___Control1000000020; StrSubstNo('Total Amount for this Voucher = %1', ROUND(TotalNetPay)))
                {
                }
                column(Approved_By______________________________________________________Control1000000022; 'Approved By....................................................')
                {
                }
                column(Passed_for_Payment_By_____________________________________________________Control1000000023; 'Passed for Payment By...................................................')
                {
                }
                column(TotalBasic_Control1000000024; TotalBasic)
                {
                }
                column(ABS_TotalTaxDeduct__Control1000000025; Abs(TotalTaxDeduct))
                {
                }
                column(ABS_TotalTaxable_; Abs(TotalTaxable))
                {
                }
                column(TotalAllowance_Control1000000027; TotalAllowance)
                {
                }
                column(ABS_TotalTax__Control1000000028; Abs(TotalTax))
                {
                }
                column(ABS_TotalDeductions__Control1000000030; Abs(TotalDeductions))
                {
                }
                column(ABS_TotalDeductions_TotalTax_TotalSavings__Control1000000031; Abs(TotalDeductions + TotalTax + TotalSavings))
                {
                }
                column(TotalNetPay_Control1000000032; TotalNetPay)
                {
                }
                column(No_Caption_Control1000000000; No_Caption_Control1000000000Lbl)
                {
                }
                column(NameCaption_Control1000000001; NameCaption_Control1000000001Lbl)
                {
                }
                column(PERIODCaption_Control1000000003; PERIODCaption_Control1000000003Lbl)
                {
                }
                column(Company_Payroll_SummaryCaption_Control1000000004; Company_Payroll_SummaryCaption_Control1000000004Lbl)
                {
                }
                column(Basic_PayCaption_Control1000000005; Basic_PayCaption_Control1000000005Lbl)
                {
                }
                column(Total_AllowancesCaption_Control1000000007; Total_AllowancesCaption_Control1000000007Lbl)
                {
                }
                column(Retirement_ContributionCaption_Control1000000008; Retirement_ContributionCaption_Control1000000008Lbl)
                {
                }
                column(Taxable_IncomeCaption_Control1000000009; Taxable_IncomeCaption_Control1000000009Lbl)
                {
                }
                column(Income_Tax_P_A_Y_E_Caption_Control1000000010; Income_Tax_P_A_Y_E_Caption_Control1000000010Lbl)
                {
                }
                column(Other_DeductionsCaption_Control1000000011; Other_DeductionsCaption_Control1000000011Lbl)
                {
                }
                column(Total_DeductionsCaption_Control1000000012; Total_DeductionsCaption_Control1000000012Lbl)
                {
                }
                column(UserCaption_Control1000000014; UserCaption_Control1000000014Lbl)
                {
                }
                column(Net_SalaryCaption_Control1000000015; Net_SalaryCaption_Control1000000015Lbl)
                {
                }
                column(PageCaption_Control1000000017; PageCaption_Control1000000017Lbl)
                {
                }
                column(GRAND_TOTALCaption_Control1000000029; GRAND_TOTALCaption_Control1000000029Lbl)
                {
                }
                column(Employee_Global_Dimension_1_Code; Employee."Global Dimension 1 Code")
                {
                }
                trigger OnPreDataItem();
                begin
                    LastFieldNo := FieldNo("No.");
                    if DateSpecified = BeginDate then
                        Employee.SetRange(Employee.Status, Employee.Status::Active);
                end;

                trigger OnAfterGetRecord();
                begin
                    Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount");
                    Employee.CalcFields("Total Allowances", "Total Deductions");
                    Employee.CalcFields(Employee."Total Savings");
                    Employee.CalcFields(Employee."Cumm. Basic Pay");
                    if (Employee."Cumm. Basic Pay" = 0) and (BeginDate <> DateSpecified) then
                        CurrReport.Skip;
                    if BeginDate = DateSpecified then
                        BasicSalary := Employee.Basic
                    else
                        BasicSalary := Employee."Cumm. Basic Pay";
                    TaxableAmount := BasicSalary + Employee."Taxable Allowance";
                    if Employee."Housed by Employer" then begin
                        case Housing of
                            Housing::Ordinary:
                                Employee."Total Quarters" := 0.15 * TaxableAmount;
                            Housing::Directors:
                                Employee."Total Quarters" := 0.15 * TaxableAmount;
                            Housing::Agricultural:
                                Employee."Total Quarters" := 0.1 * TaxableAmount;
                        end;
                    end;
                    CompRec.Get;
                    HseLimit := CompRec."Housing Earned Limit";
                    if ((TaxableAmount > HseLimit) and (Employee."Total Quarters" > 0)) then begin
                        if Employee."Employer Rent" then
                            if Employee."House Rent" > Employee."Total Quarters" then
                                Employee."Total Quarters" := Employee."House Rent"
                            else
                                Employee."Total Quarters" := Employee."Total Quarters"
                        else
                            Employee."Total Quarters" := Employee."Total Quarters" - Employee."House Rent";
                    end;
                    if (BeginDate <> DateSpecified) then begin
                        Employee.SetRange("Pay Period Filter", DateSpecified);
                        Employee.CalcFields(Employee."Cumulative Quarters");
                        Employee."Total Quarters" := Employee."Cumulative Quarters";
                    end;
                    Employee."Total Quarters" := ROUND(Employee."Total Quarters", 0.01);
                    TaxableAmount := TaxableAmount + Employee."Total Quarters" + Employee."Tax Deductible Amount";
                    CompRec.Get;
                    TaxCode := CompRec."Tax Table";
                    //Checking for Pension Limit to allow for tax
                    retirecontribution := 0;
                    retirecontribution := -Employee."Retirement Contribution";
                    if Employee."Retirement Contribution" > CompRec."Pension Limit Amount" then begin
                        ExcessRetirement := retirecontribution - CompRec."Pension Limit Amount";
                        TaxableAmount := TaxableAmount + ExcessRetirement
                    end;
                    //END----Checking for pension Limit
                    TaxableAmount := ROUND(TaxableAmount, 1, '>');
                    GetTaxBracket(TaxableAmount);
                    relief := Employee."Tax Relief Amount";
                    if (Format(DateSpecified, 0, '<month>')) <> '1' then begin
                        Employee.SetRange(Employee."Pay Period Filter", CalcDate('-1M', DateSpecified));
                        Employee.CalcFields(Employee.BfMpr);
                        IncomeTax := IncomeTax + relief + Employee.BfMpr;
                        Employee.SetRange(Employee."Pay Period Filter", DateSpecified);
                    end
                    else
                        IncomeTax := IncomeTax + Employee."Tax Relief Amount";
                    if IncomeTax > 0 then begin
                        CfMpr := IncomeTax;
                        IncomeTax := 0;
                    end;
                    NetPay := BasicSalary + Employee."Total Allowances"
                    + Employee."Total Deductions" + IncomeTax + Employee."Total Savings";
                    NetPay := ROUND(NetPay, 0.01);
                    NetPay := BasicSalary + Employee."Total Allowances"
                    + Employee."Total Deductions" + IncomeTax + Employee."Total Savings";
                    TotalTaxable := TotalTaxable + TaxableAmount;
                    TotalTax := TotalTax + IncomeTax;
                    if NetPay > 0 then
                        TotalNetPay := TotalNetPay + NetPay;
                    TotalDeductions := TotalDeductions + "Total Deductions";//+IncomeTax;
                    TotalBasicDept := TotalBasicDept + Employee."Basic Pay";
                    TotalBasic := TotalBasic + BasicSalary;
                    DeptTotBasic := DeptTotBasic + BasicSalary;
                    TotalAllowance := TotalAllowance + Employee."Total Allowances";
                    TotalTaxDeduct := TotalTaxDeduct + Employee."Tax Deductible Amount";
                    TotalTaxDeductDept := TotalTaxDeductDept + Employee."Tax Deductible Amount";
                    DeptIncomeTax := DeptIncomeTax + IncomeTax;
                    DeptTotalDeductions := DeptTotalDeductions + Employee."Total Deductions";
                    DeptNetPay := DeptNetPay + NetPay;
                    DeptTaxableIncome := DeptTaxableIncome + TaxableAmount;
                    TotalSavings := TotalSavings + Employee."Total Savings";
                end;

            }
            trigger OnAfterGetRecord();
            begin
                DeptTaxableIncome := 0;
                DeptNetPay := 0;
                DeptIncomeTax := 0;
                DeptTotalDeductions := 0;
                DeptTotBasic := 0;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GetPayPeriod;
        DateSpecified := Employee.GetRangeMin(Employee."Pay Period Filter");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodText := PayPeriod.Name;
        //;
        //ReportsForNavPre;
    end;

    var
        Text001: label 'Page';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TaxableAmount: Decimal;
        IncomeTax: Decimal;
        NetPay: Decimal;
        RightBracket: Boolean;
        TotalTaxable: Decimal;
        TotalTax: Decimal;
        TotalNetPay: Decimal;
        TotalDeductions: Decimal;
        TotalBasicDept: Decimal;
        TotalTaxDept: Decimal;
        TotalNetDept: Decimal;
        TotalAllowance: Decimal;
        TotalTaxDeduct: Decimal;
        TotalTaxDeductDept: Decimal;
        DeptIncomeTax: Decimal;
        DeptTotalDeductions: Decimal;
        DeptTax: Decimal;
        DeptNetPay: Decimal;
        DeptTaxableIncome: Decimal;
        PayPeriod: Record "Payroll PeriodX1";
        PayPeriodText: Text[30];
        TotalSavings: Decimal;
        DateSpecified: Date;
        BeginDate: Date;
        BasicSalary: Decimal;
        TotalBasic: Decimal;
        DeptTotBasic: Decimal;
        CompRec: Record "Human Resources Setup";
        HseLimit: Decimal;
        ExcessRetirement: Decimal;
        relief: Decimal;
        CfMpr: Decimal;
        TaxCode: Code[10];
        GrossPay: Decimal;
        TotalBenefits: Decimal;
        RetireCont: Decimal;
        TotalQuarters: Decimal;
        TaxablePay: Decimal;
        EmpRec: Record Employee;
        retirecontribution: Decimal;
        PAYE: Decimal;
        Company_Payroll_SummaryCaptionLbl: label 'Company Payroll Summary';
        No_CaptionLbl: label 'No.';
        NameCaptionLbl: label 'Name';
        Basic_PayCaptionLbl: label 'Basic Pay';
        Total_AllowancesCaptionLbl: label 'Total Allowances';
        Retirement_ContributionCaptionLbl: label 'Retirement Contribution';
        Taxable_IncomeCaptionLbl: label 'Taxable Income';
        Income_Tax_P_A_Y_E_CaptionLbl: label 'Income Tax(P.A.Y.E)';
        Other_DeductionsCaptionLbl: label 'Other Deductions';
        Net_SalaryCaptionLbl: label 'Net Salary';
        PageCaptionLbl: label 'Page';
        Total_DeductionsCaptionLbl: label 'Total Deductions';
        UserCaptionLbl: label 'User';
        PERIODCaptionLbl: label 'PERIOD';
        GRAND_TOTALCaptionLbl: label 'GRAND TOTAL';
        No_Caption_Control1000000000Lbl: label 'No.';
        NameCaption_Control1000000001Lbl: label 'Name';
        PERIODCaption_Control1000000003Lbl: label 'PERIOD';
        Company_Payroll_SummaryCaption_Control1000000004Lbl: label 'Company Payroll Summary';
        Basic_PayCaption_Control1000000005Lbl: label 'Basic Pay';
        Total_AllowancesCaption_Control1000000007Lbl: label 'Total Allowances';
        Retirement_ContributionCaption_Control1000000008Lbl: label 'Retirement Contribution';
        Taxable_IncomeCaption_Control1000000009Lbl: label 'Taxable Income';
        Income_Tax_P_A_Y_E_Caption_Control1000000010Lbl: label 'Income Tax(P.A.Y.E)';
        Other_DeductionsCaption_Control1000000011Lbl: label 'Other Deductions';
        Total_DeductionsCaption_Control1000000012Lbl: label 'Total Deductions';
        UserCaption_Control1000000014Lbl: label 'User';
        Net_SalaryCaption_Control1000000015Lbl: label 'Net Salary';
        PageCaption_Control1000000017Lbl: label 'Page';
        GRAND_TOTALCaption_Control1000000029Lbl: label 'GRAND TOTAL';

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        AmountRemaining: Decimal;
        Endtax: Boolean;
        Tax: Decimal;
        Totaltax: Decimal;
    begin
        AmountRemaining := TaxableAmount;
        AmountRemaining := AmountRemaining;
        AmountRemaining := ROUND(AmountRemaining, 0.01);
        Endtax := false;
        TaxTable.SetRange("Table Code", TaxCode);
        if TaxTable.Find('-') then begin
            repeat
                if AmountRemaining <= 0 then
                    Endtax := true
                else begin
                    if ROUND((TaxableAmount), 0.01) > TaxTable."Upper Limit" then
                        Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                    else begin
                        Tax := AmountRemaining * TaxTable.Percentage / 100;
                        Totaltax := Totaltax + Tax;
                        Endtax := true;
                    end;
                    if not Endtax then begin
                        AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                        Totaltax := Totaltax + Tax;
                    end;
                end;
            until (TaxTable.Next = 0) or Endtax = true;
        end;
        Totaltax := Totaltax;
        Totaltax := PayrollRounding(Totaltax);
        IncomeTax := -Totaltax;
        if not Employee."Pays tax" then
            IncomeTax := 0;
    end;

    procedure GetPayPeriod()
    begin
        PayPeriod.SetRange(PayPeriod."Close Pay", false);
        if PayPeriod.Find('-') then
            PayPeriodText := PayPeriod.Name;
        BeginDate := PayPeriod."Starting Date";
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511023_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511023;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
