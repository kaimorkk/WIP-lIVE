//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511457_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511457) { }
//type("System.IO.Path"; System_IO_Path51511457) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193735 "Departmental Budget View"
{
    RDLCLayout = './Layouts/DepartmentalBudgetView.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("G/L Account"; "G/L Account")
        {
            RequestFilterFields = "No.";
            column(ReportForNavId_8; 8) { } // Autogenerated by ForNav - Do not delete
            column(GLNo; "G/L Account"."No.")
            {
            }
            column(Name; "G/L Account".Name)
            {
            }
            column(TITLEREP; TITLEREP)
            {
            }
            column(ArrDepartment_1_1_; ArrDepartment[1, 1])
            {
            }
            column(ArrDepartment_1_2_; ArrDepartment[1, 2])
            {
            }
            column(ArrDepartment_1_3_; ArrDepartment[1, 3])
            {
            }
            column(ArrDepartment_1_4_; ArrDepartment[1, 4])
            {
            }
            column(ArrDepartment_1_5_; ArrDepartment[1, 5])
            {
            }
            column(ArrDepartment_1_6_; ArrDepartment[1, 6])
            {
            }
            column(ArrDepartment_1_7_; ArrDepartment[1, 7])
            {
            }
            column(ArrDepartment_1_8_; ArrDepartment[1, 8])
            {
            }
            column(ArrDepartment_1_9_; ArrDepartment[1, 9])
            {
            }
            column(ArrDepartment_1_10_; ArrDepartment[1, 10])
            {
            }
            column(ArrDepartment_1_11_; ArrDepartment[1, 11])
            {
            }
            column(ArrDepartment_1_12_; ArrDepartment[1, 12])
            {
            }
            column(ArrDepartment_1_13_; ArrDepartment[1, 13])
            {
            }
            column(ArrDepartment_1_14_; ArrDepartment[1, 14])
            {
            }
            column(ArrDepartmentAMT_1_1_; ArrDepartmentAMT[1, 1])
            {
            }
            column(ArrDepartmentAMT_1_2_; ArrDepartmentAMT[1, 2])
            {
            }
            column(ArrDepartmentAMT_1_3_; ArrDepartmentAMT[1, 3])
            {
            }
            column(ArrDepartmentAMT_1_4_; ArrDepartmentAMT[1, 4])
            {
            }
            column(ArrDepartmentAMT_1_5_; ArrDepartmentAMT[1, 5])
            {
            }
            column(ArrDepartmentAMT_1_6_; ArrDepartmentAMT[1, 6])
            {
            }
            column(ArrDepartmentAMT_1_7_; ArrDepartmentAMT[1, 7])
            {
            }
            column(ArrDepartmentAMT_1_8_; ArrDepartmentAMT[1, 8])
            {
            }
            column(ArrDepartmentAMT_1_9_; ArrDepartmentAMT[1, 9])
            {
            }
            column(ArrDepartmentAMT_1_10_; ArrDepartmentAMT[1, 10])
            {
            }
            column(ArrDepartmentAMT_1_11_; ArrDepartmentAMT[1, 11])
            {
            }
            column(ArrDepartmentAMT_1_12_; ArrDepartmentAMT[1, 12])
            {
            }
            column(ArrDepartmentAMT_1_13_; ArrDepartmentAMT[1, 13])
            {
            }
            column(ArrDepartmentAMT_1_14_; ArrDepartmentAMT[1, 14])
            {
            }
            column(ArrSpentAMT_1_1_; ArrSpentAMT[1, 1])
            {
            }
            column(ArrSpentAMT_1_2_; ArrSpentAMT[1, 2])
            {
            }
            column(ArrSpentAMT_1_3_; ArrSpentAMT[1, 3])
            {
            }
            column(ArrSpentAMT_1_4_; ArrSpentAMT[1, 4])
            {
            }
            column(ArrSpentAMT_1_5_; ArrSpentAMT[1, 5])
            {
            }
            column(ArrSpentAMT_1_6_; ArrSpentAMT[1, 6])
            {
            }
            column(ArrSpentAMT_1_7_; ArrSpentAMT[1, 7])
            {
            }
            column(ArrSpentAMT_1_8_; ArrSpentAMT[1, 8])
            {
            }
            column(ArrSpentAMT_1_9_; ArrSpentAMT[1, 9])
            {
            }
            column(ArrSpentAMT_1_10_; ArrSpentAMT[1, 10])
            {
            }
            column(ArrSpentAMT_1_11_; ArrSpentAMT[1, 11])
            {
            }
            column(ArrSpentAMT_1_12_; ArrSpentAMT[1, 12])
            {
            }
            column(ArrSpentAMT_1_13_; ArrSpentAMT[1, 13])
            {
            }
            column(ArrSpentAMT_1_14_; ArrSpentAMT[1, 14])
            {
            }
            column(ArrCommitAMT_1_1_; ArrCommitAMT[1, 1])
            {
            }
            column(ArrCommitAMT_1_2_; ArrCommitAMT[1, 2])
            {
            }
            column(ArrCommitAMT_1_3_; ArrCommitAMT[1, 3])
            {
            }
            column(ArrCommitAMT_1_4_; ArrCommitAMT[1, 4])
            {
            }
            column(ArrCommitAMT_1_5_; ArrCommitAMT[1, 5])
            {
            }
            column(ArrCommitAMT_1_6_; ArrCommitAMT[1, 6])
            {
            }
            column(ArrCommitAMT_1_7_; ArrCommitAMT[1, 7])
            {
            }
            column(ArrCommitAMT_1_8_; ArrCommitAMT[1, 8])
            {
            }
            column(ArrCommitAMT_1_9_; ArrCommitAMT[1, 9])
            {
            }
            column(ArrCommitAMT_1_10_; ArrCommitAMT[1, 10])
            {
            }
            column(ArrCommitAMT_1_11_; ArrCommitAMT[1, 11])
            {
            }
            column(ArrCommitAMT_1_12_; ArrCommitAMT[1, 12])
            {
            }
            column(ArrCommitAMT_1_13_; ArrCommitAMT[1, 13])
            {
            }
            column(ArrCommitAMT_1_14_; ArrCommitAMT[1, 14])
            {
            }
            column(ArrBalanceAMT_1_1_; ArrBalanceAMT[1, 1])
            {
            }
            column(ArrBalanceAMT_1_2_; ArrBalanceAMT[1, 2])
            {
            }
            column(ArrBalanceAMT_1_3_; ArrBalanceAMT[1, 3])
            {
            }
            column(ArrBalanceAMT_1_4_; ArrBalanceAMT[1, 4])
            {
            }
            column(ArrBalanceAMT_1_5_; ArrBalanceAMT[1, 5])
            {
            }
            column(ArrBalanceAMT_1_6_; ArrBalanceAMT[1, 6])
            {
            }
            column(ArrBalanceAMT_1_7_; ArrBalanceAMT[1, 7])
            {
            }
            column(ArrBalanceAMT_1_8_; ArrBalanceAMT[1, 8])
            {
            }
            column(ArrBalanceAMT_1_9_; ArrBalanceAMT[1, 9])
            {
            }
            column(ArrBalanceAMT_1_10_; ArrBalanceAMT[1, 10])
            {
            }
            column(ArrBalanceAMT_1_11_; ArrBalanceAMT[1, 11])
            {
            }
            column(ArrBalanceAMT_1_12_; ArrBalanceAMT[1, 12])
            {
            }
            column(ArrBalanceAMT_1_13_; ArrBalanceAMT[1, 13])
            {
            }
            column(ArrBalanceAMT_1_14_; ArrBalanceAMT[1, 14])
            {
            }
            trigger OnPreDataItem();
            begin
                GLSetup.Get;
                FYCode := GLSetup."Current Budget";
                Startdate := GLSetup."Current Budget Start Date";
                Enddate := GLSetup."Current Budget End Date";
                if Departmentalized = false then begin
                    TITLEREP := StrSubstNo(TITLE2, GLSetup."Current Budget");
                end;
            end;

            trigger OnAfterGetRecord();
            begin
                GLAccount.Reset;
                GLAccount.SetRange("No.", '500000', '509999');
                if GLAccount.FindFirst then begin
                    repeat
                        if "G/L Account"."No." = GLAccount."No." then begin
                            CurrReport.Skip;
                        end;
                    until GLAccount.Next = 0;
                end;
                GLBudgetEntry.Reset;
                GLBudgetEntry.SetRange("G/L Account No.", "G/L Account"."No.");
                GLBudgetEntry.SetRange("Budget Name", FYCode);
                if Departmentalized = true then begin
                    GLBudgetEntry.SetRange("Global Dimension 1 Code", DP);
                end;
                if not GLBudgetEntry.FindFirst then begin
                    CurrReport.Skip;
                end;
                //============================suggesting Departments
                I := 1;
                I2 := 1;
                RowsCount := 0;
                DIMVALUE.Reset;
                DIMVALUE.SetCurrentkey(Code);
                DIMVALUE.SetFilter("Dimension Code", 'DEPARTMENT');
                if Departmentalized = true then begin
                    DIMVALUE.SetFilter(Code, DP);
                end;
                RowsCount := DIMVALUE.Count;
                if DIMVALUE.FindFirst then begin
                    repeat
                        if I <= RowsCount then begin
                            ArrDepartment[1, I] := DIMVALUE.Code;
                            ArrDepartmentAMT[1, I] := 0;
                            BudgetAmount := 0;
                            ArrSpentAMT[1, I] := 0;
                            //===================BUDGETTED AMOUNT PER DEPARTMENT=============
                            GLBudgetEntry2.Reset;
                            GLBudgetEntry2.SetFilter("Budget Name", FYCode);
                            GLBudgetEntry.SetFilter("G/L Account No.", "G/L Account"."No.");
                            GLBudgetEntry2.SetFilter("Global Dimension 1 Code", ArrDepartment[1, I]);
                            if GLBudgetEntry2.FindFirst then begin
                                repeat
                                    if GLBudgetEntry2."G/L Account No." = "G/L Account"."No." then
                                        ArrDepartmentAMT[1, I] := ArrDepartmentAMT[1, I] + GLBudgetEntry2.Amount;
                                until GLBudgetEntry2.Next = 0;
                            end;
                            //==================END================
                            //===============================AMOOUNT SPENT===
                            GLAccountG.Reset;
                            if GLAccountG.Get("G/L Account"."No.") then begin
                                // IF GLAccountG."Global GL Code"=FALSE THEN BEGIN
                                ArrSpentAMT[1, I] := 0;
                                GLEntry.Reset;
                                GLEntry.SetRange("G/L Account No.", "G/L Account"."No.");
                                GLEntry.SetRange("Posting Date", Startdate, Enddate);
                                GLEntry.SetRange("Global Dimension 1 Code", ArrDepartment[1, I]);
                                if GLEntry.FindFirst then begin
                                    repeat
                                        if GLEntry."G/L Account No." = "G/L Account"."No." then begin
                                            ArrSpentAMT[1, I] := ArrSpentAMT[1, I] + GLEntry.Amount;
                                        end;
                                    until GLEntry.Next = 0;
                                end;
                            end else begin
                                ArrSpentAMT[1, I] := 0;
                                GLEntry.Reset;
                                GLEntry.SetRange("G/L Account No.", "G/L Account"."No.");
                                GLEntry.SetRange("Posting Date", Startdate, Enddate);
                                if GLEntry.FindFirst then begin
                                    repeat
                                        if GLEntry."G/L Account No." = "G/L Account"."No." then begin
                                            ArrSpentAMT[1, I] := ArrSpentAMT[1, I] + GLEntry.Amount;
                                        end;
                                    until GLEntry.Next = 0;
                                end;
                            end;
                        end;/*
				//===================================================
				//================================COMMITED AMOUNT
				  GLAccountG.RESET;
				  IF GLAccountG.GET("G/L Account"."No.") THEN BEGIN
				  IF GLAccountG."Global GL Code"=FALSE THEN BEGIN
				  ArrCommitAMT[1,I]:=0;
				  CommitmentEntries.RESET;
				  CommitmentEntries.SETRANGE("Account No.","G/L Account"."No.");
				  CommitmentEntries.SETRANGE("Global Dimension 1 Code",ArrDepartment[1,I]);
				  CommitmentEntries.SETRANGE("Commitment Date",Startdate,Enddate);
				  IF CommitmentEntries.FINDFIRST THEN BEGIN
				  REPEAT
					IF CommitmentEntries."Account No."="G/L Account"."No." THEN
					 ArrCommitAMT[1,I]:=ArrCommitAMT[1,I]+CommitmentEntries.Amount;
					UNTIL CommitmentEntries.NEXT=0;
					END;
					END ELSE BEGIN
					ArrCommitAMT[1,I]:=0;
					CommitmentEntries.RESET;
					CommitmentEntries.SETRANGE("Account No.","G/L Account"."No.");
					CommitmentEntries.SETRANGE("Commitment Date",Startdate,Enddate);
					IF CommitmentEntries.FINDFIRST THEN BEGIN
					REPEAT
					IF CommitmentEntries."Account No."="G/L Account"."No." THEN BEGIN
					ArrCommitAMT[1,I]:=ArrCommitAMT[1,I]+CommitmentEntries.Amount;
					END;
					UNTIL CommitmentEntries.NEXT=0;
					END;
					END;
					END;
				//================================================
					ArrBalanceAMT[1,I]:=ArrDepartmentAMT[1,I]-(ArrSpentAMT[1,I]+ArrCommitAMT[1,I]);
					I:=I+1;
					END;*/
                    until DIMVALUE.Next = 0;
                end;
                //======WHILE I2<=RowsCount DO BEGIN
                //======END;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Types)
                {
                    Visible = false;
                    field("Department Code"; DepartmentCode)
                    {
                        ApplicationArea = Basic;
                        TableRelation = "Dimension Value".Code where("Dimension Code" = const('DEPARTMENT'));
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GLSetup1.Get;
        //IF GLSetup1."Finance Budget Holder"=USERID THEN BEGIN
        if DepartmentCode <> '' then begin
            DP := DepartmentCode;
            Departmentalized := true;
            DIMVALUE2.Get('DEPARTMENT', DP);
            TITLEREP := StrSubstNo(TITLE1, DIMVALUE2.Name, GLSetup."Current Budget");
            //  END;
        end;
        //;
        //ReportsForNavPre;
    end;

    var
        GLBudgetEntry: Record "G/L Budget Entry";
        DIMVALUE: Record "Dimension Value";
        DIMVALUE2: Record "Dimension Value";
        Department: Code[20];
        UserSetup: Record "User Setup";
        Committedamount: Decimal;
        ActulaSpent: Decimal;
        BudgetAmount: Decimal;
        BalanceAmount: Decimal;
        GLSetup: Record "General Ledger Setup";
        GLSetup1: Record "General Ledger Setup";
        Startdate: Date;
        Enddate: Date;
        FYCode: Code[50];
        BudgetAmountSum: Decimal;
        GLEntry: Record "G/L Entry";
        ActulaSpentSum: Decimal;
        CommitmentEntries: Record "Commitment Register";
        TotalCommittAmount: Decimal;
        GLName: Text[150];
        FY1: Code[60];
        DP: Code[20];
        GLBudgetEntry2: Record "G/L Budget Entry";
        Departmentalized: Boolean;
        DepartmentArray: Code[30];
        I: Integer;
        ArrDepartment: array[3, 100] of Text[250];
        RowsCount: Integer;
        ArrDepartmentAMT: array[3, 100] of Decimal;
        I2: Integer;
        ArrSpentAMT: array[3, 100] of Decimal;
        ArrCommitAMT: array[3, 100] of Decimal;
        ArrBalanceAMT: array[3, 100] of Decimal;
        TITLE1: label '%1 DEPARTMENT  BUDGET FOR THE FINANCIAL YEAR %2';
        TITLE2: label ' BUDGET LINE ANALYSIS PER DEPARTMENT  FOR THE FINANCIAL YEAR %1';
        TITLEREP: Text[250];
        GLAccount: Record "G/L Account";
        DepartmentCode: Code[10];
        DepartmentViewed: Boolean;
        DIMVALUES: Record "Dimension Value";
        GLAccountG: Record "G/L Account";

    procedure Departmental(FYCodes: Code[50]; DepartmentCode: Code[20])
    begin
        DP := DepartmentCode;
        FY1 := FYCodes;
        GLSetup.Get;
        if DP <> '' then begin
            Departmentalized := true;
            DIMVALUE2.Get('DEPARTMENT', DP);
            TITLEREP := StrSubstNo(TITLE1, DIMVALUE2.Name, GLSetup."Current Budget");
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511457_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511457;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
