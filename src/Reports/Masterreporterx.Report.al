//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511124_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511124) { }
//type("System.IO.Path"; System_IO_Path51511124) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193542 "Master reporterx"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/Masterreporterx.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
        {
            DataItemTableView = sorting(Type, Code);
            RequestFilterFields = "Payroll Period", Type, "Code";
            RequestFilterHeading = 'Detailed Earnings and Deductions';
            column(ReportForNavId_5751; 5751) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(USERID; UserId)
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(ReportCaption; ReportCaption)
            {
            }
            column(GroupHeader; GroupHeader)
            {
            }
            column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
            {
            }
            column(Assignment_Matrix_X1__Employee_No_; "Assignment Matrix-X1"."Employee No")
            {
            }
            column(Name; Name)
            {
            }
            column(ABS_Amount_; Abs(Amount))
            {
            }
            column(Assignment_Matrix_X1__Employer_Amount_; "Assignment Matrix-X1"."Employer Amount")
            {
            }
            column(ExternalDocNo; ExternalDocNo)
            {
            }
            column(GroupHeader______Total_; GroupHeader + '  Total')
            {
            }
            column(ABS_Amount__Control20; Abs(Amount))
            {
            }
            column(Assignment_Matrix_X1__Employer_Amount__Control1000000002; "Assignment Matrix-X1"."Employer Amount")
            {
            }
            column(Page_Caption; Page_CaptionLbl)
            {
            }
            column(PERIODCaption; PERIODCaptionLbl)
            {
            }
            column(UserCaption; UserCaptionLbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(NameCaption; NameCaptionLbl)
            {
            }
            column(AmountCaption; AmountCaptionLbl)
            {
            }
            column(Assignment_Matrix_X1__Employer_Amount_Caption; FieldCaption("Employer Amount"))
            {
            }
            column(Policy_No__Loan_No__Caption; Policy_No__Loan_No__CaptionLbl)
            {
            }
            column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
            {
            }
            column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
            {
            }
            column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo(Code);
                TotalCum := 0;

            end;

            trigger OnAfterGetRecord();
            begin
                // IF ("Assignment Matrix-X".Amount =0) AND ("Assignment Matrix-X"."Outstanding Amount" =0) THEN
                // CurrReport.SKIP;
                if Emp.Get("Employee No") then
                    Name := Emp."First Name" + ' ' + Emp."Last Name"
                else
                    Name := '';
                if "Assignment Matrix-X1".Type = "Assignment Matrix-X1".Type::Payment then begin
                    if Payment.Get("Assignment Matrix-X1".Code) then begin
                        GroupHeader := Payment.Description;
                        Payment.SetRange(Payment."Employee Filter", "Employee No");
                        Payment.CalcFields(Payment."Total Amount");
                        Cumulative := Payment."Total Amount";
                    end;
                end;
                if "Assignment Matrix-X1".Type = "Assignment Matrix-X1".Type::Deduction then begin
                    if Deduction.Get("Assignment Matrix-X1".Code) then begin
                        GroupHeader := Deduction.Description;
                        Deduction.SetRange(Deduction."Employee Filter", "Assignment Matrix-X1"."Employee No");
                        Deduction.CalcFields(Deduction."Total Amount");
                        Cumulative := Deduction."Total Amount";
                    end;
                end;
                CodeHolder := "Assignment Matrix-X1".Code;
                // LoanApp.Reset;
                // LoanApp.SetRange(LoanApp."Loan No", "Assignment Matrix-X1"."Reference No");
                // if LoanApp.Find('-') then begin
                //     repeat
                //         ExternalDocNo := LoanApp."HELB No."
                //     until LoanApp.Next = 0;
                // end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ReportCaption := '';
        TypeFilter := "Assignment Matrix-X1".GetFilter("Assignment Matrix-X1".Type);
        if TypeFilter = 'Payment' then
            ReportCaption := 'ALLOWANCES REPORT';
        if TypeFilter = 'Deduction' then
            ReportCaption := 'DEDUCTIONS REPORT';
        if TypeFilter = '' then
            ReportCaption := 'ALLOWANCES AND DEDUCTIONS';
        if TypeFilter = 'Saving Scheme' then
            ReportCaption := 'DEDUCTIONS REPORT';
        DateSpecified := "Assignment Matrix-X1".GetRangeMin("Assignment Matrix-X1"."Payroll Period");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodText := PayPeriod.Name;
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        Emp: Record Employee;
        Name: Text[50];
        Payment: Record EarningsX1;
        Deduction: Record DeductionsX1;
        TypeFilter: Text[80];
        GroupHeader: Text[80];
        PayPeriod: Record "Payroll PeriodX1";
        PayPeriodText: Text[80];
        ReportCaption: Text[80];
        DateSpecified: Date;
        PdCode: Code[10];
        Cumulative: Decimal;
        TotalCum: Decimal;
        CodeHolder: Code[10];
        GetGroup: Codeunit Payroll5;
        GroupCode: Code[20];
        CUser: Code[20];
        // LoanApp: Record "Loan Application1";
        ExternalDocNo: Text[30];
        Page_CaptionLbl: label 'Page ';
        PERIODCaptionLbl: label 'PERIOD';
        UserCaptionLbl: label 'User';
        No_CaptionLbl: label 'No.';
        NameCaptionLbl: label 'Name';
        AmountCaptionLbl: label 'Amount';
        Policy_No__Loan_No__CaptionLbl: label '"Policy No./Loan No."';

    procedure GetPayperiod()
    begin
        PayPeriod.SetRange(PayPeriod.Closed, false);
        if PayPeriod.Find('-') then
            PayPeriodText := PayPeriod.Name;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511124_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511124;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
