//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511186_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511186) { }
//type("System.IO.Path"; System_IO_Path51511186) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193591 "Payroll Recon Combined"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/PayrollReconCombined.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(EarningsX1; EarningsX1)
        {
            PrintOnlyIfDetail = true;
            RequestFilterFields = "Pay Period Filter";
            column(ReportForNavId_7169; 7169) { } // Autogenerated by ForNav - Do not delete
            column(USERID; UserId)
            {
            }
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(EarningsX1__Pay_Period_Filter_; EarningsX1."Pay Period Filter")
            {
            }
            column(EarningsX1_Description; EarningsX1.Description)
            {
            }
            column(EarningsX1_Code; EarningsX1.Code)
            {
            }
            column(EmployeeCaption; EmployeeCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Current_PeriodCaption; Current_PeriodCaptionLbl)
            {
            }
            column(Previous_PeriodCaption; Previous_PeriodCaptionLbl)
            {
            }
            column(VarianceCaption; VarianceCaptionLbl)
            {
            }
            column(PerVarianceCaption; PerVarianceLbl)
            {
            }
            column(CurrentDate; CurrentDate)
            {
            }
            column(PreviousDate; PreviousDate)
            {
            }
            column(NameCaption; NameCaptionLbl)
            {
            }
            column(Emp__NoCaption; Emp__NoCaptionLbl)
            {
            }
            dataitem(Employee; Employee)
            {
                DataItemTableView = sorting("No.");
                RequestFilterFields = "No.";
                column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
                column(EmpName; EmpName)
                {
                }
                column(Amount; Amount)
                {
                }
                column(LastMonthAmount; LastMonthAmount)
                {
                }
                column(Difference; Difference)
                {
                }
                column(PerVariance; PerVariance)
                {
                }
                column(Employee__No__; Employee."No.")
                {
                }
                trigger OnPreDataItem();
                begin
                    LastFieldNo := FieldNo("No.");
                end;

                trigger OnAfterGetRecord();
                begin
                    EmpName := Employee."First Name" + ' ' + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                    AssignMatrixCurrent.Reset;
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent."Employee No", Employee."No.");
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent.Type, AssignMatrixCurrent.Type::Payment);
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent.Code, EarningsX1.Code);
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent."Payroll Period", EarningsX1.GetRangeMin(EarningsX1."Pay Period Filter"));
                    if AssignMatrixCurrent.Find('-') then
                        Amount := AssignMatrixCurrent.Amount
                    else
                        Amount := 0;
                    AssignMatrixCurrent.Reset;
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent."Employee No", Employee."No.");
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent.Type, AssignMatrixCurrent.Type::Payment);
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent.Code, EarningsX1.Code);
                    AssignMatrixCurrent.SetRange(AssignMatrixCurrent."Payroll Period", Lastmonth);
                    if AssignMatrixCurrent.Find('-') then
                        LastMonthAmount := AssignMatrixCurrent.Amount
                    else
                        LastMonthAmount := 0;
                    // END;
                    Difference := Amount - LastMonthAmount;
                    if Difference <> 0 then
                        if Amount = 0 then
                            PerVariance := -100 else
                            PerVariance := ROUND((Difference / Amount) * 100, 0.05);
                    if Difference = 0 then
                        CurrReport.Skip;
                end;

            }
            trigger OnAfterGetRecord();
            begin
                Thismonth := EarningsX1.GetRangeMin(EarningsX1."Pay Period Filter");
                Lastmonth := CalcDate('-1M', Thismonth);
                CurrentDate := Format(Thismonth, 0, '<month text> <year4>');
                PreviousDate := Format(Lastmonth, 0, '<month text> <year4>');
            end;

        }
        dataitem(DeductionsX1; DeductionsX1)
        {
            PrintOnlyIfDetail = true;
            column(ReportForNavId_1209; 1209) { } // Autogenerated by ForNav - Do not delete
            column(DeductionsX1_Code; DeductionsX1.Code)
            {
            }
            column(DeductionsX1_Description; DeductionsX1.Description)
            {
            }
            dataitem(Emp; Employee)
            {
                column(ReportForNavId_7052; 7052) { } // Autogenerated by ForNav - Do not delete
                column(EmpName_Control1000000007; EmpName)
                {
                }
                column(Amount_Control1000000010; Amount)
                {
                }
                column(LastMonthAmount_Control1000000013; LastMonthAmount)
                {
                }
                column(Difference_Control1000000016; Difference)
                {
                }
                column(PerVarianceDed; PerVariance)
                {
                }
                column(Emp__No__; Emp."No.")
                {
                }
                trigger OnAfterGetRecord();
                begin
                    EmpName := Emp."First Name" + ' ' + ' ' + Emp."Middle Name" + ' ' + Emp."Last Name";
                    AssignMatrixPrevious.Reset;
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious."Employee No", Emp."No.");
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious.Type, AssignMatrixPrevious.Type::Deduction);
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious.Code, DeductionsX1.Code);
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious."Payroll Period", EarningsX1.GetRangeMin(EarningsX1."Pay Period Filter"));
                    if AssignMatrixPrevious.Find('-') then begin
                        //MESSAGE('Current Deduction Amount=%1',AssignMatrixCurrent.Amount);
                        Amount := AssignMatrixPrevious.Amount
                    end else
                        Amount := 0;
                    AssignMatrixPrevious.Reset;
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious."Employee No", Emp."No.");
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious.Type, AssignMatrixPrevious.Type::Deduction);
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious.Code, DeductionsX1.Code);
                    AssignMatrixPrevious.SetRange(AssignMatrixPrevious."Payroll Period", Lastmonth);
                    if AssignMatrixPrevious.Find('-') then begin
                        //MESSAGE('Previous Deduction Amount=%1',AssignMatrixCurrent.Amount);
                        LastMonthAmount := AssignMatrixPrevious.Amount
                    end else
                        LastMonthAmount := 0;
                    Difference := Amount - LastMonthAmount;
                    if Difference <> 0 then
                        if Amount = 0 then
                            PerVariance := -100 else
                            PerVariance := ROUND((Difference / Amount) * 100, 0.05);
                    if Difference = 0 then
                        CurrReport.Skip;
                end;

            }
        }
        dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
        {
            column(ReportForNavId_1000000009; 1000000009) { } // Autogenerated by ForNav - Do not delete
            column(Assignment_Matrix_X1__Employee_No_; "Assignment Matrix-X1"."Employee No")
            {
            }
            column(Assignment_Matrix_X1_Amount; "Assignment Matrix-X1".Amount)
            {
            }
            column(Assignment_Matrix_X1_Amount_Control1000000015; "Assignment Matrix-X1".Amount)
            {
            }
            column(Difference_Control1000000017; Difference)
            {
            }
            column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
            {
            }
            column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
            {
            }
            column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
            {
            }
            column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
            {
            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        Thismonth := EarningsX1.GetRangeMin(EarningsX1."Pay Period Filter");
        Lastmonth := CalcDate('-1M', Thismonth);
        CurrentDate := Format(Thismonth, 0, '<month text> <year4>');
        PreviousDate := Format(Lastmonth, 0, '<month text> <year4>');
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        AssignMatrixCurrent: Record "Assignment Matrix-X1";
        AssignMatrixPrevious: Record "Assignment Matrix-X1";
        Amount: Decimal;
        LastMonthAmount: Decimal;
        Difference: Decimal;
        Thismonth: Date;
        Lastmonth: Date;
        EmpName: Text[30];
        EmployeeCaptionLbl: label 'Employee';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Current_PeriodCaptionLbl: label 'Current Period';
        Previous_PeriodCaptionLbl: label 'Previous Period';
        VarianceCaptionLbl: label 'Variance';
        NameCaptionLbl: label 'Name';
        Emp__NoCaptionLbl: label 'Emp. No';
        CurrentDate: Text[50];
        PreviousDate: Text[50];
        PerVariance: Decimal;
        PerVarianceLbl: label 'Percentage Variance';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511186_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511186;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
