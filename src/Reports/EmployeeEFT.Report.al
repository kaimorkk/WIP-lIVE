//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511154_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511154) { }
//type("System.IO.Path"; System_IO_Path51511154) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193568 "Employee EFT"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/EmployeeEFT.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("No.") where("Pay Mode" = const(Bank), Status = const(Active));
            RequestFilterFields = "Pay Period Filter";
            column(ReportForNavId_1000000000; 1000000000) { } // Autogenerated by ForNav - Do not delete
            trigger OnPreDataItem();
            begin
                MakeExcelHeader;
            end;

            trigger OnAfterGetRecord();
            begin
                GrossPay := 0;
                TotalDeduction := 0;
                RefNo := 0D;
                Evaluate(RefNo, Employee.GetFilter(Employee."Department Code"));
                Earn.Reset;
                Earn.SetRange(Earn."Earning Type", Earn."earning type"::"Normal Earning");
                Earn.SetRange(Earn."Non-Cash Benefit", false);
                if Earn.Find('-') then begin
                    repeat
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", RefNo);
                        AssignMatrix.SetRange(Type, AssignMatrix.Type::Payment);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        // AssignMatrix.SETRANGE(AssignMatrix."Basic Salary Code",FALSE);
                        AssignMatrix.SetRange(Code, Earn.Code);
                        if AssignMatrix.Find('-') then begin
                            repeat
                                GrossPay := GrossPay + AssignMatrix.Amount;
                            until AssignMatrix.Next = 0;
                        end;
                    until Earn.Next = 0;
                end;
                //PAYE
                AssignMatrix.Reset;
                AssignMatrix.SetRange(AssignMatrix."Payroll Period", RefNo);
                AssignMatrix.SetRange(Type, AssignMatrix.Type::Deduction);
                AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                // AssignMatrix.SETRANGE(AssignMatrix.Paye,TRUE);
                AssignMatrix.SetRange(AssignMatrix.Code, '895');
                if AssignMatrix.Find('-') then begin
                    AssignMatrix.CalcSums(Amount);
                    TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount);
                end;
                //PAYE2
                AssignMatrix.Reset;
                AssignMatrix.SetRange(AssignMatrix."Payroll Period", RefNo);
                AssignMatrix.SetRange(Type, AssignMatrix.Type::Deduction);
                AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                AssignMatrix.SetRange(AssignMatrix.Paye, true);
                AssignMatrix.SetRange(AssignMatrix.Code, '898');
                if AssignMatrix.Find('-') then begin
                    AssignMatrix.CalcSums(Amount);
                    TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount);
                end;
                //For PAYE Manual
                Deduct.Reset;
                Deduct.SetRange(Deduct."Calculation Method", Deduct."calculation method"::"% of Salary Recovery");
                if Deduct.Find('-') then begin
                    repeat
                        LoanBalance := 0;
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", RefNo);
                        AssignMatrix.SetFilter(Type, '%1|%2', AssignMatrix.Type::Deduction, AssignMatrix.Type::Loan);
                        AssignMatrix.SetRange(Code, Deduct.Code);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix.Paye, false);
                        // AssignMatrix.SETRANGE(AssignMatrix.Shares,FALSE);
                        // AssignMatrix.SETRANGE(AssignMatrix."Insurance Code",FALSE);
                        if AssignMatrix.Find('-') then begin
                            //  REPEAT
                            AssignMatrix.CalcSums(Amount);
                            PositivePAYEManual := 0;
                            Earn.Reset;
                            Earn.SetRange(Earn."Calculation Method", Earn."calculation method"::"% of Salary Recovery");
                            if Earn.Find('-') then begin
                                // REPEAT
                                PayDeduct.Reset;
                                PayDeduct.SetRange(PayDeduct."Payroll Period", RefNo);
                                PayDeduct.SetFilter(Type, '%1', PayDeduct.Type::Payment);
                                PayDeduct.SetRange(Code, Earn.Code);
                                PayDeduct.SetRange(PayDeduct."Employee No", Employee."No.");
                                PayDeduct.SetRange(PayDeduct."Manual Entry", true);
                                // AssignMatrix.SETRANGE(AssignMatrix.Paye,FALSE);
                                if PayDeduct.Find('-') then begin
                                    repeat
                                        PositivePAYEManual := PositivePAYEManual + PayDeduct.Amount;
                                    until PayDeduct.Next = 0;
                                end;
                            end;
                            TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount) - PositivePAYEManual;
                            // END;
                            //  UNTIL AssignMatrix.NEXT=0;
                        end;
                    until Deduct.Next = 0;
                end;
                Deduct.Reset;
                Deduct.SetFilter(Deduct."Calculation Method", '<>%1', Deduct."calculation method"::"% of Salary Recovery");
                Deduct.SetRange(Informational, false);
                if Deduct.Find('-') then begin
                    repeat
                        LoanBalance := 0;
                        AssignMatrix.Reset;
                        AssignMatrix.SetRange(AssignMatrix."Payroll Period", RefNo);
                        AssignMatrix.SetFilter(Type, '%1|%2', AssignMatrix.Type::Deduction, AssignMatrix.Type::Loan);
                        AssignMatrix.SetRange(Code, Deduct.Code);
                        AssignMatrix.SetRange(AssignMatrix."Employee No", Employee."No.");
                        AssignMatrix.SetRange(AssignMatrix.Paye, false);
                        // AssignMatrix.SETRANGE(AssignMatrix.Shares,FALSE);
                        // AssignMatrix.SETRANGE(AssignMatrix."Insurance Code",FALSE);
                        if AssignMatrix.Find('-') then begin
                            //  REPEAT
                            AssignMatrix.CalcSums(Amount);
                            TotalDeduction := TotalDeduction + Abs(AssignMatrix.Amount);
                            // END;
                            //  UNTIL AssignMatrix.NEXT=0;
                        end;
                    until Deduct.Next = 0;
                end;
                NetPay := GrossPay - TotalDeduction;
                /*
               Employee.CALCFIELDS(Employee."Total Allowances",Employee."Total Deductions");
               NetPay:=0;
                NetPay:=Employee."Total Allowances"+Employee."Total Deductions";
                */
                Name := Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name";
                Name := DelChr(Name, '=', '.');
                Name := PadStr(Name, 20, ' ');
                BankName := '';
                BranchName := '';
                EmpBank.Reset;
                EmpBank.SetRange(EmpBank.Code, Employee."Employee's Bank");
                if EmpBank.Find('-') then begin
                    BankName := EmpBank.Name;
                    BranchName := EmpBank."Name 2";
                end;
                //
                NetPay := payroll.PayrollRounding(NetPay);
                BankCode := '';
                RefNo := 0D;
                Amount := '';
                Evaluate(Amount, Format(NetPay));
                Amount := DelChr(Amount, '=', ',');
                BankCode := PadStr(Employee."Employee's Bank", 2, '1');// Employee."Employee's Bank"+Employee."Bank Branch";
                BranchCode := CopyStr(Employee."Employee's Bank", 3, 3);
                Evaluate(RefNo, Employee.GetFilter(Employee."Department Code"));//Employee."No.";
                                                                                //MESSAGE('rEFnO=%1',Employee."Pay Period Filter");
                                                                                /*
                                                                                PayrollPeriods.RESET;
                                                                                PayrollPeriods.SETRANGE(PayrollPeriods."Starting Date",Employee."Pay Period Filter");
                                                                                IF PayrollPeriods.FIND('-') THEN
                                                                                TextRefNo:=PayrollPeriods.Name+' Pay';
                                                                                */
                TextRefNo := Format(RefNo, 0, '<Month Text>') + ' Pay';
                Amtlen := StrLen(Amount);
                Space := '';
                i := 0;
                j := 0;
                i := 12 - (Amtlen + 1);
                if j < i then
                    repeat
                        Space := Space + ' ';
                        j := j + 1;
                    until j = i;
                Amount := Space + Amount;
                Amtlen2 := StrLen(Employee."Bank Account Number");
                Space2 := '';
                i := 0;
                j := 0;
                i := 14 - (Amtlen2);
                if j < i then
                    repeat
                        if i = 1 then
                            Space2 := ' '
                        else
                            Space2 := Space2 + ' ';
                        j := j + 1;
                    until j = i;
                if Employee."Bank Account Number" = '' then
                    Message('Employee %1 %2 has no Bank account', Employee."No.", Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name")
                else
                    BankAcc := Space2 + DelChr(Employee."Bank Account Number", '=', ' ');
                if NetPay < 0 then
                    Message('Employee %1 %2 has a negative pay', Employee."No.", Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name");
                /*IF NetPay<501 THEN
				 CurrDataport.SKIP;*/
                MakeExcelDataBody;
                TotalNet := TotalNet + NetPay;

            end;

            trigger OnPostDataItem();
            begin
                MakeExcelFooter;
                CreateExcelbook;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        Name: Text[250];
        NetPay: Decimal;
        BankCode: Code[10];
        RefNo: Date;
        Amount: Text[30];
        payroll: Codeunit Payroll5;
        Amtlen: Integer;
        Space: Text[12];
        i: Integer;
        j: Integer;
        BankAcc: Text[20];
        Amtlen2: Integer;
        Space2: Text[20];
        BankName: Text[50];
        BranchName: Text[50];
        EmpBank: Record "Employee Bank AccountX1";
        ExcelBuf: Record "Excel Buffer" temporary;
        TotalNet: Decimal;
        Text002: label 'EFT PAYMENT';
        Text001: label 'CMA';
        BranchCode: Code[10];
        TextRefNo: Text[50];
        PayrollPeriods: Record "Payroll PeriodX1";
        GrossPay: Decimal;
        TotalDeduction: Decimal;
        Earn: Record EarningsX1;
        Deduct: Record DeductionsX1;
        AssignMatrix: Record "Assignment Matrix-X1";
        PositivePAYEManual: Decimal;
        PayDeduct: Record "Assignment Matrix-X1";
        LoanBalance: Decimal;

    procedure CreateExcelbook()
    begin
        // ExcelBuf.CreateBook(Text001, Text001);
        ExcelBuf.WriteSheet(Text001, COMPANYNAME, UserId);
        ExcelBuf.CloseBook();
        ExcelBuf.OpenExcel();
        //ExcelBuf.GiveUserControl;
    end;

    procedure MakeExcelDataBody()
    var
        BlankFiller: Text[250];
    begin
        BlankFiller := PadStr(' ', MaxStrLen(BlankFiller), ' ');
        ExcelBuf.NewRow;
        ExcelBuf.AddColumn(BankCode, false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn(BranchCode, false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn(BankAcc, false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn(Name, false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn(Amount, false, '', false, false, false, '@', ExcelBuf."cell type"::Number);
        ExcelBuf.AddColumn(TextRefNo, false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        //ExcelBuf.AddColumn(Amount,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
    end;

    procedure MakeExcelHeader()
    var
        BlankFiller: Text[250];
    begin
        /*BlankFiller := PADSTR(' ',MAXSTRLEN(BlankFiller),' ');
		ExcelBuf.NewRow;
		ExcelBuf.AddColumn('Bank Code',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		ExcelBuf.AddColumn('Branch Code',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		ExcelBuf.AddColumn('A/C Number',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		ExcelBuf.AddColumn('Employee name',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		ExcelBuf.AddColumn('Amount',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		ExcelBuf.AddColumn('Ref NO',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
		//ExcelBuf.AddColumn('AMOUNT KSHS',FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
		 */

    end;

    procedure MakeExcelFooter()
    var
        BlankFiller: Text[250];
    begin
        BlankFiller := PadStr(' ', MaxStrLen(BlankFiller), ' ');
        ExcelBuf.NewRow;
        ExcelBuf.AddColumn('', false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn('', false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn('', false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        ExcelBuf.AddColumn('', false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        //ExcelBuf.AddColumn(TotalNet,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
        ExcelBuf.AddColumn('', false, '', false, false, false, '@', ExcelBuf."cell type"::Text);
        //ExcelBuf.AddColumn('',FALSE,'',FALSE,FALSE,FALSE,'@',ExcelBuf."Cell Type"::Text);
        //ExcelBuf.AddColumn(TotalNet,FALSE,'',FALSE,FALSE,FALSE,'',ExcelBuf."Cell Type"::Text);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511154_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511154;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
