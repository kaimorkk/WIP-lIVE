//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511276_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511276) { }
    //type("System.IO.Path"; System_IO_Path51511276) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193660 "Inventory Availability-Qty"
{
    Caption = 'Inventory Availability';
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/InventoryAvailability-Qty.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Item; Item)
        {
            DataItemTableView = where(Type = const(Inventory));
            RequestFilterFields = "No.", "Location Filter", "Variant Filter", "Search Description", "Assembly BOM", "Inventory Posting Group", "Statistics Group", "Vendor No.";
            column(ReportForNavId_8129; 8129) { } // Autogenerated by ForNav - Do not delete
            column(CompanyName; COMPANYNAME)
            {
            }
            column(TableItemFilter; TableCaption + ': ' + ItemFilter)
            {
            }
            column(ItemFilter; ItemFilter)
            {
            }
            column(GetCurrentKey; GetCurrentKey)
            {
            }
            column(UseStockkeepingUnit; UseStockkeepingUnit)
            {
            }
            column(InventPostGroup_Item; Item."Inventory Posting Group")
            {
            }
            column(InvtReorder; Format(InvtReorder))
            {
            }
            column(ReorderPoint_Item; Item."Reorder Point")
            {
                IncludeCaption = true;
            }
            column(Quantity_; QuantityRm)
            {
            }
            column(ProjAvailBalance; ProjAvailBalance)
            {
                DecimalPlaces = 0 : 5;
            }
            column(PlannedOrderReceipt; PlannedOrderReceipt)
            {
                DecimalPlaces = 0 : 5;
            }
            column(BackOrderQty; BackOrderQty)
            {
                DecimalPlaces = 0 : 5;
            }
            column(ScheduledReceipt; ScheduledReceipt)
            {
                DecimalPlaces = 0 : 5;
            }
            column(GrossRequirement; GrossRequirement)
            {
                DecimalPlaces = 0 : 5;
            }
            column(BaseUnitofMeasure_Item; Item."Base Unit of Measure")
            {
                IncludeCaption = true;
            }
            column(AssemblyBOM_Item; Format("Assembly BOM"))
            {
            }
            column(Description_Item; Item.Description)
            {
                IncludeCaption = true;
            }
            column(No_Item; Item."No.")
            {
                IncludeCaption = true;
            }
            column(InventoryAvailabilityCaption; InventoryAvailabilityCaptionLbl)
            {
            }
            column(PageCaption; PageCaptionLbl)
            {
            }
            column(BOMCaption; BOMCaptionLbl)
            {
            }
            column(GrossRequirementCaption; GrossRequirementCaptionLbl)
            {
            }
            column(ScheduledReceiptCaption; ScheduledReceiptCaptionLbl)
            {
            }
            column(PlannedOrderReceiptCaption; PlannedOrderReceiptCaptionLbl)
            {
            }
            column(QuantityOnBackOrderCaption; QuantityOnBackOrderCaptionLbl)
            {
            }
            column(ProjectedAvailableBalCaption; ProjectedAvailableBalCaptionLbl)
            {
            }
            column(ReorderCaption; ReorderCaptionLbl)
            {
            }
            dataitem("Stockkeeping Unit"; "Stockkeeping Unit")
            {
                DataItemLink = "Item No." = field("No."), "Location Code" = field("Location Filter"), "Variant Code" = field("Variant Filter");
                DataItemTableView = sorting("Item No.", "Location Code", "Variant Code");
                column(ReportForNavId_5605; 5605) { } // Autogenerated by ForNav - Do not delete
                column(AssemblyBOMStock_Item; Format(Item."Assembly BOM"))
                {
                }
                column(UnitofMeasure_Item; Item."Base Unit of Measure")
                {
                }
                column(InvtReorder2; Format(InvtReorder))
                {
                }
                column(ReordPoint_StockkeepUnit; "Stockkeeping Unit"."Reorder Point")
                {
                }
                column(ProjAvailBalance2; ProjAvailBalance)
                {
                    DecimalPlaces = 0 : 5;
                }
                column(BackOrderQty2; BackOrderQty)
                {
                    DecimalPlaces = 0 : 5;
                }
                column(PlannedOrderReceipt2; PlannedOrderReceipt)
                {
                    DecimalPlaces = 0 : 5;
                }
                column(ScheduledReceipt2; ScheduledReceipt)
                {
                    DecimalPlaces = 0 : 5;
                }
                column(GrossRequirement2; GrossRequirement)
                {
                    DecimalPlaces = 0 : 5;
                }
                column(VariantCode_StockkeepUnit; "Stockkeeping Unit"."Variant Code")
                {
                    IncludeCaption = true;
                }
                column(LocCode_StockkeepUnit; "Stockkeeping Unit"."Location Code")
                {
                    IncludeCaption = true;
                }
                column(SKUPrintLoop; SKUPrintLoop)
                {
                }
                trigger OnPreDataItem();
                begin
                    if not UseStockkeepingUnit then
                        CurrReport.Break;
                    SKUPrintLoop := 0;
                end;

                trigger OnAfterGetRecord();
                begin
                    SKUPrintLoop := SKUPrintLoop + 1;
                    if "Reordering Policy" in ["reordering policy"::Order, "reordering policy"::"Lot-for-Lot"] then
                        "Reorder Point" := 0;
                    CalcNeed(Item, "Location Code", "Variant Code", "Reorder Point");
                end;

            }
            trigger OnPreDataItem();
            begin
                GetCurrentKey := CurrentKey;
            end;

            trigger OnAfterGetRecord();
            begin
                if not UseStockkeepingUnit then begin
                    if "Reordering Policy" in ["reordering policy"::Order, "reordering policy"::"Lot-for-Lot"] then
                        "Reorder Point" := 0;
                    CalcNeed(Item, GetFilter("Location Filter"), GetFilter("Variant Filter"), "Reorder Point");
                end;
                QuantityRm := 0;
                Item.CalcFields(Inventory);
                QuantityRm := Item.Inventory;
                if QuantityRm = 0 then
                    CurrReport.Skip;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(UseStockkeepingUnit; UseStockkeepingUnit)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Use Stockkeeping Unit';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        ItemFilter := Item.GetFilters;
        //;
        //ReportsForNavPre;
    end;

    var
        ItemFilter: Text;
        BackOrderQty: Decimal;
        InvtReorder: Boolean;
        GrossRequirement: Decimal;
        PlannedOrderReceipt: Decimal;
        ScheduledReceipt: Decimal;
        ProjAvailBalance: Decimal;
        UseStockkeepingUnit: Boolean;
        SKUPrintLoop: Integer;
        AvailToPromise: Codeunit "Available to Promise";
        GetCurrentKey: Text[250];
        InventoryAvailabilityCaptionLbl: label 'Inventory Availability';
        PageCaptionLbl: label 'Page';
        BOMCaptionLbl: label 'BOM';
        GrossRequirementCaptionLbl: label 'Gross Requirement';
        ScheduledReceiptCaptionLbl: label 'Scheduled Receipt';
        PlannedOrderReceiptCaptionLbl: label 'Planned Order Receipt';
        QuantityOnBackOrderCaptionLbl: label 'Quantity on Back Order';
        ProjectedAvailableBalCaptionLbl: label 'Projected Available Balance';
        ReorderCaptionLbl: label 'Reorder';
        QuantityRm: Decimal;

    procedure CalcNeed(Item: Record Item; LocationFilter: Text[250]; VariantFilter: Text[250]; ReorderPoint: Decimal)
    begin
        with Item do begin
            SetFilter("Location Filter", LocationFilter);
            SetFilter("Variant Filter", VariantFilter);
            SetRange("Date Filter", 0D, WorkDate);
            CalcFields(
              "Qty. on Purch. Order",
              "Planning Receipt (Qty.)",
              "Scheduled Receipt (Qty.)",
              "Planned Order Receipt (Qty.)",
              "Purch. Req. Receipt (Qty.)",
              "Qty. in Transit",
              "Trans. Ord. Receipt (Qty.)",
              "Reserved Qty. on Inventory");
            BackOrderQty :=
              "Qty. on Purch. Order" + "Scheduled Receipt (Qty.)" + "Planned Order Receipt (Qty.)" +
              "Qty. in Transit" + "Trans. Ord. Receipt (Qty.)" +
              "Planning Receipt (Qty.)" + "Purch. Req. Receipt (Qty.)";
            SetRange("Date Filter", 0D, 99991231D);
            GrossRequirement :=
              AvailToPromise.CalcGrossRequirement(Item);
            ScheduledReceipt :=
              AvailToPromise.CalcScheduledReceipt(Item);
            CalcFields(
              Inventory,
              "Planning Receipt (Qty.)",
              "Planned Order Receipt (Qty.)",
              "Purch. Req. Receipt (Qty.)");
            ScheduledReceipt := ScheduledReceipt - "Planned Order Receipt (Qty.)";
            PlannedOrderReceipt :=
              "Planning Receipt (Qty.)" +
              "Planned Order Receipt (Qty.)" +
              "Purch. Req. Receipt (Qty.)";
            ProjAvailBalance :=
              Inventory +
              PlannedOrderReceipt +
              ScheduledReceipt -
              GrossRequirement;
            InvtReorder := ProjAvailBalance < ReorderPoint;
        end;
    end;

    procedure InitializeRequest(NewUseStockkeepingUnit: Boolean)
    begin
        UseStockkeepingUnit := NewUseStockkeepingUnit;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511276_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511276;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
