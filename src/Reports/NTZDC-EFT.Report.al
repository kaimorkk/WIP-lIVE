//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511035_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511035) { }
//type("System.IO.Path"; System_IO_Path51511035) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193470 "NTZDC-EFT"
{
    RDLCLayout = './Layouts/NTZDC-EFT.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(HeaderFile; Integer)
        {
            DataItemTableView = sorting(Number) where(Number = const(1));
            column(ReportForNavId_3335; 3335) { } // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(FileType; FileType)
            {
            }
            column(EmployeeCaption; EmployeeCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(HeaderFile_Number; HeaderFile.Number)
            {
            }
            trigger OnAfterGetRecord();
            begin
                EmpRecordType1 := '1';
                FileType := 'Nyayo Tea Zones Development Corporation';
                "DR/CR" := 'CR';
                Time1 := Time;
                TimeText := Format(Time1, 0, '<Hours24,2><Minutes,2><Seconds,2>');
                HourText := CopyStr(TimeText, 1, 2);
                if HourText < '10' then begin
                    HourText := '0' + HourText;
                end;
                Time2 := Format(Time1);
                Time2 := DelChr(Time2, '=', ':');
                //****Formulate todays date as YYMMDD******************
                Year := Date2dmy(Today, 3);
                Month1 := Date2dmy(Today, 2);
                Day := Date2dmy(Today, 1);
                if Month1 < 10 then
                    MonthText := '0' + Format(Month1)
                else
                    MonthText := Format(Month1);
                if Day < 10 then
                    DayText := '0' + Format(Day)
                else
                    DayText := Format(Day);
                Hr := '20';
                YearText := CopyStr(Format(Year), 3, 2);
                Todaysdate := DayText + MonthText + Hr + YearText;
                // NTZDCEFT.CreateOutstream(StreamOuteftfile);
                StreamOuteftfile.WriteText(EmpRecordType1 + ',' + FileType + ',' + "DR/CR" + ',' + Time2 + ',' + Todaysdate);
                StreamOuteftfile.WriteText();
                //eftfile.WRITE(EmpRecordType1);
            end;

        }
        dataitem(Employee; Employee)
        {
            DataItemTableView = where("Employee's Bank" = filter(<> ''), "Bank Branch" = filter(<> ''), "Bank Account Number" = filter(<> ''));
            RequestFilterFields = "Pay Period Filter";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(EmpAccNo; EmpAccNo)
            {
            }
            column(DisplayCode; DisplayCode)
            {
            }
            column(Netpayment1; Netpayment1)
            {
            }
            column(EmpName; EmpName)
            {
            }
            column(Employee_No_; Employee."No.")
            {
            }
            trigger OnAfterGetRecord();
            begin
                DisplayCode := Employee."Employee's Bank" + Employee."Bank Branch";
                EmpAccNo := Employee."Bank Account Number";
                EmpName := Employee."First Name" + ' ' + Employee."Last Name";
                Employee.CalcFields("Net pay", Employee.Basic, Employee."Total Allowances", Employee."Total Deductions");
                Netpayment := Employee.Basic + Employee."Total Allowances" + Employee."Total Deductions";
                Netpayment1 := Format(Netpayment, 0, '<Integer><Decimal>');
                /////////////////////////////////////////
                DecimalPosition := StrPos(Netpayment1, '.');
                if DecimalPosition <> 0 then begin
                    // MESSAGE('The number of characters after demial point=%1',STRLEN(COPYSTR(TotalPaymentAmount1,DecimalPosition)));
                    if StrLen(CopyStr(Netpayment1, DecimalPosition)) = 2 then
                        Netpayment1 := Netpayment1 + '0';
                end
                else
                    Netpayment1 := Netpayment1 + '.00';
                Netpayment1 := DelChr(Netpayment1, '=', ':');
                if Employee."No." <> '' then begin
                    TotalNetpay := TotalNetpay + Netpayment;
                    Holder := Holder + 1;
                end;
                StreamOuteftfile.WriteText(DisplayCode + EmpAccNo + EmpName + Netpayment1);
                StreamOuteftfile.WriteText();
            end;

        }
        dataitem(Trailer; Integer)
        {
            DataItemTableView = sorting(Number) where(Number = const(1));
            column(ReportForNavId_1990; 1990) { } // Autogenerated by ForNav - Do not delete
            column(Holder; Holder)
            {
            }
            column(TotalPaymentAmount1; TotalPaymentAmount1)
            {
            }
            column(Trailer_Number; Trailer.Number)
            {
            }
            trigger OnAfterGetRecord();
            begin
                EmpRecordType4 := '9';
                Holder := Holder + 1 + 1;
                TotalRecord := Format(Holder);
                TotalRecord := DelChr(TotalRecord, '=', ':');
                TotalPaymentAmount1 := Format(TotalNetpay, 0, '<Integer><Decimal>');
                DecimalPosition := StrPos(TotalPaymentAmount1, '.');
                if DecimalPosition <> 0 then begin
                    // MESSAGE('The number of characters after decimal point=%1',STRLEN(COPYSTR(TotalPaymentAmount1,DecimalPosition)));
                    if StrLen(CopyStr(TotalPaymentAmount1, DecimalPosition)) = 2 then
                        TotalPaymentAmount1 := TotalPaymentAmount1 + '0';
                end
                else
                    TotalPaymentAmount1 := TotalPaymentAmount1 + '.00';
                TotalPaymentAmount1 := DelChr(TotalPaymentAmount1, '=', ':');
                StreamOuteftfile.WriteText(EmpRecordType4 + ',' + TotalRecord + ',' + TotalPaymentAmount1);
                StreamOuteftfile.WriteText();
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        // NTZDCEFT.Close;
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        // NTZDCEFT.Create('C:NTZDCEFT.txt');
        EmpRecordType2 := '2';
        AccNo := '5060021';
        BankCode := '03';
        BranchCode := '075';
        Currency := 'KES';
        CustomerRefNo := 'bs009797';
        PaymentDescription := 'SALARYPAYT';
        TotalPaymentAmount := 7000;
        CustomerName := 'BLUESHIELD';
        CustomerAddress := '234 NIROBI';
        ////////////////////////////////////////
        if Payrollperiod.Get(Employee.GetRangeMin(Employee."Department Code")) then
            PaymentDate := Payrollperiod."Pay Date";
        TodaysDate1 := Format(PaymentDate);
        Year1 := Date2dmy(PaymentDate, 3);
        Month11 := Date2dmy(PaymentDate, 2);
        Day1 := Date2dmy(PaymentDate, 1);
        if Month11 < 10 then
            MonthText1 := '0' + Format(Month11)
        else
            MonthText1 := Format(Month11);
        if Day1 < 10 then
            DayText1 := '0' + Format(Day1)
        else
            DayText1 := Format(Day1);
        Hr := '20';
        YearText1 := CopyStr(Format(Year1), 3, 2);
        TodaysDate1 := DayText1 + MonthText1 + Hr + YearText1;
        ///////////////////////////////////////////////
        if Payrollperiod.Get(Employee.GetRangeMin(Employee."Department Code")) then
            Employee.CalcFields("Net pay", Employee.Basic, Employee."Total Allowances", Employee."Total Deductions");
        Netpayment := Employee.Basic + Employee."Total Allowances" + Employee."Total Deductions";
        EmpRecord.Reset;
        EmpRecord.SetRange(EmpRecord."Department Code", Employee.GetRangeMin(Employee."Department Code"));
        EmpRecord.SetFilter(EmpRecord."Employee's Bank", '<>%1', '');
        EmpRecord.SetFilter(EmpRecord."Bank Account Number", '<>%1', '');
        EmpRecord.SetFilter(EmpRecord."Bank Branch", '<>%1', '');
        if EmpRecord.Find('-') then
            repeat
                EmpRecord.CalcFields(EmpRecord."Total Allowances", EmpRecord."Total Deductions", EmpRecord.Basic);
                Totalpayment2 := Totalpayment2 + EmpRecord.Basic + EmpRecord."Total Allowances" + EmpRecord."Total Deductions";
            until EmpRecord.Next = 0;
        Totalpayment2Txt := Format(Totalpayment2, 0, '<Integer><Decimal>');
        DecimalPosition := StrPos(Totalpayment2Txt, '.');
        if DecimalPosition <> 0 then begin
            if StrLen(CopyStr(Totalpayment2Txt, DecimalPosition)) = 2 then
                Totalpayment2Txt := Totalpayment2Txt + '0';
        end
        else
            Totalpayment2Txt := Totalpayment2Txt + '.00';
        //MESSAGE('%1',Totalpayment2Txt);
        //;
        //ReportsForNavPre;
    end;

    var
        EmpRecordType3: Code[10];
        DisplayCode: Code[10];
        TodaysDate1: Text[30];
        Currency: Code[10];
        Netpayment: Decimal;
        EmpName: Code[100];
        EmpRecordType1: Code[10];
        FileType: Code[50];
        "DR/CR": Code[10];
        Todaysdate: Text[30];
        Time2: Text[30];
        EmpRecordType2: Code[10];
        AccNo: Code[20];
        BankCode: Code[10];
        BranchCode: Code[10];
        CustomerRefNo: Code[20];
        PaymentDescription: Code[40];
        TotalPaymentAmount: Decimal;
        CustomerName: Code[40];
        CustomerAddress: Code[30];
        EmpRecordType4: Code[10];
        TotalRecord: Text[30];
        TotalPaymentAmount1: Text[30];
        PaymentDate: Date;
        Payrollperiod: Record "Payroll PeriodX1";
        DecimalPosition: Integer;
        Netpayment1: Text[30];
        TimeText: Text[30];
        HourText: Text[30];
        Time1: Time;
        Year: Integer;
        Month1: Integer;
        Day: Integer;
        MonthText: Text[30];
        DayText: Text[30];
        Hr: Text[30];
        YearText: Text[30];
        Year1: Integer;
        Month11: Integer;
        Day1: Integer;
        YearText1: Text[30];
        MonthText1: Text[30];
        DayText1: Text[30];
        TodaysDate11: Date;
        TotalNetpay: Decimal;
        Holder: Decimal;
        Totalpayment2: Decimal;
        Totalpayment2Txt: Text[30];
        EmpRecord: Record Employee;
        StreamOuteftfile: OutStream;
        NTZDCEFT: File;
        EmpNo: Code[20];
        EmpAccNo: Code[20];
        EmployeeCaptionLbl: label 'Employee';
        CurrReport_PAGENOCaptionLbl: label 'Page';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511035_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511035;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
