//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511005_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511005) { }
//type("System.IO.Path"; System_IO_Path51511005) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193446 "Imprest-Claim VoucherR"
{
    RDLCLayout = './Layouts/Imprest-ClaimVoucherR.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Request Header1"; "Request Header1")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.";
            column(ReportForNavId_5386; 5386) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfo_Name; CompanyInfo.Name)
            {
            }
            column(STRSUBSTNO_TXT002_CompanyInfo_Address_CompanyInfo__Post_Code__CompanyInfo_City_; StrSubstNo(TXT002, CompanyInfo.Address, CompanyInfo."Post Code", CompanyInfo.City))
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(Request_Header1__No__; "Request Header1"."No.")
            {
            }
            column(Request_Header1__Request_Date_; "Request Header1"."Request Date")
            {
            }
            column(Request_Header1__Employee_Name_; "Request Header1"."Employee Name")
            {
            }
            column(Requested_Amount; "Request Header1"."Total Amount Requested")
            {
            }
            column(Request_Header1_Imprest_Amount_; "Request Header1"."Imprest Amount")
            {
            }
            column(CompName; CompName)
            {
            }
            column(ImprestDeadLine; "Request Header1"."Deadline for Imprest Return")
            {
            }
            column(Declaration_; DeclarationLbl)
            {
            }
            column(Declarations_; Declaration2Lbl)
            {
            }
            column(Amount_Words; NumberText[1])
            {
            }
            column(IMPREST_CLAIM_FORMCaption; IMPREST_CLAIM_FORMCaptionLbl)
            {
            }
            column(Request_Header1__No__Caption; FieldCaption("No."))
            {
            }
            column(Request_Header1__Request_Date_Caption; FieldCaption("Request Date"))
            {
            }
            column(Request_Header1__Employee_Name_Caption; FieldCaption("Employee Name"))
            {
            }
            column(Request_Header1__Requested_Amount; FieldCaption("Imprest Amount"))
            {
            }
            column(Request_Header1__Actual_Amnt; FieldCaption("Actual Amount"))
            {
            }
            column(Department_Caption; Department_CaptionLbl)
            {
            }
            column(Payee_Caption; PayeeLbl)
            {
            }
            column(Name_; NAME__________________________________________________CaptionLbl)
            {
            }
            column(Amount_ReqCaption; Amount_ReqLbl)
            {
            }
            column(Amount_GivCaption; AmountGivenLbl)
            {
            }
            column(Amount_WordsCaption; AmountInWordsLbl)
            {
            }
            column(PurposeCaption; PurposeLbl)
            {
            }
            column(Email; StrSubstNo(EmailLbl, CompanyInfo."E-Mail"))
            {
            }
            column(Homepage; StrSubstNo(WebLbl, CompanyInfo."Home Page"))
            {
            }
            column(Phone2; StrSubstNo(CellLbl, CompanyInfo."Phone No. 2"))
            {
            }
            column(CompInfo_Phone_No; StrSubstNo(PhoneLbl, CompanyInfo."Phone No."))
            {
            }
            column(CompInfo_Fax_No; StrSubstNo(FaxLbl, CompanyInfo."Fax No."))
            {
            }
            column(CompInfo_Address; CompanyInfo.Address)
            {
            }
            column(CompInfo_Address2; CompanyInfo."Address 2")
            {
            }
            column(CompInfo_City; CompanyInfo.City)
            {
            }
            dataitem("Request Lines1"; "Request Lines1")
            {
                DataItemLink = "Document No" = field("No.");
                DataItemTableView = sorting("Document No", "Line No.");
                column(ReportForNavId_1475; 1475) { } // Autogenerated by ForNav - Do not delete
                column(Request_Lines1_Description; "Request Lines1".Description)
                {
                }
                column(Request_Lines1__Request_Lines1___Requested_Amount_; "Request Lines1".Amount)
                {
                }
                column(Request_Lines1__Account_No_; "Request Lines1"."Account No")
                {
                }
                column(STRSUBSTNO___1__2__CurrencyCodeText__Request_Lines1___Requested_Amount__; StrSubstNo('%1 %2', CurrencyCodeText, "Request Lines1".Amount))
                {
                }
                column(STRSUBSTNO___1__2__CurrencyCodeText__Request_Header1___Imprest_Amount__; StrSubstNo('%1 %2', CurrencyCodeText, "Request Header1"."Total Amount Requested"))
                {
                }
                column(STRSUBSTNO___1__2__CurrencyCodeText_Netamt_; StrSubstNo('%1 %2', CurrencyCodeText, Netamt))
                {
                }
                column(EmptyString; '_______________________________________')
                {
                }
                column(UserRecApp3_Picture; UserRecApp3.Picture)
                {
                }
                column(V3rdapproverdate_; "3rdapproverdate")
                {
                }
                column(V3rdapprover_; "3rdapprover")
                {
                }
                column(UserRecApp2_Picture; UserRecApp2.Picture)
                {
                }
                column(V2ndapprover_; "2ndapprover")
                {
                }
                column(V2ndapproverdate_; "2ndapproverdate")
                {
                }
                column(V1stapprover_; "1stapprover")
                {
                }
                column(UserRecApp1_Picture; UserRecApp1.Picture)
                {
                }
                column(V1stapproverdate_; "1stapproverdate")
                {
                }
                column(DescriptionCaption; DescriptionCaptionLbl)
                {
                }
                column(AmountCaption; AmountCaptionLbl)
                {
                }
                column(Request_Lines1__Account_No_Caption; FieldCaption("Account No"))
                {
                }
                column(TOTAL_EXPENSESCaption; TOTAL_EXPENSESCaptionLbl)
                {
                }
                column(LESS__ADVANCECaption; LESS__ADVANCECaptionLbl)
                {
                }
                column(AMOUNT_DUE_TO__FROM__EMPLOYEECaption; AMOUNT_DUE_TO__FROM__EMPLOYEECaptionLbl)
                {
                }
                column(PAYMENT_RECEIVED_BYCaption; PAYMENT_RECEIVED_BYCaptionLbl)
                {
                }
                column(NAME__________________________________________________Caption; NAME__________________________________________________CaptionLbl)
                {
                }
                column(SIGNATURE__________________________________________________Caption; SIGNATURE__________________________________________________CaptionLbl)
                {
                }
                column(DATE_Acc; "DATE _to_account__________________________________________________CaptionLbl")
                {
                }
                column(APPROVED_BY_Caption; APPROVED_BY_CaptionLbl)
                {
                }
                column(SIGNATURE_Caption; SIGNATURE_CaptionLbl)
                {
                }
                column(DATE__________________________________________________Caption_Control1000000036; DATE__________________________________________________Caption_Control1000000036Lbl)
                {
                }
                column(SIGNATURECaption; SIGNATURECaptionLbl)
                {
                }
                column(DATE__________________________________________________Caption_Control1000000042; DATE__________________________________________________Caption_Control1000000042Lbl)
                {
                }
                column(SIGNATURECaption_Control1000000055; SIGNATURECaption_Control1000000055Lbl)
                {
                }
                column(IDNo_____________________________Caption_Control1000000042; "ID No__________________________________________________Caption_Control1000000062Lbl")
                {
                }
            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.Get;
                CompanyInfo.CalcFields(CompanyInfo.Picture);
            end;

            trigger OnAfterGetRecord();
            begin
                Netamt := 0;
                DimValues.Reset;
                DimValues.SetRange(DimValues."Dimension Code", 'DEPARTMENT');
                DimValues.SetRange(DimValues.Code, "Request Header1"."Global Dimension 1 Code");
                if DimValues.Find('-') then begin
                    CompName := DimValues.Name;
                end
                else begin
                    CompName := '';
                end;
                /*IF Payments.Currency<>'' THEN
				CurrencyCodeText:=Payments.Currency
				ELSE*/
                CurrencyCodeText := GLsetup."LCY Code";
                /*Banks.RESET;
				Banks.SETRANGE(Banks."No.",Payments."KBA Bank Code");
				IF Banks.FIND('-') THEN BEGIN
				BankName:=Banks.Name;
				END
				ELSE BEGIN
				BankName:='';
				END;
				Bank.RESET;
				Bank.SETRANGE(Bank."No.",Payments."Paying Bank Account");
				IF Bank.FIND('-') THEN BEGIN
				PayeeBankName:=Bank.Name;
				END
				ELSE BEGIN
				PayeeBankName:='';
				END;
				PGAccount:='';
				IF Payments."Account Type"=Payments."Account Type"::"G/L Account" THEN BEGIN
				PGAccount:=Payments."Account No.";
				END;
				IF Payments."Account Type"=Payments."Account Type"::"Bank Account" THEN BEGIN
				Bank.RESET;
				Bank.SETRANGE(Bank."No.",Payments."Account No.");
				IF Bank.FIND('-') THEN BEGIN
				Bank.TESTFIELD(Bank."Bank Acc. Posting Group");
				BankPG.RESET;
				BankPG.SETRANGE(BankPG.Code,Bank."Bank Acc. Posting Group");
				IF BankPG.FIND('-') THEN BEGIN
				PGAccount:=BankPG."G/L Account No.";
				END;
				END;
				END;
				IF Payments."Account Type"=Payments."Account Type"::Vendor THEN BEGIN
				Vend.RESET;
				Vend.SETRANGE(Vend."No.",Payments."Account No.");
				IF Vend.FIND('-') THEN BEGIN
				Vend.TESTFIELD(Vend."Vendor Posting Group");
				VendorPG.RESET;
				VendorPG.SETRANGE(VendorPG.Code,Vend."Vendor Posting Group");
				IF VendorPG.FIND('-') THEN BEGIN
				PGAccount:=VendorPG."Payables Account";
				END;
				END;
				END;
				IF Payments."Account Type"=Payments."Account Type"::Customer THEN BEGIN
				Cust.RESET;
				Cust.SETRANGE(Cust."No.",Payments."Account No.");
				IF Cust.FIND('-') THEN BEGIN
				Cust.TESTFIELD(Cust."Customer Posting Group");
				CustPG.RESET;
				CustPG.SETRANGE(CustPG.Code,Cust."Customer Posting Group");
				IF CustPG.FIND('-') THEN BEGIN
				PGAccount:=CustPG."Receivables Account";
				END;
				END;
				END;
				IF Payments."Account Type"=Payments."Account Type"::"Fixed Asset" THEN BEGIN
				FA.RESET;
				FA.SETRANGE(FA."FA No.",Payments."Account No.");
				IF FA.FIND('-') THEN BEGIN
				FA.TESTFIELD(FA."FA Posting Group");
				FAPG.RESET;
				FAPG.SETRANGE(FAPG.Code,FA."FA Posting Group");
				IF FAPG.FIND('-') THEN BEGIN
				PGAccount:=FAPG."Acquisition Cost Account";
				END;
				END;
				END;
				BankAccountUsed:='';
				//Payments.TESTFIELD(Payments."Pay Mode");
				IF Payments."Pay Mode"='CASH' THEN BEGIN
				BankAccountUsed:=Payments."Cashier Bank Account";
				END
				ELSE BEGIN
				BankAccountUsed:=Payments."Paying Bank Account";
				END;
				BankAccountUsedName:='';
				Bank.RESET;
				Bank.SETRANGE(Bank."No.",BankAccountUsed);
				IF Bank.FIND('-') THEN BEGIN
				Bank.TESTFIELD(Bank."Bank Acc. Posting Group");
				BankPG.RESET;
				BankPG.SETRANGE(BankPG.Code,Bank."Bank Acc. Posting Group");
				IF BankPG.FIND('-') THEN BEGIN
				BankAccountUsed:=BankPG."G/L Account No.";
				END;
				//BankAccountUsedName:=Bank.Name;
				END;
				GLAccount.RESET;
				GLAccount.SETRANGE(GLAccount."No.",BankAccountUsed);
				IF GLAccount.FIND('-') THEN BEGIN
				BankAccountUsedName:=GLAccount.Name;
				END;
				PGAccountUsedName:='';
				GLAccount.RESET;
				GLAccount.SETRANGE(GLAccount."No.",PGAccount);
				IF GLAccount.FIND('-') THEN BEGIN
				PGAccountUsedName:=GLAccount.Name;
				END;
				{ IF UserRec.GET(Payments.Cashier) THEN
				 BEGIN
				 //MESSAGE('%1',Payments.Cashier);
				 UserRec.CALCFIELDS(UserRec.Picture);
				 END;} */
                ApprovalEntries.Reset;
                ApprovalEntries.SetRange(ApprovalEntries."Table ID", 59018);
                ApprovalEntries.SetRange(ApprovalEntries."Document No.", "Request Header1"."No.");
                ApprovalEntries.SetRange(ApprovalEntries.Status, ApprovalEntries.Status::Approved);
                if ApprovalEntries.Find('-') then begin
                    i := 0;
                    repeat
                        i := i + 1;
                        if i = 1 then begin
                            "1stapprover" := ApprovalEntries."Approver ID";
                            "1stapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp1.Get("1stapprover") then
                                UserRecApp1.CalcFields(UserRecApp1.Picture);
                        end;
                        if i = 2 then begin
                            "2ndapprover" := ApprovalEntries."Approver ID";
                            "2ndapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp2.Get("2ndapprover") then
                                UserRecApp2.CalcFields(UserRecApp2.Picture);
                        end;
                        if i = 3 then begin
                            "3rdapprover" := ApprovalEntries."Approver ID";
                            "3rdapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp3.Get("3rdapprover") then
                                UserRecApp3.CalcFields(UserRecApp3.Picture);
                        end;
                    until ApprovalEntries.Next = 0;
                end;
                "Request Header1".CalcFields("Request Header1".Balance, "Request Header1"."Imprest Amount");
                Netamt := "Request Header1"."Imprest Amount" - "Request Header1"."Total Amount Requested";
                InitTextVariable;
                //FormatNoText(NumberText,"Total Amount Requested",CurrencyCodeText);
                FormatNoText(NumberText, "Imprest Amount", CurrencyCodeText);

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    labels
    {
        SerialNo = 'Serial No';
        Date = 'Date';
    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        GLsetup.Get;
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
        end;
        //;
        //ReportsForNavPre;
    end;

    var
        DimValues: Record "Dimension Value";
        CompName: Text[100];
        TypeOfDoc: Text[100];
        RecPayTypes: Record Receipts1;
        BankName: Text[100];
        Banks: Record "Bank Account";
        Bank: Record "Bank Account";
        PayeeBankName: Text[100];
        VendorPG: Record "Vendor Posting Group";
        CustPG: Record "Customer Posting Group";
        FAPG: Record "FA Posting Group";
        BankPG: Record "Bank Account Posting Group";
        PGAccount: Text[50];
        Vend: Record Vendor;
        Cust: Record Customer;
        FA: Record "FA Depreciation Book";
        BankAccountUsed: Text[50];
        BankAccountUsedName: Text[100];
        PGAccountUsedName: Text[50];
        GLAccount: Record "G/L Account";
        CompanyInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        OnesText: array[20] of Text[30];
        TensText: array[10] of Text[30];
        ExponentText: array[5] of Text[30];
        GLsetup: Record "General Ledger Setup";
        NumberText: array[2] of Text[80];
        CurrencyCodeText: Code[10];
        TXT001: label '%1 %2';
        TXT002: label '%1, %2  %3';
        ApprovalEntries: Record "Approval Entry";
        "1stapprover": Text[30];
        "2ndapprover": Text[30];
        i: Integer;
        "1stapproverdate": DateTime;
        "2ndapproverdate": DateTime;
        UserRec: Record "User Setup";
        UserRecApp1: Record "User Setup";
        UserRecApp2: Record "User Setup";
        UserRecApp3: Record "User Setup";
        "3rdapprover": Text[30];
        "3rdapproverdate": DateTime;
        Netamt: Decimal;
        IMPREST_CLAIM_FORMCaptionLbl: label 'CASH PAYMENT VOUCHER';
        Department_CaptionLbl: label 'Department ';
        DescriptionCaptionLbl: label 'Description';
        AmountCaptionLbl: label 'Amount';
        TOTAL_EXPENSESCaptionLbl: label 'TOTAL EXPENSES';
        LESS__ADVANCECaptionLbl: label 'LESS: ADVANCE';
        AMOUNT_DUE_TO__FROM__EMPLOYEECaptionLbl: label 'AMOUNT DUE TO/(FROM) EMPLOYEE';
        PAYMENT_RECEIVED_BYCaptionLbl: label 'PAYMENT RECEIVED BY';
        NAME__________________________________________________CaptionLbl: label 'NAME ..........................................................................';
        SIGNATURE__________________________________________________CaptionLbl: label 'SIGNATURE ..................................................................';
        "DATE _to_account__________________________________________________CaptionLbl": label 'Date to Account:';
        APPROVED_BY_CaptionLbl: label 'APPROVED BY ';
        SIGNATURE_CaptionLbl: label 'SIGNATURE ';
        DATE__________________________________________________Caption_Control1000000036Lbl: label 'DATE .........................................................................';
        CHECKED_BY_CaptionLbl: label 'CHECKED BY ';
        SIGNATURECaptionLbl: label 'SIGNATURE';
        DATE__________________________________________________Caption_Control1000000042Lbl: label 'DATE ........................................................................';
        PREPARED_BYCaptionLbl: label 'PREPARED BY';
        SIGNATURECaption_Control1000000055Lbl: label 'SIGNATURE';
        "ID No__________________________________________________Caption_Control1000000062Lbl": label 'ID No .......................................................................';
        APPROVALCaptionLbl: label 'APPROVAL';
        DeclarationLbl: label 'I declare that the amount taken will be used only for the requested purpose. I will surrender and attache the relevant supporting documents to support my expenditure, and also surrender anyexcess funds to cashier, within two days after the activity date.';
        Declaration2Lbl: label 'I authorize the finance Officer to recover the imprest from my salary if I fail to account within the stipulated time.';
        PayeeLbl: label 'Payee Name';
        Amount_ReqLbl: label 'Amount Requested (Kshs)';
        AmountGivenLbl: label 'Amount Given:';
        AmountInWordsLbl: label 'Amount Given in Words:';
        PurposeLbl: label 'Purpose:';
        Text001: label 'Last Check No. must be filled in.';
        Text002: label 'Filters on %1 and %2 are not allowed.';
        Text003: label 'XXXXXXXXXXXXXXXX';
        Text004: label 'must be entered.';
        Text005: label 'The Bank Account and the General Journal Line must have the same currency.';
        Text006: label 'Salesperson';
        Text007: label 'Purchaser';
        Text008: label 'Both Bank Accounts must have the same currency.';
        Text009: label 'Our Contact';
        Text010: label 'XXXXXXXXXX';
        Text011: label 'XXXX';
        Text012: label 'XX.XXXXXXXXXX.XXXX';
        Text013: label '%1 already exists.';
        Text014: label 'Check for %1 %2';
        Text015: label 'Payment';
        Text016: label 'In the Check report, One Check per Vendor and Document No.\';
        Text017: label 'must not be activated when Applies-to ID is specified in the journal lines.';
        Text018: label 'XXX';
        Text019: label 'Total';
        Text020: label 'The total amount of check %1 is %2. The amount must be positive.';
        Text021: label 'VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID';
        Text022: label 'NON-NEGOTIABLE';
        Text023: label 'Test print';
        Text024: label 'XXXX.XX';
        Text025: label 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
        Text029: label '%1 results in a written number that is too long.';
        Text026: label 'ZERO';
        Text027: label 'HUNDRED';
        Text028: label 'AND';
        Text032: label 'ONE';
        Text033: label 'TWO';
        Text034: label 'THREE';
        Text035: label 'FOUR';
        Text036: label 'FIVE';
        Text037: label 'SIX';
        Text038: label 'SEVEN';
        Text039: label 'EIGHT';
        Text040: label 'NINE';
        Text041: label 'TEN';
        Text042: label 'ELEVEN';
        Text043: label 'TWELVE';
        Text044: label 'THIRTEEN';
        Text045: label 'FOURTEEN';
        Text046: label 'FIFTEEN';
        Text047: label 'SIXTEEN';
        Text048: label 'SEVENTEEN';
        Text049: label 'EIGHTEEN';
        Text050: label 'NINETEEN';
        Text051: label 'TWENTY';
        Text052: label 'THIRTY';
        Text053: label 'FORTY';
        Text054: label 'FIFTY';
        Text055: label 'SIXTY';
        Text056: label 'SEVENTY';
        Text057: label 'EIGHTY';
        Text058: label 'NINETY';
        Text059: label 'THOUSAND';
        Text060: label 'MILLION';
        Text061: label 'BILLION';
        FaxLbl: label 'Fax: %1';
        EmailLbl: label 'Email: %1';
        WebLbl: label 'Web: %1';
        CellLbl: label 'Cell: %1';
        PhoneLbl: label 'Tel: %1';

    procedure FormatNoText(var NoText: array[2] of Text[80]; No: Decimal; CurrencyCode: Code[10])
    var
        PrintExponent: Boolean;
        Ones: Integer;
        Tens: Integer;
        Hundreds: Integer;
        Exponent: Integer;
        NoTextIndex: Integer;
    begin
        Clear(NoText);
        NoTextIndex := 1;
        NoText[1] := '****';
        if No < 1 then
            AddToNoText(NoText, NoTextIndex, PrintExponent, Text026)
        else begin
            for Exponent := 4 downto 1 do begin
                PrintExponent := false;
                Ones := No DIV Power(1000, Exponent - 1);
                Hundreds := Ones DIV 100;
                Tens := (Ones MOD 100) DIV 10;
                Ones := Ones MOD 10;
                if Hundreds > 0 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Hundreds]);
                    AddToNoText(NoText, NoTextIndex, PrintExponent, Text027);
                end;
                if Tens >= 2 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, TensText[Tens]);
                    if Ones > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Ones]);
                end else
                    if (Tens * 10 + Ones) > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Tens * 10 + Ones]);
                if PrintExponent and (Exponent > 1) then
                    AddToNoText(NoText, NoTextIndex, PrintExponent, ExponentText[Exponent]);
                No := No - (Hundreds * 100 + Tens * 10 + Ones) * Power(1000, Exponent - 1);
            end;
        end;
        AddToNoText(NoText, NoTextIndex, PrintExponent, Text028);
        AddToNoText(NoText, NoTextIndex, PrintExponent, Format(No * 100) + '/100');
        if CurrencyCode <> '' then
            AddToNoText(NoText, NoTextIndex, PrintExponent, CurrencyCode);
    end;

    local procedure AddToNoText(var NoText: array[2] of Text[80]; var NoTextIndex: Integer; var PrintExponent: Boolean; AddText: Text[30])
    begin
        PrintExponent := true;
        while StrLen(NoText[NoTextIndex] + ' ' + AddText) > MaxStrLen(NoText[1]) do begin
            NoTextIndex := NoTextIndex + 1;
            if NoTextIndex > ArrayLen(NoText) then
                Error(Text029, AddText);
        end;
        NoText[NoTextIndex] := DelChr(NoText[NoTextIndex] + ' ' + AddText, '<');
    end;

    procedure InitTextVariable()
    begin
        OnesText[1] := Text032;
        OnesText[2] := Text033;
        OnesText[3] := Text034;
        OnesText[4] := Text035;
        OnesText[5] := Text036;
        OnesText[6] := Text037;
        OnesText[7] := Text038;
        OnesText[8] := Text039;
        OnesText[9] := Text040;
        OnesText[10] := Text041;
        OnesText[11] := Text042;
        OnesText[12] := Text043;
        OnesText[13] := Text044;
        OnesText[14] := Text045;
        OnesText[15] := Text046;
        OnesText[16] := Text047;
        OnesText[17] := Text048;
        OnesText[18] := Text049;
        OnesText[19] := Text050;
        TensText[1] := '';
        TensText[2] := Text051;
        TensText[3] := Text052;
        TensText[4] := Text053;
        TensText[5] := Text054;
        TensText[6] := Text055;
        TensText[7] := Text056;
        TensText[8] := Text057;
        TensText[9] := Text058;
        ExponentText[1] := '';
        ExponentText[2] := Text059;
        ExponentText[3] := Text060;
        ExponentText[4] := Text061;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511005_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511005;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
