//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511177_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511177) { }
//type("System.IO.Path"; System_IO_Path51511177) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193584 "Cheque ERC dot matrix"
{
    RDLCLayout = './Layouts/ChequeERCdotmatrix.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Payments; Payments)
        {
            DataItemTableView = sorting(No);
            RequestFilterFields = No;
            column(ReportForNavId_3752; 3752) { } // Autogenerated by ForNav - Do not delete
            column(Payments1_Amount; Payments.Amount)
            {
            }
            column(Payments1_Payments1_Date; Payments.Date)
            {
            }
            column(Payments1_Payments1_Payee; Payments.Payee)
            {
            }
            column(DescriptionLine_1_; DescriptionLine[1])
            {
            }
            column(DescriptionLine_2_; DescriptionLine[2])
            {
            }
            column(Payments_No; Payments.No)
            {
            }
            trigger OnPreDataItem();
            begin
                /*IF CurrReport.PREVIEW THEN
				  ERROR(Text000); */

            end;

            trigger OnAfterGetRecord();
            begin
                //IF Payments1."Cheque Printed" THEN
                //ERROR('This cheque has been printed');
                Payments.CalcFields(Payments."Total Amount");
                Payments."Net Amount" := Payments."Total Amount";
                Payments.Amount := Payments."Total Amount";
                DimValues.Reset;
                DimValues.SetRange(DimValues."Dimension Code", 'BRANCHES');
                DimValues.SetRange(DimValues.Code, Payments."Branch Code");
                if DimValues.Find('-') then begin
                    CompName := DimValues.Name;
                end
                else begin
                    CompName := '';
                end;
                if Payments.Currency <> '' then
                    CurrencyCodeText := Payments.Currency
                else
                    CurrencyCodeText := GLSetup."LCY Code";
                /*Banks.RESET;
				Banks.SETRANGE(Banks.Code,Payments1."KBA Bank Code");
				IF Banks.FIND('-') THEN BEGIN
				BankName:=Banks.Description;
				END
				ELSE BEGIN
				BankName:='';
				END;
				Bank.RESET;
				Bank.SETRANGE(Bank."No.",Payments1."Paying Bank Account");
				IF Bank.FIND('-') THEN BEGIN
				PayeeBankName:=Bank.Name;
				END
				ELSE BEGIN
				PayeeBankName:='';
				END;*/
                PGAccount := '';
                if Payments."Account Type" = Payments."account type"::"G/L Account" then begin
                    PGAccount := Payments."Account No.";
                end;
                if Payments."Account Type" = Payments."account type"::"Bank Account" then begin
                    Bank.Reset;
                    Bank.SetRange(Bank."No.", Payments."Account No.");
                    if Bank.Find('-') then begin
                        Bank.TestField(Bank."Bank Acc. Posting Group");
                        BankPG.Reset;
                        BankPG.SetRange(BankPG.Code, Bank."Bank Acc. Posting Group");
                        if BankPG.Find('-') then begin
                            PGAccount := BankPG."G/L Account No.";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::Vendor then begin
                    Vend.Reset;
                    Vend.SetRange(Vend."No.", Payments."Account No.");
                    if Vend.Find('-') then begin
                        Vend.TestField(Vend."Vendor Posting Group");
                        VendorPG.Reset;
                        VendorPG.SetRange(VendorPG.Code, Vend."Vendor Posting Group");
                        if VendorPG.Find('-') then begin
                            PGAccount := VendorPG."Payables Account";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::Customer then begin
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", Payments."Account No.");
                    if Cust.Find('-') then begin
                        Cust.TestField(Cust."Customer Posting Group");
                        CustPG.Reset;
                        CustPG.SetRange(CustPG.Code, Cust."Customer Posting Group");
                        if CustPG.Find('-') then begin
                            PGAccount := CustPG."Receivables Account";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::"Fixed Asset" then begin
                    FA.Reset;
                    FA.SetRange(FA."FA No.", Payments."Account No.");
                    if FA.Find('-') then begin
                        FA.TestField(FA."FA Posting Group");
                        FAPG.Reset;
                        FAPG.SetRange(FAPG.Code, FA."FA Posting Group");
                        if FAPG.Find('-') then begin
                            PGAccount := FAPG."Acquisition Cost Account";
                        end;
                    end;
                end;
                BankAccountUsed := '';
                //Payments1.TESTFIELD(Payments1."Pay Mode");
                if Payments."Pay Mode" = 'CASH' then begin
                    BankAccountUsed := Payments."Cashier Bank Account";
                end
                else begin
                    BankAccountUsed := Payments."Paying Bank Account";
                end;
                BankAccountUsedName := '';
                Bank.Reset;
                Bank.SetRange(Bank."No.", BankAccountUsed);
                if Bank.Find('-') then begin
                    Bank.TestField(Bank."Bank Acc. Posting Group");
                    BankPG.Reset;
                    BankPG.SetRange(BankPG.Code, Bank."Bank Acc. Posting Group");
                    if BankPG.Find('-') then begin
                        BankAccountUsed := BankPG."G/L Account No.";
                    end;
                    //BankAccountUsedName:=Bank.Name;
                end;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", BankAccountUsed);
                if GLAccount.Find('-') then begin
                    BankAccountUsedName := GLAccount.Name;
                end;
                PGAccountUsedName := '';
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", PGAccount);
                if GLAccount.Find('-') then begin
                    PGAccountUsedName := GLAccount.Name;
                end;
                FormatNoText(DescriptionLine, Amount, Currency);
                Payments."Cheque Printed" := true;
                Payments.Modify;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        GLSetup.Get;
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
        end;
        InitTextVariable;
        //;
        //ReportsForNavPre;
    end;

    var
        DimValues: Record "Dimension Value";
        CompName: Text[100];
        TypeOfDoc: Text[100];
        BankName: Text[100];
        Bank: Record "Bank Account";
        PayeeBankName: Text[100];
        VendorPG: Record "Vendor Posting Group";
        CustPG: Record "Customer Posting Group";
        FAPG: Record "FA Posting Group";
        BankPG: Record "Bank Account Posting Group";
        PGAccount: Text[50];
        Vend: Record Vendor;
        Cust: Record Customer;
        FA: Record "FA Depreciation Book";
        BankAccountUsed: Text[50];
        BankAccountUsedName: Text[100];
        PGAccountUsedName: Text[50];
        GLAccount: Record "G/L Account";
        CompanyInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        OnesText: array[20] of Text[30];
        NumberText: array[2] of Text[80];
        CurrencyCodeText: Code[10];
        TXT001: label '%1 %2';
        TXT002: label '%1, %2  %3';
        Text000: label 'Preview is not allowed.';
        Text001: label 'Last Check No. must be filled in.';
        Text002: label 'Filters on %1 and %2 are not allowed.';
        Text003: label 'XXXXXXXXXXXXXXXX';
        Text004: label 'must be entered.';
        Text005: label 'The Bank Account and the General Journal Line must have the same currency.';
        Text006: label 'Salesperson';
        Text007: label 'Purchaser';
        Text008: label 'Both Bank Accounts must have the same currency.';
        Text009: label 'Our Contact';
        Text010: label 'XXXXXXXXXX';
        Text011: label 'XXXX';
        Text012: label 'XX.XXXXXXXXXX.XXXX';
        Text013: label '%1 already exists.';
        Text014: label 'Check for %1 %2';
        Text015: label 'Payment';
        Text016: label 'In the Check report, One Check per Vendor and Document No.\';
        Text017: label 'must not be activated when Applies-to ID is specified in the journal lines.';
        Text018: label 'XXX';
        Text019: label 'Total';
        Text020: label 'The total amount of check %1 is %2. The amount must be positive.';
        Text021: label 'VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID';
        Text022: label 'NON-NEGOTIABLE';
        Text023: label 'Test print';
        Text024: label 'XXXX.XX';
        Text025: label 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
        Text026: label 'ZERO';
        Text027: label 'HUNDRED';
        Text028: label 'AND';
        Text029: label '%1 results in a written number that is too long.';
        Text030: label ' is already applied to %1 %2 for customer %3.';
        Text031: label ' is already applied to %1 %2 for vendor %3.';
        Text032: label 'ONE';
        Text033: label 'TWO';
        Text034: label 'THREE';
        Text035: label 'FOUR';
        Text036: label 'FIVE';
        Text037: label 'SIX';
        Text038: label 'SEVEN';
        Text039: label 'EIGHT';
        Text040: label 'NINE';
        Text041: label 'TEN';
        Text042: label 'ELEVEN';
        Text043: label 'TWELVE';
        Text044: label 'THIRTEEN';
        Text045: label 'FOURTEEN';
        Text046: label 'FIFTEEN';
        Text047: label 'SIXTEEN';
        Text048: label 'SEVENTEEN';
        Text049: label 'EIGHTEEN';
        Text050: label 'NINETEEN';
        Text051: label 'TWENTY';
        Text052: label 'THIRTY';
        Text053: label 'FORTY';
        Text054: label 'FIFTY';
        Text055: label 'SIXTY';
        Text056: label 'SEVENTY';
        Text057: label 'EIGHTY';
        Text058: label 'NINETY';
        Text059: label 'THOUSAND';
        Text060: label 'MILLION';
        Text061: label 'BILLION';
        Text062: label 'G/L Account,Customer,Vendor,Bank Account';
        Text063: label 'Net Amount %1';
        Text064: label '%1 must not be %2 for %3 %4.';
        TensText: array[10] of Text[30];
        ExponentText: array[5] of Text[30];
        BalancingType: Option "G/L Account",Customer,Vendor,"Bank Account";
        BalancingNo: Code[20];
        ContactText: Text[30];
        CheckNoText: Text[30];
        CheckDateText: Text[30];
        CheckAmountText: Text[30];
        DescriptionLine: array[2] of Text[46];
        DocType: Text[30];
        DocNo: Text[30];
        VoidText: Text[30];
        LineAmount: Decimal;
        LineDiscount: Decimal;
        TotalLineAmount: Decimal;
        TotalLineDiscount: Decimal;
        RemainingAmount: Decimal;
        CurrentLineAmount: Decimal;
        UseCheckNo: Code[20];
        FoundLast: Boolean;
        ReprintChecks: Boolean;
        TestPrint: Boolean;
        FirstPage: Boolean;
        OneCheckPrVendor: Boolean;
        FoundNegative: Boolean;
        ApplyMethod: Option Payment,OneLineOneEntry,OneLineID,MoreLinesOneEntry;
        ChecksPrinted: Integer;
        HighestLineNo: Integer;
        PreprintedStub: Boolean;
        TotalText: Text[10];
        DocDate: Date;
        i: Integer;
        CurrencyCode2: Code[10];
        NetAmount: Text[30];
        CurrencyExchangeRate: Record "Currency Exchange Rate";
        LineAmount2: Decimal;
        GLSetup: Record "General Ledger Setup";
        postion: Integer;
        AmountText: Text[30];
        AmtString: Text[30];
        LenofAmt: Decimal;
        "1000Ms": Text[50];
        "10Ms": Text[50];
        Ms: Text[50];
        "100Ts": Text[50];
        "10Ts": Text[50];
        Ts: Text[50];
        "100Hs": Text[50];
        "10Hs": Text[50];
        Units: Text[50];
        "10S": Text[50];
        show: Integer;
        J: Integer;
        newValueText: Text[30];
        NewValue: Integer;
        CHECKAMOUNTICEA: Decimal;
        PaymentRec: Record PaymentsX1;

    procedure FormatNoText(var NoText: array[2] of Text[56]; No: Decimal; CurrencyCode: Code[10])
    var
        PrintExponent: Boolean;
        Ones: Integer;
        Tens: Integer;
        Hundreds: Integer;
        Exponent: Integer;
        NoTextIndex: Integer;
    begin
        Clear(NoText);
        NoTextIndex := 1;
        NoText[1] := '***';
        if No < 1 then
            AddToNoText(NoText, NoTextIndex, PrintExponent, Text026)
        else begin
            for Exponent := 4 downto 1 do begin
                PrintExponent := false;
                Ones := No DIV Power(1000, Exponent - 1);
                Hundreds := Ones DIV 100;
                Tens := (Ones MOD 100) DIV 10;
                Ones := Ones MOD 10;
                if Hundreds > 0 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Hundreds]);
                    AddToNoText(NoText, NoTextIndex, PrintExponent, Text027);
                end;
                if Tens >= 2 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, TensText[Tens]);
                    if Ones > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Ones]);
                end else
                    if (Tens * 10 + Ones) > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Tens * 10 + Ones]);
                if PrintExponent and (Exponent > 1) then
                    AddToNoText(NoText, NoTextIndex, PrintExponent, ExponentText[Exponent]);
                No := No - (Hundreds * 100 + Tens * 10 + Ones) * Power(1000, Exponent - 1);
            end;
        end;
        AddToNoText(NoText, NoTextIndex, PrintExponent, Text028);
        AddToNoText(NoText, NoTextIndex, PrintExponent, Format(No * 100) + ' CENTS');
        if CurrencyCode <> '' then
            AddToNoText(NoText, NoTextIndex, PrintExponent, CurrencyCode);
    end;

    local procedure AddToNoText(var NoText: array[2] of Text[56]; var NoTextIndex: Integer; var PrintExponent: Boolean; AddText: Text[30])
    begin
        PrintExponent := true;
        //MESSAGE('%1', MAXSTRLEN(NoText[1]));
        while StrLen(NoText[NoTextIndex] + ' ' + AddText) > MaxStrLen(NoText[1]) do begin
            NoTextIndex := NoTextIndex + 1;
            if NoTextIndex > ArrayLen(NoText) then
                Error(Text029, AddText);
        end;
        NoText[NoTextIndex] := DelChr(NoText[NoTextIndex] + ' ' + AddText, '<');
    end;

    local procedure CustUpdateAmounts(var CustLedgEntry2: Record "Cust. Ledger Entry"; RemainingAmount2: Decimal)
    begin
        /*IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
		   (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
		THEN BEGIN
		  GenJnlLine3.RESET;
		  GenJnlLine3.SETCURRENTKEY(
			"Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
		  GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Customer);
		  GenJnlLine3.SETRANGE("Account No.",CustLedgEntry2."Customer No.");
		  GenJnlLine3.SETRANGE("Applies-to Doc. Type",CustLedgEntry2."Document Type");
		  GenJnlLine3.SETRANGE("Applies-to Doc. No.",CustLedgEntry2."Document No.");
		  IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
			GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
		  ELSE
			GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");
		  IF CustLedgEntry2."Document Type" <> CustLedgEntry2."Document Type"::" " THEN
			IF GenJnlLine3.FIND('-') THEN
			  GenJnlLine3.FIELDERROR(
				"Applies-to Doc. No.",
				STRSUBSTNO(
				  Text030,
				  CustLedgEntry2."Document Type",CustLedgEntry2."Document No.",
				  CustLedgEntry2."Customer No."));
		END;
		DocType := FORMAT(CustLedgEntry2."Document Type");
		DocNo := CustLedgEntry2."Document No.";
		DocDate := CustLedgEntry2."Posting Date";
		CurrencyCode2 := CustLedgEntry2."Currency Code";
		CustLedgEntry2.CALCFIELDS("Remaining Amount");
		LineAmount := -(CustLedgEntry2."Remaining Amount" - CustLedgEntry2."Remaining Pmt. Disc. Possible"-
		  CustLedgEntry2."Accepted Payment Tolerance");
		LineAmount2 :=
		  ROUND(
			ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,LineAmount),
			Currency."Amount Rounding Precision");
		IF ((CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::Invoice) AND
		   (GenJnlLine."Posting Date" <= CustLedgEntry2."Pmt. Discount Date") AND
		   (LineAmount2 <= RemainingAmount2)) OR CustLedgEntry2."Accepted Pmt. Disc. Tolerance"
		THEN BEGIN
		  LineDiscount := -CustLedgEntry2."Remaining Pmt. Disc. Possible";
		  IF CustLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
			LineDiscount := LineDiscount - CustLedgEntry2."Accepted Payment Tolerance";
		END ELSE BEGIN
		  IF RemainingAmount2 >=
			 ROUND(
			  -(ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
				CustLedgEntry2."Remaining Amount")),Currency."Amount Rounding Precision")
		  THEN
			LineAmount2 :=
			  ROUND(
				-(ExchangeAmt(CustLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
				  CustLedgEntry2."Remaining Amount")),Currency."Amount Rounding Precision")
		  ELSE BEGIN
			LineAmount2 := RemainingAmount2;
			LineAmount :=
			  ROUND(
				ExchangeAmt(CustLedgEntry2."Posting Date",CurrencyCode2,GenJnlLine."Currency Code",
				LineAmount2),Currency."Amount Rounding Precision");
		  END;
		  LineDiscount := 0;
		END; */

    end;

    local procedure VendUpdateAmounts(var VendLedgEntry2: Record "Vendor Ledger Entry"; RemainingAmount2: Decimal)
    begin
        /*IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
		   (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
		THEN BEGIN
		  GenJnlLine3.RESET;
		  GenJnlLine3.SETCURRENTKEY(
			"Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
		  GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Vendor);
		  GenJnlLine3.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
		  GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
		  GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
		  IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
			GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
		  ELSE
			GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");
		  IF VendLedgEntry2."Document Type" <> VendLedgEntry2."Document Type"::" " THEN
			IF GenJnlLine3.FIND('-') THEN
			  GenJnlLine3.FIELDERROR(
				"Applies-to Doc. No.",
				STRSUBSTNO(
				  Text031,
				  VendLedgEntry2."Document Type",VendLedgEntry2."Document No.",
				  VendLedgEntry2."Vendor No."));
		END;
		DocType := FORMAT(VendLedgEntry2."Document Type");
		DocNo := VendLedgEntry2."Document No.";
		DocDate := VendLedgEntry2."Posting Date";
		CurrencyCode2 := VendLedgEntry2."Currency Code";
		VendLedgEntry2.CALCFIELDS("Remaining Amount");
		LineAmount := -(VendLedgEntry2."Remaining Amount" - VendLedgEntry2."Remaining Pmt. Disc. Possible" -
		  VendLedgEntry2."Accepted Payment Tolerance");
		LineAmount2 :=
		  ROUND(
			ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,LineAmount),
			Currency."Amount Rounding Precision");
		IF ((VendLedgEntry2."Document Type" = VendLedgEntry2."Document Type"::Invoice) AND
		   (GenJnlLine."Posting Date" <= VendLedgEntry2."Pmt. Discount Date") AND
		   (LineAmount2 <= RemainingAmount2)) OR VendLedgEntry2."Accepted Pmt. Disc. Tolerance"
		THEN BEGIN
		  LineDiscount := -VendLedgEntry2."Remaining Pmt. Disc. Possible";
		  IF VendLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
			LineDiscount := LineDiscount - VendLedgEntry2."Accepted Payment Tolerance";
		END ELSE BEGIN
		 IF RemainingAmount2 >=
			 ROUND(
			  -(ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
				VendLedgEntry2."Remaining Amount")),Currency."Amount Rounding Precision")
		  THEN
			LineAmount2 :=
			  ROUND(
				-(ExchangeAmt(VendLedgEntry2."Posting Date",GenJnlLine."Currency Code",CurrencyCode2,
				  VendLedgEntry2."Remaining Amount")),Currency."Amount Rounding Precision")
		  ELSE BEGIN
			LineAmount2 := RemainingAmount2;
			LineAmount :=
			  ROUND(
				ExchangeAmt(VendLedgEntry2."Posting Date",CurrencyCode2,GenJnlLine."Currency Code",
				LineAmount2),Currency."Amount Rounding Precision");
		  END;
		  LineDiscount := 0;
		END;*/

    end;

    procedure InitTextVariable()
    begin
        OnesText[1] := Text032;
        OnesText[2] := Text033;
        OnesText[3] := Text034;
        OnesText[4] := Text035;
        OnesText[5] := Text036;
        OnesText[6] := Text037;
        OnesText[7] := Text038;
        OnesText[8] := Text039;
        OnesText[9] := Text040;
        OnesText[10] := Text041;
        OnesText[11] := Text042;
        OnesText[12] := Text043;
        OnesText[13] := Text044;
        OnesText[14] := Text045;
        OnesText[15] := Text046;
        OnesText[16] := Text047;
        OnesText[17] := Text048;
        OnesText[18] := Text049;
        OnesText[19] := Text050;
        TensText[1] := '';
        TensText[2] := Text051;
        TensText[3] := Text052;
        TensText[4] := Text053;
        TensText[5] := Text054;
        TensText[6] := Text055;
        TensText[7] := Text056;
        TensText[8] := Text057;
        TensText[9] := Text058;
        ExponentText[1] := '';
        ExponentText[2] := Text059;
        ExponentText[3] := Text060;
        ExponentText[4] := Text061;
    end;

    procedure InitializeRequest(BankAcc: Code[20]; LastCheckNo: Code[20]; NewOneCheckPrVend: Boolean; NewReprintChecks: Boolean; NewTestPrint: Boolean; NewPreprintedStub: Boolean)
    begin
        if BankAcc <> '' then
;
    end;


    procedure ExchangeAmt(PostingDate: Date; CurrencyCode: Code[10]; CurrencyCode2: Code[10]; Amount: Decimal) Amount2: Decimal
    begin
        /*IF (CurrencyCode <> '')  AND (CurrencyCode2 = '') THEN
		   Amount2 :=
			 CurrencyExchangeRate.ExchangeAmtLCYToFCY(
			   PostingDate,CurrencyCode,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode))
		ELSE IF (CurrencyCode = '') AND (CurrencyCode2 <> '') THEN
		  Amount2 :=
			CurrencyExchangeRate.ExchangeAmtFCYToLCY(
			  PostingDate,CurrencyCode2,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode2))
		ELSE IF (CurrencyCode <> '') AND (CurrencyCode2 <> '') AND (CurrencyCode <> CurrencyCode2) THEN
		  Amount2 := CurrencyExchangeRate.ExchangeAmtFCYToFCY(PostingDate,CurrencyCode2,CurrencyCode,Amount)
		ELSE
		  Amount2 := Amount;*/

    end;

    procedure GetNosInWords(var Amount: Decimal)
    begin
        //Less than 10
        J := 1;
        Amount := ROUND(Abs(Amount), 1, '>');
        Evaluate(AmountText, Format(Amount));
        AmountText := DelChr(AmountText, '=', ',');
        //1,000,000,000;
        if Amount <= 1000000000 then begin
            show := Amount DIV 100000000;
            if show > 0 then begin
                while J < 10 do begin
                    newValueText := '';
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    if J = 1 then
                        "1000Ms" := WriteNo(NewValue);
                    if J = 2 then
                        "10Ms" := WriteNo(NewValue);
                    if J = 3 then
                        Ms := WriteNo(NewValue);
                    if J = 4 then
                        "100Ts" := WriteNo(NewValue);
                    if J = 5 then
                        "10Ts" := WriteNo(NewValue);
                    if J = 6 then
                        Ts := WriteNo(NewValue);
                    if J = 7 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 8 then
                        "10S" := WriteNo(NewValue);
                    if J = 9 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        J := 1;
        // 100,000,000
        if Amount < 100000000 then begin
            show := Amount DIV 10000000;
            if show > 0 then begin
                while J < 9 do begin
                    newValueText := '';
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    if J = 1 then
                        "10Ms" := WriteNo(NewValue);
                    if J = 2 then
                        Ms := WriteNo(NewValue);
                    if J = 3 then
                        "100Ts" := WriteNo(NewValue);
                    if J = 4 then
                        "10Ts" := WriteNo(NewValue);
                    if J = 5 then
                        Ts := WriteNo(NewValue);
                    if J = 6 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 7 then
                        "10S" := WriteNo(NewValue);
                    if J = 8 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        J := 1;
        // 10,000,000
        if Amount < 10000000 then begin
            show := Amount DIV 1000000;
            if show > 0 then begin
                while J < 8 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    if J = 1 then
                        Ms := WriteNo(NewValue);
                    if J = 2 then
                        "100Ts" := WriteNo(NewValue);
                    if J = 3 then
                        "10Ts" := WriteNo(NewValue);
                    if J = 4 then
                        Ts := WriteNo(NewValue);
                    if J = 5 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 6 then
                        "10S" := WriteNo(NewValue);
                    if J = 7 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 1,000,000
        J := 1;
        if Amount < 1000000 then begin
            show := Amount DIV 100000;
            if show > 0 then begin
                while J < 7 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    Ms := 'ZERO';
                    if J = 1 then
                        "100Ts" := WriteNo(NewValue);
                    if J = 2 then
                        "10Ts" := WriteNo(NewValue);
                    if J = 3 then
                        Ts := WriteNo(NewValue);
                    if J = 4 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 5 then
                        "10S" := WriteNo(NewValue);
                    if J = 6 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 100,000
        J := 1;
        if Amount < 100000 then begin
            show := Amount DIV 10000;
            if show > 0 then begin
                while J < 6 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    Ms := 'ZERO';
                    "100Ts" := 'ZERO';
                    if J = 1 then
                        "10Ts" := WriteNo(NewValue);
                    if J = 2 then
                        Ts := WriteNo(NewValue);
                    if J = 3 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 4 then
                        "10S" := WriteNo(NewValue);
                    if J = 5 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 10,000
        J := 1;
        if Amount < 10000 then begin
            show := Amount DIV 1000;
            if show > 0 then begin
                while J < 5 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    Ms := 'ZERO';
                    "100Ts" := 'ZERO';
                    "10Ts" := 'ZERO';
                    if J = 1 then
                        Ts := WriteNo(NewValue);
                    if J = 2 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 3 then
                        "10S" := WriteNo(NewValue);
                    if J = 4 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 1000
        J := 1;
        if Amount < 1000 then begin
            show := Amount DIV 100;
            if show > 0 then begin
                while J < 4 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    Ms := 'ZERO';
                    "100Ts" := 'ZERO';
                    "10Ts" := 'ZERO';
                    Ts := 'ZERO';
                    if J = 1 then
                        "100Hs" := WriteNo(NewValue);
                    if J = 2 then
                        "10S" := WriteNo(NewValue);
                    if J = 3 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 100
        J := 1;
        if Amount < 100 then begin
            show := Amount DIV 10;
            if show > 0 then begin
                while J < 3 do begin
                    newValueText := CopyStr(AmountText, J, 1);
                    Evaluate(NewValue, Format(newValueText));
                    "1000Ms" := 'ZERO';
                    "10Ms" := 'ZERO';
                    Ms := 'ZERO';
                    "100Ts" := 'ZERO';
                    "10Ts" := 'ZERO';
                    Ts := 'ZERO';
                    "100Hs" := 'ZERO';
                    if J = 1 then
                        "10S" := WriteNo(NewValue);
                    if J = 2 then
                        Units := WriteNo(NewValue);
                    J := J + 1;
                end;
            end;
        end;
        // 10
        J := 1;
        if Amount < 10 then begin
            NewValue := Amount;
            "1000Ms" := 'ZERO';
            "10Ms" := 'ZERO';
            Ms := 'ZERO';
            "100Ts" := 'ZERO';
            "10Ts" := 'ZERO';
            Ts := 'ZERO';
            "100Hs" := 'ZERO';
            "10S" := 'ZERO';
            Units := WriteNo(NewValue);
        end;
    end;

    procedure WriteNo(NotoCheck: Integer) WriteNo: Code[30]
    begin
        if NotoCheck < 1 then
            WriteNo := 'ZERO';
        if NotoCheck = 1 then
            WriteNo := 'ONE';
        if NotoCheck = 2 then
            WriteNo := 'TWO';
        if NotoCheck = 3 then
            WriteNo := 'THREE';
        if NotoCheck = 4 then
            WriteNo := 'FOUR';
        if NotoCheck = 5 then
            WriteNo := 'FIVE';
        if NotoCheck = 6 then
            WriteNo := 'SIX';
        if NotoCheck = 7 then
            WriteNo := 'SEVEN';
        if NotoCheck = 8 then
            WriteNo := 'EIGHT';
        if NotoCheck = 9 then
            WriteNo := 'NINE';
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511177_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511177;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
