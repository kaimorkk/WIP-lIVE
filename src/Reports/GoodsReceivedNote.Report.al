//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
    //assembly("ForNav.Reports.7.3.0.2559")
    // {
    //   type(ForNav.Report_7_3_0_2559; ForNavReport51511265_v7_3_0_2559) { }
    //}
    //assembly("mscorlib")
    //  {
    //    Version = '4.0.0.0';
    //    type("System.IO.Stream"; SystemIOStream51511265) { }
    //type("System.IO.Path"; System_IO_Path51511265) { }
    //   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193655 "Goods Received Note"
{
    Caption = 'Purchase - Receipt';
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/GoodsReceivedNote.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Purch. Rcpt. Header"; "Purch. Rcpt. Header")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Buy-from Vendor No.", "No. Printed";
            RequestFilterHeading = 'Posted Purchase Receipt';
            column(ReportForNavId_2822; 2822) { } // Autogenerated by ForNav - Do not delete
            column(Purch__Rcpt__Header_No_; "Purch. Rcpt. Header"."No.")
            {
            }
            dataitem(CopyLoop; Integer)
            {
                DataItemTableView = sorting(Number);
                column(ReportForNavId_5701; 5701) { } // Autogenerated by ForNav - Do not delete
                dataitem(PageLoop; Integer)
                {
                    DataItemTableView = sorting(Number) where(Number = const(1));
                    column(ReportForNavId_6455; 6455) { } // Autogenerated by ForNav - Do not delete
                    column(GRN_No; "Purch. Rcpt. Header"."No.")
                    {
                    }
                    column(CompInfo_Name; CompInfo.Name)
                    {
                    }
                    column(CompInfo_Picture; CompInfo.Picture)
                    {
                    }
                    column(CompInfo_Address; CompInfo.Address)
                    {
                    }
                    column(CompInfo_Address2; CompInfo."Address 2")
                    {
                    }
                    column(CompInfo_City; CompInfo.City)
                    {
                    }
                    column(CompInfo_Phone_No; CompInfo."Phone No.")
                    {
                    }
                    column(CompInfo_Fax_No; CompInfo."Fax No.")
                    {
                    }
                    column(CompInfo_Post_Code; CompInfo."Post Code")
                    {
                    }
                    column(CompInfo_Fax_NoCaption; CompInfo.FieldCaption(CompInfo."Fax No."))
                    {
                    }
                    column(CompInfo_Phone_NoCaption; PhoneLbl)
                    {
                    }
                    column(VendAddr_1_; VendAddr[1])
                    {
                    }
                    column(LPO_LSO_No; "Purch. Rcpt. Header"."Order No.")
                    {
                    }
                    column(GOODS_RECEIVED_NOTECaption; GOODS_RECEIVED_NOTECaptionLbl)
                    {
                    }
                    column(No_Caption; No_CaptionLbl)
                    {
                    }
                    column(FROM___SUPPLIER_Caption; FROM___SUPPLIER_CaptionLbl)
                    {
                    }
                    column(EmptyStringCaption; EmptyStringCaptionLbl)
                    {
                    }
                    column(ORDER_NO_Caption; ORDER_NO_CaptionLbl)
                    {
                    }
                    column(EmptyStringCaption_Control1000000004; EmptyStringCaption_Control1000000004Lbl)
                    {
                    }
                    column(Issuing_Officer_________________________________Signature__________________________Date_______________Caption; Issuing_Officer_________________________________Signature__________________________Date_______________CaptionLbl)
                    {
                    }
                    column(CoName; CoName)
                    {
                    }
                    column(Certfication; Text006)
                    {
                    }
                    column(ReceivingOfficer; Text007)
                    {
                    }
                    column(AccountNo; Text008)
                    {
                    }
                    column(Date_Received; Text009)
                    {
                    }
                    column(POBox; Text010)
                    {
                    }
                    column(Posting_Date_; "Purch. Rcpt. Header"."Posting Date")
                    {
                    }
                    dataitem("Purch. Rcpt. Line"; "Purch. Rcpt. Line")
                    {
                        DataItemLink = "Document No." = field("No.");
                        DataItemLinkReference = "Purch. Rcpt. Header";
                        DataItemTableView = sorting("Document No.", "Line No.");
                        column(ReportForNavId_3042; 3042) { } // Autogenerated by ForNav - Do not delete
                        column(Purch__Rcpt__Line__No__; "Purch. Rcpt. Line"."No.")
                        {
                        }
                        column(Purch__Rcpt__Line_Description; "Purch. Rcpt. Line".Description)
                        {
                        }
                        column(Purch__Rcpt__Line__Unit_of_Measure_; "Purch. Rcpt. Line"."Unit of Measure")
                        {
                        }
                        column(Purch__Rcpt__Line_Quantity; "Purch. Rcpt. Line".Quantity)
                        {
                        }
                        column(Quantity__Purch__Rcpt__Line___Unit_Cost__LCY__; Quantity * "Purch. Rcpt. Line"."Unit Cost (LCY)")
                        {
                        }
                        column(Purch__Rcpt__Line__Purch__Rcpt__Line___Direct_Unit_Cost_; "Purch. Rcpt. Line"."Direct Unit Cost")
                        {
                        }
                        column(TOTValue; TOTValue)
                        {
                        }
                        column(Purch__Rcpt__Header___User_ID_; "Purch. Rcpt. Header"."User ID")
                        {
                        }
                        column(Purch__Rcpt__Header___Posting_Date_; "Purch. Rcpt. Header"."Posting Date")
                        {
                        }
                        column(UserSetup_Picture; UserSetup.Picture)
                        {
                        }
                        column(AMOUNTCaption; AMOUNTCaptionLbl)
                        {
                        }
                        column(NO_Caption_Control1102760001; NO_Caption_Control1102760001Lbl)
                        {
                        }
                        column(DESCRIPTIONCaption; DESCRIPTIONCaptionLbl)
                        {
                        }
                        column(QUANTITY_RECEIVEDCaption; QUANTITY_RECEIVEDCaptionLbl)
                        {
                        }
                        column(UNIT_OF_MEASURECaption; UNIT_OF_MEASURECaptionLbl)
                        {
                        }
                        column(UNIT_COSTCaption; UNIT_COSTCaptionLbl)
                        {
                        }
                        column(TOTALCaption; TOTALCaptionLbl)
                        {
                        }
                        column(Purch__Rcpt__Line_Document_No_; "Purch. Rcpt. Line"."Document No.")
                        {
                        }
                        column(Purch__Rcpt__Line_Line_No_; "Purch. Rcpt. Line"."Line No.")
                        {
                        }
                        dataitem(DimensionLoop2; Integer)
                        {
                            DataItemTableView = sorting(Number) where(Number = filter(1 ..));
                            column(ReportForNavId_3591; 3591) { } // Autogenerated by ForNav - Do not delete
                            trigger OnPreDataItem();
                            begin
                                if not ShowInternalInfo then
                                    CurrReport.Break;
                            end;

                            trigger OnAfterGetRecord();
                            begin
                                /*
								IF Number = 1 THEN BEGIN
								  IF NOT PostedDocDim2.FIND('-') THEN
									CurrReport.BREAK;
								END ELSE
								  IF NOT Continue THEN
									CurrReport.BREAK;
								CLEAR(DimText);
								Continue := FALSE;
								REPEAT
								  OldDimText := DimText;
								  IF DimText = '' THEN
									DimText := STRSUBSTNO(
									  '%1 - %2',PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code")
								  ELSE
									DimText :=
									  STRSUBSTNO(
										'%1; %2 - %3',DimText,
										PostedDocDim2."Dimension Code",PostedDocDim2."Dimension Value Code");
								  IF STRLEN(DimText) > MAXSTRLEN(OldDimText) THEN BEGIN
									DimText := OldDimText;
									Continue := TRUE;
									EXIT;
								  END;
								UNTIL (PostedDocDim2.NEXT = 0);
								 */

                            end;

                        }
                        trigger OnPreDataItem();
                        begin
                            MoreLines := Find('+');
                            while MoreLines and (Description = '') and ("No." = '') and (Quantity = 0) do
                                MoreLines := Next(-1) <> 0;
                            if not MoreLines then
                                CurrReport.Break;
                            SetRange("Line No.", 0, "Line No.");
                            TOTValue := 0;
                            RecSeQ := 0;
                        end;

                        trigger OnAfterGetRecord();
                        begin
                            if (not ShowCorrectionLines) and Correction then
                                CurrReport.Skip;
                            /*
							PostedDocDim2.SETRANGE("Table ID",DATABASE::"Purch. Rcpt. Line");
							PostedDocDim2.SETRANGE("Document No.","Purch. Rcpt. Line"."Document No.");
							PostedDocDim2.SETRANGE("Line No.","Purch. Rcpt. Line"."Line No.");
							 */  //TOTALS
                            TOTValue += ("Purch. Rcpt. Line".Quantity * "Purch. Rcpt. Line"."Unit Cost (LCY)");
                            RecSeQ := RecSeQ + 1;

                        end;

                    }
                    dataitem(Total; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_3476; 3476) { } // Autogenerated by ForNav - Do not delete
                        trigger OnPreDataItem();
                        begin
                            if "Purch. Rcpt. Header"."Buy-from Vendor No." = "Purch. Rcpt. Header"."Pay-to Vendor No." then
                                CurrReport.Break;
                        end;

                    }
                    dataitem(Total2; Integer)
                    {
                        DataItemTableView = sorting(Number) where(Number = const(1));
                        column(ReportForNavId_3363; 3363) { } // Autogenerated by ForNav - Do not delete
                    }
                    trigger OnAfterGetRecord();
                    begin
                        CompInfo.Get;
                        CompInfo.CalcFields(Picture);
                    end;

                }
                trigger OnPreDataItem();
                begin
                    NoOfLoops := Abs(NoOfCopies) + 1;
                    CopyText := '';
                    SetRange(Number, 1, NoOfLoops);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Number > 1 then
                        CopyText := Text001;

                end;

                trigger OnPostDataItem();
                begin
                    if not CurrReport.Preview then
                        RcptCountPrinted.Run("Purch. Rcpt. Header");
                end;

            }
            trigger OnAfterGetRecord();
            begin
                //CurrReport.Language := Language.GetLanguageID("Language Code");
                CompanyInfo.Get;
                if RespCenter.Get("Responsibility Center") then begin
                    FormatAddr.RespCenter(CompanyAddr, RespCenter);
                    CompanyInfo."Phone No." := RespCenter."Phone No.";
                    CompanyInfo."Fax No." := RespCenter."Fax No.";
                end else begin
                    FormatAddr.Company(CompanyAddr, CompanyInfo);
                end;
                if CompanyInfo.Get then
                    CoName := CompanyInfo.Name;
                //PostedDocDim1.SETRANGE("Table ID",DATABASE::"Purch. Rcpt. Header");
                //PostedDocDim1.SETRANGE("Document No.","Purch. Rcpt. Header"."No.");
                if "Purchaser Code" = '' then begin
                    SalesPurchPerson.Init;
                    PurchaserText := '';
                end else begin
                    SalesPurchPerson.Get("Purchaser Code");
                    PurchaserText := Text000
                end;
                if "Your Reference" = '' then
                    ReferenceText := ''
                else
                    ReferenceText := FieldCaption("Your Reference");
                FormatAddr.PurchRcptShipTo(ShipToAddr, "Purch. Rcpt. Header");
                FormatAddr.PurchRcptPayTo(VendAddr, "Purch. Rcpt. Header");
                if LogInteraction then
                    if not CurrReport.Preview then
                        SegManagement.LogDocument(
                          15, "No.", 0, 0, Database::Vendor, "Buy-from Vendor No.", "Purchaser Code", '', "Posting Description", '');
                ;
                CompInfo.CalcFields(Picture);
                //Get Signature
                if UserSetup.Get("Purch. Rcpt. Header"."User ID") then begin
                    UserSetup.CalcFields(Picture);
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        Text000: label 'Purchaser';
        Text001: label 'COPY';
        Text002: label 'Purchase - Receipt %1';
        Text003: label 'Page %1';
        CompanyInfo: Record "Company Information";
        SalesPurchPerson: Record "Salesperson/Purchaser";
        Language: Record Language;
        RespCenter: Record "Responsibility Center";
        RcptCountPrinted: Codeunit "Purch.Rcpt.-Printed";
        SegManagement: Codeunit SegManagement;
        VendAddr: array[8] of Text[50];
        ShipToAddr: array[8] of Text[50];
        CompanyAddr: array[8] of Text[50];
        PurchaserText: Text[30];
        ReferenceText: Text[30];
        MoreLines: Boolean;
        NoOfCopies: Integer;
        NoOfLoops: Integer;
        CopyText: Text[30];
        FormatAddr: Codeunit "Format Address";
        DimText: Text[120];
        OldDimText: Text[75];
        ShowInternalInfo: Boolean;
        Continue: Boolean;
        LogInteraction: Boolean;
        ShowCorrectionLines: Boolean;
        TOTValue: Decimal;
        RecSeQ: Integer;
        PurchUser: Code[20];
        CompInfo: Record "Company Information";
        purch: Record "Purchase Header";
        UserSetup: Record "User Setup";
        Text004: label '%1 Dept. %2 Received the items listed below from (source) %3';
        Text005: label '';
        GOODS_RECEIVED_NOTECaptionLbl: label 'GOODS RECEIVED NOTE';
        No_CaptionLbl: label 'GRN No.';
        FROM___SUPPLIER_CaptionLbl: label 'FROM: (SUPPLIER)';
        EmptyStringCaptionLbl: label '__________________________________________';
        ORDER_NO_CaptionLbl: label 'LPO/LSO No.';
        EmptyStringCaption_Control1000000004Lbl: label '_________________';
        AMOUNTCaptionLbl: label 'AMOUNT';
        NO_Caption_Control1102760001Lbl: label 'NO.';
        DESCRIPTIONCaptionLbl: label 'DESCRIPTION';
        QUANTITY_RECEIVEDCaptionLbl: label 'QTY RECEIVED';
        UNIT_OF_MEASURECaptionLbl: label 'UNIT';
        UNIT_COSTCaptionLbl: label ' UNIT COST';
        TOTALCaptionLbl: label 'TOTAL';
        Issuing_Officer_________________________________Signature__________________________Date_______________CaptionLbl: label 'Receiving Officer_________Signature_________Designation____Date_____';
        CoName: Text[100];
        Text006: label 'Certified that the quantities received have been taken on charge.';
        Text007: label 'Requisitioning Office_______Signature________Designation_____Date____';
        Text008: label 'Account No...........................';
        Text009: label 'Date Received';
        Text010: label 'P.O Box';
        PhoneLbl: label 'Tel:';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511265_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511265;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
