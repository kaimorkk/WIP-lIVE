//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511122_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511122) { }
//type("System.IO.Path"; System_IO_Path51511122) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193540 "Payroll Journal report Summx"
{
    UseRequestPage = true;
    RDLCLayout = './Layouts/PayrollJournalreportSummx.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Integer; Integer)
        {
            DataItemTableView = sorting(Number) order(ascending) where(Number = const(1));
            column(ReportForNavId_5444; 5444) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(Credit_; 'Credit')
            {
            }
            column(USERID; UserId)
            {
            }
            column(Debit_; 'Debit')
            {
            }
            column(UPPERCASE_FORMAT_DateSpecified_0___month_text___year4____; UpperCase(Format(DateSpecified, 0, '<month text> <year4>')))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(GrandDebits; GrandDebits)
            {
            }
            column(GrandCredits; GrandCredits)
            {
            }
            column(Cash; Cash)
            {
            }
            column(Bank; Bank)
            {
            }
            column(TotalNetPay; TotalNetPay)
            {
            }
            column(Overdrawn1; -Overdrawn1)
            {
            }
            column(CoinsCFWD; CoinsCFWD)
            {
            }
            column(TotalDeduction__ABS_TotalncomeTax_; TotalDeduction + +Abs(TotalncomeTax))
            {
            }
            column(NoOfEmployee; NoOfEmployee)
            {
            }
            column(PageCaption; PageCaptionLbl)
            {
            }
            column(UserCaption; UserCaptionLbl)
            {
            }
            column(SALARIES_JOURNALCaption; SALARIES_JOURNALCaptionLbl)
            {
            }
            column(PERIODCaption; PERIODCaptionLbl)
            {
            }
            column(BalanceCaption; BalanceCaptionLbl)
            {
            }
            column(GRAND_TOTALSCaption; GRAND_TOTALSCaptionLbl)
            {
            }
            column(CASH_PAYMENTCaption; CASH_PAYMENTCaptionLbl)
            {
            }
            column(BANK_PAYMENTCaption; BANK_PAYMENTCaptionLbl)
            {
            }
            column(SUMMARYCaption; SUMMARYCaptionLbl)
            {
            }
            column(Coins_CFWDCaption; Coins_CFWDCaptionLbl)
            {
            }
            column(OverdrawnCaption; OverdrawnCaptionLbl)
            {
            }
            column(Total_DeductionsCaption; Total_DeductionsCaptionLbl)
            {
            }
            column(NET_PAYCaption; NET_PAYCaptionLbl)
            {
            }
            column(TOTAL_NO__OF_EMPLOYEES_Caption; TOTAL_NO__OF_EMPLOYEES_CaptionLbl)
            {
            }
            column(Integer_Number; Integer.Number)
            {
            }
            dataitem(Employee; Employee)
            {
                DataItemTableView = sorting("No.");
                RequestFilterFields = "Pay Period Filter";
                column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
                column(GrandDebits2; GrandDebits)
                {
                }
                column(GrandCredits2; GrandCredits)
                {
                }
                column(Cash2; Cash)
                {
                }
                column(Bank2; Bank)
                {
                }
                column(TotalNetPay2; TotalNetPay)
                {
                }
                column(TotalDeduction__ABS_TotalncomeTax_2; TotalDeduction + +Abs(TotalncomeTax))
                {
                }
                column(NoOfEmployee2; NoOfEmployee)
                {
                }
                trigger OnPreDataItem();
                begin
                    LastFieldNo := FieldNo("No.");
                    LineNumber := LineNumber + 1;
                    if BeginDate = DateSpecified then
                        Employee.SetRange(Status, Employee.Status::Active);
                    CUser := UserId;
                    GetGroup.GetUserGroup(CUser, GroupCode);
                    SetRange(Employee."Posting Group", GroupCode);
                end;

                trigger OnAfterGetRecord();
                begin
                    //Exclude
                    if ExcludeNetPay = true then begin
                        SkipEmp := false;
                        EndMonth := CalcDate('CD+1M-1D', DateSpecified);
                        /*LeaveRe.RESET;
                        LeaveRe.SETCURRENTKEY("Employee No","From Date");
                        LeaveRe.SETRANGE("Employee No",employee."No.");
                        LeaveRe.SETRANGE("From Date",DateSpecified,EndMonth);
                        IF LeaveRe.FIND('-') THEN
                        SkipEmp:=TRUE;*/
                    end;
                    // END OF EXCLUDE
                    Employee.CalcFields(Employee."Cumm. Basic Pay");
                    if (Employee."Cumm. Basic Pay" <> 0) and (BeginDate <> DateSpecified) then begin
                        Employee.SetRange(Employee."Pay Period Filter", DateSpecified);
                        Employee.CalcFields(Employee."Cumm. Basic Pay");
                    end;
                    Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount");
                    Employee.CalcFields("Total Allowances", "Total Deductions");
                    Employee.CalcFields("Benefits-Non Cash", "Total Savings", "Retirement Contribution");
                    if BeginDate = DateSpecified then
                        BasicSalary := Employee."Basic Pay"
                    else
                        BasicSalary := Employee."Cumm. Basic Pay";
                    TaxableAmount := BasicSalary + Employee."Taxable Allowance";
                    if Employee."Housed by Employer" then begin
                        case Housing of
                            Housing::Ordinary:
                                Employee."Total Quarters" := 0.15 * TaxableAmount;
                            Housing::Directors:
                                Employee."Total Quarters" := 0.15 * TaxableAmount;
                            Housing::Agricultural:
                                Employee."Total Quarters" := 0.1 * TaxableAmount;
                        end;
                    end;
                    CompRec.Get;
                    HseLimit := CompRec."Housing Earned Limit";
                    TaxCode := CompRec."Tax Table";
                    if ((TaxableAmount > HseLimit) and (Employee."Total Quarters" > 0)) then begin
                        if Employee."Employer Rent" then
                            if Employee."House Rent" > Employee."Total Quarters" then
                                Employee."Total Quarters" := Employee."House Rent"
                            else
                                Employee."Total Quarters" := Employee."Total Quarters"
                        else
                            Employee."Total Quarters" := Employee."Total Quarters" - Employee."House Rent";
                    end;
                    if (BeginDate <> DateSpecified) then begin
                        Employee.SetRange("Pay Period Filter", DateSpecified);
                        Employee.CalcFields("Cumulative Quarters");
                        Employee."Total Quarters" := Employee."Cumulative Quarters";
                    end;
                    Employee."Total Quarters" := ROUND(Employee."Total Quarters", 0.01);
                    TaxableAmount := TaxableAmount + Employee."Total Quarters" + Employee."Tax Deductible Amount";
                    CompRec.Get;
                    //Checking for Pension Limit to allow for tax
                    retirecontribution := 0;
                    retirecontribution := -Employee."Retirement Contribution";
                    if Employee."Retirement Contribution" > CompRec."Pension Limit Amount" then begin
                        ExcessRetirement := retirecontribution - CompRec."Pension Limit Amount";
                        TaxableAmount := TaxableAmount + ExcessRetirement
                    end;
                    //END----Checking for pension Limit
                    TaxableAmount := ROUND(TaxableAmount, 0.01);
                    GetTaxBracket(TaxableAmount);
                    relief := Employee."Tax Relief Amount";
                    if (Format(DateSpecified, 0, '<month>')) <> '1' then begin
                        Employee.Reset;
                        Employee.SetRange("Pay Period Filter", CalcDate('-1M', DateSpecified));
                        Employee.CalcFields(BfMpr);
                        IncomeTax := IncomeTax + relief + Employee.BfMpr;
                        Employee.SetRange(Employee."Pay Period Filter", DateSpecified);
                        if BeginDate = DateSpecified then
                            Employee.SetRange(Status, Employee.Status::Active);
                    end
                    else
                        IncomeTax := IncomeTax + Employee."Tax Relief Amount";
                    if IncomeTax > 0 then begin
                        CfMpr := IncomeTax;
                        IncomeTax := 0;
                    end;
                    NetPay := BasicSalary + Employee."Total Allowances" + Employee."Total Deductions"
                            + IncomeTax + Employee."Total Savings";
                    GrossPay := BasicSalary + Employee."Total Allowances";
                    Totalgross := Totalgross + GrossPay;
                    TotalncomeTax := TotalncomeTax + IncomeTax;
                    if SkipEmp = false then
                        TotalNetPay := TotalNetPay + NetPay;
                    if Employee."Pay Mode" = Employee."pay mode"::Bank then
                        Bank := Bank + NetPay;
                    if Employee."Pay Mode" = Employee."pay mode"::Cash then
                        Cash := Cash + NetPay;
                    TotalBasic := TotalBasic + BasicSalary;
                    if PostingGroup.Get(Employee."Posting Group") then begin
                        TaxAccount := PostingGroup."Income Tax Account";
                        SalariesAcc := PostingGroup."Salary Account";
                        PayablesAcc := PostingGroup."Net Salary Payable";
                        EmployerPenAcc := PostingGroup."Pension Employer Acc";
                        EmployeePenAcc := PostingGroup."Pension Employee Acc";
                        EmployeeNSSFAcc := PostingGroup."SSF Employee Account";
                        EmployerNSSFAcc := PostingGroup."SSF Employer Account";
                    end;
                    // ELSE
                    //   ERROR('Posting group must be specified');
                    NoOfEmployee := NoOfEmployee + 1;

                end;

                trigger OnPostDataItem();
                begin
                    TotalDebits := TotalBasic;
                    GrandDebits := GrandDebits + TotalBasic;
                    GrandCredits := GrandCredits + TotalNetPay + Abs(TotalncomeTax);
                    TotalCredits := TotalNetPay + Abs(TotalncomeTax);
                    GenJnline.Init;
                    LineNumber := LineNumber + 100;
                    GenJnline."Journal Template Name" := 'GENERAL';
                    GenJnline."Journal Batch Name" := 'SALARIES';
                    GenJnline."Line No." := LineNumber + 100;
                    GenJnline."Account No." := SalariesAcc;
                    GenJnline."Posting Date" := PayrollPeriod."Pay Date";
                    GenJnline.Description := 'Salaries';
                    GenJnline."Document No." := '4444';
                    GenJnline.Amount := Totalgross;
                    //GenJnline.INSERT;
                    GenJnline.Init;
                    LineNumber := LineNumber + 1;
                    GenJnline."Journal Template Name" := 'GENERAL';
                    GenJnline."Journal Batch Name" := 'SALARIES';
                    GenJnline."Line No." := LineNumber + 100;
                    GenJnline."Account No." := PayablesAcc;
                    GenJnline."Posting Date" := PayrollPeriod."Pay Date";
                    GenJnline.Description := 'Salary payable';
                    GenJnline."Document No." := '4444';
                    GenJnline.Amount := -TotalNetPay;
                    //GenJnline.INSERT;
                    GenJnline.Init;
                    LineNumber := LineNumber + 2;
                    GenJnline."Journal Template Name" := 'GENERAL';
                    GenJnline."Journal Batch Name" := 'SALARIES';
                    GenJnline."Line No." := LineNumber + 100;
                    GenJnline."Account No." := PostingGroup."Income Tax Account";
                    GenJnline."Posting Date" := PayrollPeriod."Pay Date";
                    GenJnline.Description := 'PAYE';
                    GenJnline."Document No." := '4444';
                    GenJnline.Amount := TotalncomeTax;
                    //GenJnline.INSERT;
                end;

            }
            dataitem(EarningsX1; EarningsX1)
            {
                DataItemTableView = sorting(Code);
                column(ReportForNavId_7169; 7169) { } // Autogenerated by ForNav - Do not delete
                column(EarningsX1_Description; EarningsX1.Description)
                {
                }
                column(EarningsX1__Total_Amount_; EarningsX1."Total Amount")
                {
                }
                column(EarningsX1__G_L_Account_; EarningsX1."G/L Account")
                {
                }
                column(EarningsX1_Code; EarningsX1.Code)
                {
                }
                column(Overdrawn12; -Overdrawn1)
                {
                }
                trigger OnPreDataItem();
                begin
                    EarningsX1.SetRange("Pay Period Filter", DateSpecified);
                    EarningsX1.SetRange(EarningsX1."Non-Cash Benefit", false);
                end;

                trigger OnAfterGetRecord();
                begin
                    //EarningsX.SETFILTER(EarningsX."Pay Period Filter",PayPeriodText1);
                    EarningsX1.CalcFields("Total Amount");
                    TotalDebits := TotalDebits + "Total Amount";
                    GrandDebits := GrandDebits + "Total Amount";
                    if CompRec."BFW Round Earning code" = EarningsX1.Code then
                        Overdrawn1 := Overdrawn1 + "Total Amount";
                end;

            }
            dataitem(DeductionsX1; DeductionsX1)
            {
                DataItemTableView = sorting(Code);
                column(ReportForNavId_1209; 1209) { } // Autogenerated by ForNav - Do not delete
                column(DeductionsX1_Description; DeductionsX1.Description)
                {
                }
                column(DeductionsX1__Total_Amount_; DeductionsX1."Total Amount")
                {
                }
                column(DedCredit; DedCredit)
                {
                }
                column(DeductionsX1__Total_Amount_Employer_; DeductionsX1."Total Amount Employer")
                {
                }
                column(DedDebit; DedDebit)
                {
                }
                column(Total; Total)
                {
                }
                column(Total_Amount___Total_Amount_Employer_; "Total Amount" - "Total Amount Employer")
                {
                }
                column(balance; balance)
                {
                }
                column(TotalNetPay_Control4; -TotalNetPay)
                {
                }
                column(PayablesAcc; PayablesAcc)
                {
                }
                column(NET_PAYCaption_Control2; NET_PAYCaption_Control2Lbl)
                {
                }
                column(DeductionsX1_Code; DeductionsX1.Code)
                {
                }
                column(CoinsCFWD2; CoinsCFWD)
                {
                }
                column(TotalDeduction__ABS_TotalncomeTax_3; TotalDeduction + +Abs(TotalncomeTax))
                {
                }
                trigger OnPreDataItem();
                begin
                    DeductionsX1.SetRange(DeductionsX1."Pay Period Filter", DateSpecified);
                end;

                trigger OnAfterGetRecord();
                begin
                    //DeductionsX.SETFILTER(DeductionsX."Pay Period Filter",PayPeriodText1);
                    DeductionsX1.CalcFields(DeductionsX1."Total Amount");
                    DeductionsX1.CalcFields(DeductionsX1."Total Amount Employer");
                    Total := '';
                    if "Total Amount Employer" > 0 then
                        Total := 'TOTAL ' + DeductionsX1.Description;
                    TotalCredits := Abs(TotalCredits) + Abs("Total Amount") + Abs("Total Amount Employer");
                    TotalDeduction := TotalDeduction + Abs("Total Amount");
                    TotalDebits := TotalDebits + "Total Amount Employer";
                    GrandCredits := Abs(GrandCredits) + Abs("Total Amount");//+ABS("Total Amount Employer");
                                                                            // added by lob for coins cfwd
                    if CompRec."CFW Round Deduction code" = DeductionsX1.Code then
                        CoinsCFWD := CoinsCFWD + "Total Amount";
                    //commented because client not interested
                    //GrandDebits:=GrandDebits+"Total Amount Employer";
                    DedCredit := DeductionsX1."G/L Account";
                    DedDebit := DeductionsX1."G/L Account Employer";
                    if "Percentage Employer" > 0 then begin
                        if ((DedCredit = '') and (DeductionsX1."Maximum Amount" = 80)) then
                            DedCredit := EmployeeNSSFAcc;
                        if ((DedDebit = '') and (DeductionsX1."Maximum Amount" = 80)) then
                            DedDebit := EmployerNSSFAcc;
                        if ((DedCredit = '') and (DeductionsX1."Maximum Amount" > 80)) then
                            DedCredit := EmployeePenAcc;
                        if ((DedDebit = '') and (DeductionsX1."Maximum Amount" > 80)) then
                            DedDebit := EmployerPenAcc;
                    end;
                    // ADDED BY LB
                    balance := 0;
                    balance1 := 0;
                    // GET THE LOAN BALANCE
                    if DeductionsX1.Loan = true then begin
                        // LoanTran.Reset;
                        // LoanTran.SetRange(Code, DeductionsX1.Code);
                        // LoanTran.CalcSums(LoanTran."Loan Amount");
                        // balance1 := LoanTran."Loan Amount";
                        /*
                         LoanTran.RESET;
                         LoanTran.SETRANGE(Code,DeductionsX1.Code);
                         IF LoanTran.FIND('-') THEN BEGIN
                          REPEAT
                          LoanTran.CALCFIELDS("Cumm. Period Repayments");
                          balance:=balance+LoanTran."Cumm. Period Repayments";
                         UNTIL LoanTran.NEXT=0;
                         END;
                        */
                        balance := balance1 + "Total Amount";
                    end;

                end;

            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        AdjustPostingGr;
        GetPayrollPeriod;
        DateSpecified := Employee.GetRangeMin("Pay Period Filter");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodText := PayPeriod.Name;
        //;
        //ReportsForNavPre;
    end;

    var
        Text001: label 'Page';
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TaxableAmount: Decimal;
        IncomeTax: Decimal;
        NetPay: Decimal;
        RightBracket: Boolean;
        AmountRemaining: Decimal;
        Company: Record "Company Information";
        Companyz: Code[10];
        "Posting Date": Date;
        BatchName: Text[30];
        DocumentNo: Code[10];
        Description: Text[30];
        Amount: Decimal;
        "G/LAccount": Code[10];
        TotalncomeTax: Decimal;
        GrossPay: Decimal;
        Totalgross: Decimal;
        TotalNetPay: Decimal;
        Payday: Date;
        GenJnline: Record "Gen. Journal Line";
        LineNumber: Integer;
        TotalBasic: Decimal;
        PayrollPeriod: Record "Payroll PeriodX1";
        PostingGroup: Record "Employee Posting GroupX1";
        TaxAccount: Code[10];
        SalariesAcc: Code[10];
        PayablesAcc: Code[10];
        First: Code[10];
        Last: Code[10];
        EmployeeTemp: Record Employee temporary;
        TotalDebits: Decimal;
        TotalCredits: Decimal;
        Assignment: Record "Assignment Matrix-X1";
        PayPeriodText: Text[30];
        PayPeriod: Record "Payroll PeriodX1";
        AssignmentMat: Record "Assignment Matrix-X1";
        EmpRec: Record Employee;
        DateSpecified: Date;
        PayPeriodText1: Text[30];
        BeginDate: Date;
        BasicSalary: Decimal;
        CompRec: Record "Human Resources Setup";
        HseLimit: Decimal;
        relief: Decimal;
        CfMpr: Decimal;
        ExcessRetirement: Decimal;
        Employer: Decimal;
        NetPayAc: Text[30];
        EmployerPenAcc: Code[10];
        EmployeePenAcc: Code[10];
        DedCredit: Code[10];
        DedDebit: Code[10];
        EmployerNSSFAcc: Code[10];
        EmployeeNSSFAcc: Code[10];
        Posting: Text[30];
        GrandDebits: Decimal;
        GrandCredits: Decimal;
        TaxCode: Code[10];
        Total: Text[30];
        PAYE: Decimal;
        TotalBenefits: Decimal;
        RetireCont: Decimal;
        TotalQuarters: Decimal;
        TaxablePay: Decimal;
        retirecontribution: Decimal;
        Cash: Decimal;
        Bank: Decimal;
        CoinsCFWD: Decimal;
        Overdrawn1: Decimal;
        TotalDeduction: Decimal;
        NoOfEmployee: Integer;
        balance: Decimal;
        pay: Record DeductionsX1;
        // LoanTran: Record "Loans transactionsX1";
        balance1: Decimal;
        ExcludeNetPay: Boolean;
        SkipEmp: Boolean;
        EndMonth: Date;
        GetGroup: Codeunit Payroll3;
        GroupCode: Code[20];
        CUser: Code[20];
        PageCaptionLbl: label 'Page';
        UserCaptionLbl: label 'User';
        SALARIES_JOURNALCaptionLbl: label 'SALARIES JOURNAL';
        PERIODCaptionLbl: label 'PERIOD';
        BalanceCaptionLbl: label 'Balance';
        GRAND_TOTALSCaptionLbl: label 'GRAND TOTALS';
        CASH_PAYMENTCaptionLbl: label 'CASH PAYMENT';
        BANK_PAYMENTCaptionLbl: label 'BANK PAYMENT';
        SUMMARYCaptionLbl: label 'SUMMARY';
        Coins_CFWDCaptionLbl: label 'Coins CFWD';
        OverdrawnCaptionLbl: label 'Overdrawn';
        Total_DeductionsCaptionLbl: label 'Total Deductions';
        NET_PAYCaptionLbl: label 'NET PAY';
        TOTAL_NO__OF_EMPLOYEES_CaptionLbl: label 'TOTAL NO. OF EMPLOYEES:';
        NET_PAYCaption_Control2Lbl: label 'NET PAY';

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
        AmountRemaining := TaxableAmount;
        AmountRemaining := AmountRemaining;
        AmountRemaining := ROUND(AmountRemaining);
        EndTax := false;
        TaxTable.SetRange("Table Code", TaxCode);
        if TaxTable.Find('-') then begin
            repeat
                if AmountRemaining <= 0 then
                    EndTax := true
                else begin
                    if ROUND((TaxableAmount), 0.01) > TaxTable."Upper Limit" then
                        Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                    else begin
                        Tax := AmountRemaining * TaxTable.Percentage / 100;
                        TotalTax := TotalTax + Tax;
                        EndTax := true;
                    end;
                    if not EndTax then begin
                        AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                        TotalTax := TotalTax + Tax;
                    end;
                end;
            until (TaxTable.Next = 0) or EndTax = true;
        end;
        TotalTax := TotalTax;
        TotalTax := PayrollRounding(TotalTax);
        IncomeTax := -TotalTax;
        if not Employee."Pays tax" then
            IncomeTax := 0;
    end;

    procedure GetPayPeriod(var PayPeriods: Record "Payroll PeriodX1")
    begin
        PayrollPeriod := PayPeriods;
    end;

    procedure GetPayrollPeriod()
    begin
        PayPeriod.SetRange(PayPeriod."Close Pay", false);
        if PayPeriod.Find('-') then
            BeginDate := PayPeriod."Starting Date";
    end;

    procedure AdjustPostingGr()
    begin
        if AssignmentMat.Find('-') then begin
            repeat
                if EmpRec.Get(AssignmentMat."Employee No") then
                    AssignmentMat."Posting Group Filter" := EmpRec."Posting Group";
                AssignmentMat.Modify;
            until AssignmentMat.Next = 0;
        end;
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511122_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511122;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
