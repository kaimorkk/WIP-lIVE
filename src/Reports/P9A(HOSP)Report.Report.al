//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511136_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511136) { }
//type("System.IO.Path"; System_IO_Path51511136) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193553 "P9A (HOSP) Report"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/P9A(HOSP)Report.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            RequestFilterFields = "No.", "Global Dimension 1 Code";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(Employee__First_Name_; Employee."First Name")
            {
            }
            column(Employee__Middle_Name_; Employee."Middle Name")
            {
            }
            column(Employee__Last_Name_; Employee."Last Name")
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(Employee__P_I_N_; Employee."P.I.N")
            {
            }
            column(P9A_; 'P9A')
            {
            }
            column(FORMAT_StringDate_0___year4___; Format(StringDate, 0, '<year4>'))
            {
            }
            column(CoPin; CoPin)
            {
            }
            column(V30__; '30%')
            {
            }
            column(Actual_; 'Actual')
            {
            }
            column(Fixed_; 'Fixed')
            {
            }
            column(Employers_Name_Caption; Employers_Name_CaptionLbl)
            {
            }
            column(Employee_s_Main_Name_Caption; Employee_s_Main_Name_CaptionLbl)
            {
            }
            column(Employee_s_Other_Names_Caption; Employee_s_Other_Names_CaptionLbl)
            {
            }
            column(Employers_PIN_Caption; Employers_PIN_CaptionLbl)
            {
            }
            column(Employee_s_PIN_Caption; Employee_s_PIN_CaptionLbl)
            {
            }
            column(KENYA_REVENUE_AUTHORITYCaption; KENYA_REVENUE_AUTHORITYCaptionLbl)
            {
            }
            column(INCOME_TAX_DEPARTMENTCaption; INCOME_TAX_DEPARTMENTCaptionLbl)
            {
            }
            column(INCOME_TAX_DEDUCTION_CARD_YEAR_Caption; INCOME_TAX_DEDUCTION_CARD_YEAR_CaptionLbl)
            {
            }
            column(MonthCaption; MonthCaptionLbl)
            {
            }
            column(Basic_SalaryCaption; Basic_SalaryCaptionLbl)
            {
            }
            column(BenefitsCaption; BenefitsCaptionLbl)
            {
            }
            column(Non_CashCaption; Non_CashCaptionLbl)
            {
            }
            column(QuartersCaption; QuartersCaptionLbl)
            {
            }
            column(Value_OfCaption; Value_OfCaptionLbl)
            {
            }
            column(Total_A_B_CCaption; Total_A_B_CCaptionLbl)
            {
            }
            column(Defined_Contribution_Retr__SchemeCaption; Defined_Contribution_Retr__SchemeCaptionLbl)
            {
            }
            column(ECaption; ECaptionLbl)
            {
            }
            column(Savings_PlanCaption; Savings_PlanCaptionLbl)
            {
            }
            column(Amount_DepositedCaption; Amount_DepositedCaptionLbl)
            {
            }
            column(Retr__Contribution__Caption; Retr__Contribution__CaptionLbl)
            {
            }
            column(Savings_PlanCaption_Control78; Savings_PlanCaption_Control78Lbl)
            {
            }
            column(Taxable_AmountCaption; Taxable_AmountCaptionLbl)
            {
            }
            column(Column_D_GCaption; Column_D_GCaptionLbl)
            {
            }
            column(Round__H_Caption; Round__H_CaptionLbl)
            {
            }
            column(K_PoundsCaption; K_PoundsCaptionLbl)
            {
            }
            column(Tax_On_JCaption; Tax_On_JCaptionLbl)
            {
            }
            column(ReliefCaption; ReliefCaptionLbl)
            {
            }
            column(MonthlyCaption; MonthlyCaptionLbl)
            {
            }
            column(P_A_Y_E_TAXCaption; P_A_Y_E_TAXCaptionLbl)
            {
            }
            column(ACaption; ACaptionLbl)
            {
            }
            column(BCaption; BCaptionLbl)
            {
            }
            column(CCaption; CCaptionLbl)
            {
            }
            column(DCaption; DCaptionLbl)
            {
            }
            column(F_Caption; F_CaptionLbl)
            {
            }
            column(G___Lowest_of_E_F_Caption; G___Lowest_of_E_F_CaptionLbl)
            {
            }
            column(HCaption; HCaptionLbl)
            {
            }
            column(JCaption; JCaptionLbl)
            {
            }
            column(KCaption; KCaptionLbl)
            {
            }
            column(LCaption; LCaptionLbl)
            {
            }
            column(MCaption; MCaptionLbl)
            {
            }
            column(Employee_No_; Employee."No.")
            {
            }
            dataitem("Payroll PeriodX1"; "Payroll PeriodX1")
            {
                DataItemTableView = sorting("Starting Date") order(ascending);
                column(ReportForNavId_7560; 7560) { } // Autogenerated by ForNav - Do not delete
                column(Payroll_PeriodX1_Name; "Payroll PeriodX1".Name)
                {
                }
                column(BenefitsVar; BenefitsVar)
                {
                }
                column(QuartersVar; QuartersVar)
                {
                }
                column(Employee__Total_Allowances__Employee__Cumm__Basic_Pay__BenefitsVar_QuartersVar; Employee."Total Allowances" + Employee."Cumm. Basic Pay" + BenefitsVar + QuartersVar)
                {
                }
                column(RetirementVar; RetirementVar)
                {
                }
                column(TaxableAmount; TaxableAmount)
                {
                }
                column(ABS_IncomeTax_; Abs(IncomeTax))
                {
                }
                column(Relief; Relief)
                {
                }
                column(ABS_PAYE_; Abs(PAYE))
                {
                }
                column(PensionLimit; PensionLimit)
                {
                }
                column(Employee__Cumm__Basic_Pay__Employee__Total_Allowances_; Employee."Cumm. Basic Pay" + Employee."Total Allowances")
                {
                }
                column(TaxablePound; TaxablePound)
                {
                }
                column(ABS_OccupierVar_; Abs(OccupierVar))
                {
                }
                column(Employee__Total_Allowances__Employee__Cumm__Basic_Pay__BenefitsVar_QuartersVar__30_100; (Employee."Total Allowances" + Employee."Cumm. Basic Pay" + BenefitsVar + QuartersVar) * 30 / 100)
                {
                }
                column(ABS_DefinedContrMin__ABS_OccupierVar_; Abs(DefinedContrMin) + Abs(OccupierVar))
                {
                }
                column(TotBasic; TotBasic)
                {
                }
                column(TotalBenefits; TotalBenefits)
                {
                }
                column(TotQuarter; TotQuarter)
                {
                }
                column(TotGross; TotGross)
                {
                }
                column(TotPercentage; TotPercentage)
                {
                }
                column(ABS_TotActual_; Abs(TotActual))
                {
                }
                column(TotFixed; TotFixed)
                {
                }
                column(TotTaxable; TotTaxable)
                {
                }
                column(TotPound; TotPound)
                {
                }
                column(ABS_TotTax_; Abs(TotTax))
                {
                }
                column(TotRelief; TotRelief)
                {
                }
                column(ABS_TotPAYE_; Abs(TotPAYE))
                {
                }
                column(TotOcc; TotOcc)
                {
                }
                column(TotRet; TotRet)
                {
                }
                column(ABS_TotPAYE__Control164; Abs(TotPAYE))
                {
                }
                column(ABS_TotTax__Control166; Abs(TotTax))
                {
                }
                column(P9A_HOSP__; 'P9A(HOSP)')
                {
                }
                column(NAMES_OF_MORTGAGE_FINANCIAL_INSTITUTIONCaption; NAMES_OF_MORTGAGE_FINANCIAL_INSTITUTIONCaptionLbl)
                {
                }
                column(EmptyStringCaption; EmptyStringCaptionLbl)
                {
                }
                column(DataItem146; L_R__NO__OF_OWNER_OCCUPIED_HOUSE_____________CapLbl)
                {
                }
                column(DataItem147; DATE_OF_OCCUPATION___________________________CapLbl)
                {
                }
                column(TOTALSCaption; TOTALSCaptionLbl)
                {
                }
                column(DataItem37; V4__Where_any_of_t___________________________Lbl)
                {
                }
                column(YearCaption; YearCaptionLbl)
                {
                }
                column(Amount_Kenya_Pounds_Caption; Amount_Kenya_Pounds_CaptionLbl)
                {
                }
                column(Tax__Shs_Caption; Tax__Shs_CaptionLbl)
                {
                }
                column(Approved________________________________________________________Caption; Approved________________________________________________________CaptionLbl)
                {
                }
                column(TOTAL_TAX__COL_M__KshsCaption; TOTAL_TAX__COL_M__KshsCaptionLbl)
                {
                }
                column(TOTAL_CHARGEABLE_PAY__COL_J__K_PoundsCaption; TOTAL_CHARGEABLE_PAY__COL_J__K_PoundsCaptionLbl)
                {
                }
                column(V1__Date_employee_commenced_if_during_the_year_______________________________________________Caption; V1__Date_employee_commenced_if_during_the_year_______________________________________________CaptionLbl)
                {
                }
                column(Name_and_address_of_old_employer__________________________________________________________________Caption; Name_and_address_of_old_employer__________________________________________________________________CaptionLbl)
                {
                }
                column(DataItem34; V2__Date_left_if_during_the_year_______CaptionLbl)
                {
                }
                column(Name_and_address_of_new_employer_________________________________________________________________Caption; Name_and_address_of_new_employer_________________________________________________________________CaptionLbl)
                {
                }
                column(V3__Where_housing_is_provided_State_monthly_rent______________________________________________Caption; V3__Where_housing_is_provided_State_monthly_rent______________________________________________CaptionLbl)
                {
                }
                column(CERTIFICATE_OF_PAY_AND_TAXCaption; CERTIFICATE_OF_PAY_AND_TAXCaptionLbl)
                {
                }
                column(DataItem137; NAME____________________________________________Lbl)
                {
                }
                column(DataItem138; ADDRESS_________________________________________Lbl)
                {
                }
                column(DataItem139; SIGNATURE__________________________________________________________Lbl)
                {
                }
                column(DataItem140; DATE___STAMP______________________________________________________Lbl)
                {
                }
                column(Payroll_PeriodX1_Starting_Date; "Payroll PeriodX1"."Starting Date")
                {
                }
                trigger OnPreDataItem();
                begin
                    "Payroll PeriodX1".SetRange("Payroll PeriodX1"."Starting Date", StringDate, EndDate);
                end;

                trigger OnAfterGetRecord();
                begin
                    TaxableAmount := 0;
                    if "Payroll PeriodX1"."Close Pay" then begin
                        Employee.SetRange("Pay Period Filter", "Starting Date");
                        Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount", "Total Allowances");
                        Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount");
                        Employee.CalcFields("Total Allowances", "Total Deductions");
                        Employee.CalcFields("Total Savings", BfMpr);
                        Employee.CalcFields("Cumm. Basic Pay", "Retirement Contribution", "Home Savings");
                        Employee.CalcFields("Cumulative Quarters", "Benefits-Non Cash", "Owner Occupier");
                    end;
                    Relief := Employee."Tax Relief Amount";
                    TaxableAmount := Employee."Cumm. Basic Pay" + Employee."Taxable Allowance";
                    if Employee."Housed by Employer" then begin
                        with Employee do
                            case Housing of
                                Housing::Ordinary:
                                    Employee."Total Quarters" := 0.15 * TaxableAmount;
                                Housing::Directors:
                                    Employee."Total Quarters" := 0.15 * TaxableAmount;
                                Housing::Agricultural:
                                    Employee."Total Quarters" := 0.1 * TaxableAmount;
                            end;
                    end;
                    HRSetup.Get;
                    HseLimit := HRSetup."Housing Earned Limit";
                    TaxCode := HRSetup."Tax Table";
                    if ((TaxableAmount > HseLimit) and (Employee."Total Quarters" > 0)) then begin
                        if Employee."Employer Rent" then
                            if Employee."House Rent" > Employee."Total Quarters" then
                                Employee."Total Quarters" := Employee."House Rent"
                            else
                                Employee."Total Quarters" := Employee."Total Quarters"
                        else
                            Employee."Total Quarters" := Employee."Total Quarters" - Employee."House Rent";
                    end;
                    TaxableAmount := TaxableAmount + Employee."Cumulative Quarters" + Employee."Tax Deductible Amount";
                    HRSetup.Get;
                    PensionLimit := HRSetup."Pension Limit Amount";
                    Employee."Total Quarters" := ROUND(Employee."Total Quarters", 0.1, '>');
                    //Checking for Pension Limit to allow for tax
                    Employee."Retirement Contribution" := -Employee."Retirement Contribution";
                    if Employee."Retirement Contribution" > HRSetup."Pension Limit Amount" then begin
                        ExcessRetirement := Employee."Retirement Contribution" - HRSetup."Pension Limit Amount";
                        TaxableAmount := TaxableAmount + Employee."Total Quarters" + Employee."Tax Deductible Amount" +
                    ExcessRetirement
                    end;
                    //END----Checking for pension Limit
                    if "Payroll PeriodX1"."Close Pay" then begin
                        QuartersVar := ROUND(Employee."Cumulative Quarters", 0.1, '>');
                        BenefitsVar := Employee."Benefits-Non Cash";
                        OccupierVar := Employee."Home Savings";
                        RetirementVar := Employee."Retirement Contribution";
                    end
                    else begin
                        QuartersVar := 0;
                        BenefitsVar := 0;
                        OccupierVar := 0;
                        RetirementVar := 0;
                        Employee."Cumm. Basic Pay" := 0;
                        Employee."Total Allowances" := 0;
                        TaxableAmount := 0;
                        TaxablePound := 0;
                        PensionLimit := 0;
                        Relief := 0;
                    end;
                    TaxableAmount := ROUND(TaxableAmount, 1, '>');
                    if TaxableAmount = 0 then begin
                        Relief := 0;
                        PensionLimit := 0;
                    end;
                    GetTaxBracket(TaxableAmount);
                    if (Format("Starting Date", 0, '<month>')) <> '1' then begin
                        Employee.SetRange("Pay Period Filter", CalcDate('-1M', "Starting Date"));
                        Employee.CalcFields(BfMpr);
                        PAYE := IncomeTax + Relief + Employee.BfMpr;
                        Employee.SetRange("Pay Period Filter", "Starting Date");
                    end
                    else
                        PAYE := IncomeTax + Relief;
                    if PAYE > 0 then
                        PAYE := 0;
                    /*****Calculate the totals*******************************/
                    TotBasic := TotBasic + Employee."Cumm. Basic Pay" + Employee."Total Allowances";
                    TotNonQuarter := TotQuarter + Employee."Total Allowances";
                    TotQuarter := TotQuarter + QuartersVar;
                    TotGross := TotGross + Employee."Cumm. Basic Pay" + Employee."Total Allowances" + QuartersVar + BenefitsVar;
                    TotPercentage := TotPercentage + ((30 / 100) * (Employee."Cumm. Basic Pay" + Employee."Total Allowances" +
                 QuartersVar
                    + BenefitsVar));
                    TotActual := TotActual + RetirementVar;
                    TotFixed := TotFixed + PensionLimit;
                    TotTaxable := TotTaxable + TaxableAmount;
                    TotTax := TotTax + IncomeTax;
                    TotRelief := TotRelief + Relief;
                    TotPAYE := TotPAYE + PAYE;
                    TotOcc := TotOcc + Abs(OccupierVar);
                    TotRet := TotRet + Abs(DefinedContrMin) + Abs(OccupierVar);
                    TaxablePound := TaxableAmount / 20;
                    TaxablePound := ROUND(TaxablePound, 1, '<');
                    TotPound := TotPound + TaxablePound;
                    TotalBenefits := TotalBenefits + BenefitsVar;
                    DefinedContrMin := RetirementVar;
                    NoOfMonths := NoOfMonths + 1;

                end;

            }
            dataitem(EarningsX1; EarningsX1)
            {
                DataItemLink = "Employee Filter" = field("No.");
                DataItemTableView = sorting(Code);
                column(ReportForNavId_7169; 7169) { } // Autogenerated by ForNav - Do not delete
                column(EarningsX1_Description; EarningsX1.Description)
                {
                }
                column(EarningsX1__Total_Amount_; EarningsX1."Total Amount")
                {
                }
                column(EarningsX1_Counter; EarningsX1.Counter)
                {
                }
                column(EarningsX1__Flat_Amount_; EarningsX1."Flat Amount")
                {
                }
                column(Numb; Numb)
                {
                }
                column(EmployeeBenefits; EmployeeBenefits)
                {
                }
                column(P9A_HOSP___Control221; 'P9A(HOSP)')
                {
                }
                column(APPENDIX_1BCaption; APPENDIX_1BCaptionLbl)
                {
                }
                column(ITEMCaption; ITEMCaptionLbl)
                {
                }
                column(NO_Caption; NO_CaptionLbl)
                {
                }
                column(RATECaption; RATECaptionLbl)
                {
                }
                column(NO__OF_MONTHSCaption; NO__OF_MONTHSCaptionLbl)
                {
                }
                column(TOTAL_AMOUNT_K__shs_Caption; TOTAL_AMOUNT_K__shs_CaptionLbl)
                {
                }
                column(CALCULATION_OF_BENEFITSCaption; CALCULATION_OF_BENEFITSCaptionLbl)
                {
                }
                column(TOTAL_BENEFITS_IN_YEARCaption; TOTAL_BENEFITS_IN_YEARCaptionLbl)
                {
                }
                column(DataItem171; Where_actual_cost_is_higher_actual_cost_is_brought_to_charge_in_fullCaptionLbl)
                {
                }
                column(LOW_INTERES_RATE_BELOW_PRESCRIBED_RATE_OF__15___PER_CENT_Caption; LOW_INTERES_RATE_BELOW_PRESCRIBED_RATE_OF__15___PER_CENT_CaptionLbl)
                {
                }
                column(DataItem173; EMPLOYERS_LOAN____Kshs__________RATE_DIFFERENCE_____PRESCRIBED_RARE___EMPLOYERS_Lbl)
                {
                }
                column(DataItem174; MONTHLY_BENEFIT_______________________________________X________Kshs________Lbl)
                {
                }
                column(MOTOR_CARSCaption; MOTOR_CARSCaptionLbl)
                {
                }
                column(Upto_1500cCaption; Upto_1500cCaptionLbl)
                {
                }
                column(V1501cc_1750ccCaption; V1501cc_1750ccCaptionLbl)
                {
                }
                column(V1751cc_2000cCaption; V1751cc_2000cCaptionLbl)
                {
                }
                column(V2001cc_3000ccCaption; V2001cc_3000ccCaptionLbl)
                {
                }
                column(Over_3000cCaption; Over_3000cCaptionLbl)
                {
                }
                column(EmptyStringCaption_Control210; EmptyStringCaption_Control210Lbl)
                {
                }
                column(EmptyStringCaption_Control211; EmptyStringCaption_Control211Lbl)
                {
                }
                column(EmptyStringCaption_Control212; EmptyStringCaption_Control212Lbl)
                {
                }
                column(EmptyStringCaption_Control213; EmptyStringCaption_Control213Lbl)
                {
                }
                column(EmptyStringCaption_Control214; EmptyStringCaption_Control214Lbl)
                {
                }
                column(FOR_PICK_UPS__PANEL_VANS_AND_LAND_ROVERS_REFER_TO_APPENDIX_5_OF_EMPLOYERS_GUIDE_Caption; FOR_PICK_UPS__PANEL_VANS_AND_LAND_ROVERS_REFER_TO_APPENDIX_5_OF_EMPLOYERS_GUIDE_CaptionLbl)
                {
                }
                column(If_this_amount_does_not_agree_with_total_of_Col__b_overleaf__attach_explanation_Caption; If_this_amount_does_not_agree_with_total_of_Col__b_overleaf__attach_explanation_CaptionLbl)
                {
                }
                column(DataItem217; CAR_BENEFIT___The_higher_the_amount_of_the)
                {
                }
                column(PRESCRIBED_RATE___1996___1__per_month_of_the_initial_cost_of_the_vehicle___Caption; PRESCRIBED_RATE___1996___1__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl)
                {
                }
                column(V1997___1_5__per_month_of_the_initial_cost_of_the_vehicle___Caption; V1997___1_5__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl)
                {
                }
                column(V1998_et_seq____2_0__per_month_of_the_initial_cost_of_the_vehicle___Caption; V1998_et_seq____2_0__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl)
                {
                }
                column(EarningsX1_Code; EarningsX1.Code)
                {
                }
                column(EarningsX1_Employee_Filter; EarningsX1."Employee Filter")
                {
                }
                trigger OnPreDataItem();
                begin
                    EarningsX1.SetRange(EarningsX1."Non-Cash Benefit", true);
                    EarningsX1.SetRange(EarningsX1.Taxable, true);
                    EarningsX1.SetRange("Pay Period Filter", StringDate, EndDate);
                end;

                trigger OnAfterGetRecord();
                begin
                    EarningsX1.CalcFields(EarningsX1."Total Amount", EarningsX1.Counter, EarningsX1.NoOfUnits);
                    EmployeeBenefits := EmployeeBenefits + EarningsX1."Total Amount";
                    if EarningsX1.Counter <> 0 then
                        Numb := EarningsX1.NoOfUnits / EarningsX1.Counter;
                end;

                trigger OnPostDataItem();
                begin
                    EmployeeBenefits := 0;
                end;

            }
            trigger OnPreDataItem();
            begin
                if (StringDate = 0D) or (EndDate = 0D) then
                    Error('Please specify the correct period on the option of the request form');
                Employee.SetRange("Home Ownership Status", Employee."home ownership status"::"Home Savings");
            end;

            trigger OnAfterGetRecord();
            begin
                TotBasic := 0;
                TotNonQuarter := 0;
                TotQuarter := 0;
                TotGross := 0;
                TotPercentage := 0;
                TotActual := 0;
                TotFixed := 0;
                TotTaxable := 0;
                TotTax := 0;
                TotRelief := 0;
                TotPAYE := 0;
                NoOfMonths := 0;
                TotalBenefits := 0;
                TotOcc := 0;
                TotRet := 0;
                TotPound := 0;
                "Total Quarters" := 0;
                Company.Get;
                CoPin := Company."Company P.I.N";
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        //;
        //ReportsForNavPre;
    end;

    var
        TaxableAmount: Decimal;
        AmountRemaining: Decimal;
        IncomeTax: Decimal;
        TotBasic: Decimal;
        TotNonQuarter: Decimal;
        TotQuarter: Decimal;
        TotGross: Decimal;
        TotPercentage: Decimal;
        TotActual: Decimal;
        TotFixed: Decimal;
        TotTaxable: Decimal;
        TotTax: Decimal;
        TotRelief: Decimal;
        TotPAYE: Decimal;
        TaxablePound: Decimal;
        TotPound: Decimal;
        TotalBenefits: Decimal;
        EmployeeBenefits: Decimal;
        NoOfMonths: Integer;
        NoOfUnits: Integer;
        Numb: Decimal;
        DefinedContrMin: Decimal;
        HRSetup: Record "Human Resources Setup";
        ExcessRetirement: Decimal;
        HseLimit: Decimal;
        BenefitsVar: Decimal;
        QuartersVar: Decimal;
        OccupierVar: Decimal;
        RetirementVar: Decimal;
        PensionLimit: Decimal;
        Relief: Decimal;
        PAYE: Decimal;
        StringDate: Date;
        TotOcc: Decimal;
        TotRet: Decimal;
        Company: Record "Company Information";
        CoPin: Text[30];
        TaxCode: Code[10];
        EndDate: Date;
        GetGroup: Codeunit Payroll5;
        GroupCode: Code[20];
        CUser: Code[20];
        Employers_Name_CaptionLbl: label 'Employers Name:';
        Employee_s_Main_Name_CaptionLbl: label 'Employee''s Main Name:';
        Employee_s_Other_Names_CaptionLbl: label 'Employee''s Other Names:';
        Employers_PIN_CaptionLbl: label 'Employers PIN:';
        Employee_s_PIN_CaptionLbl: label 'Employee''s PIN:';
        KENYA_REVENUE_AUTHORITYCaptionLbl: label 'KENYA REVENUE AUTHORITY';
        INCOME_TAX_DEPARTMENTCaptionLbl: label 'INCOME TAX DEPARTMENT';
        INCOME_TAX_DEDUCTION_CARD_YEAR_CaptionLbl: label 'INCOME TAX DEDUCTION CARD YEAR:';
        MonthCaptionLbl: label 'Month';
        Basic_SalaryCaptionLbl: label 'Basic Salary';
        BenefitsCaptionLbl: label 'Benefits';
        Non_CashCaptionLbl: label 'Non-Cash';
        QuartersCaptionLbl: label 'Quarters';
        Value_OfCaptionLbl: label 'Value Of';
        Total_A_B_CCaptionLbl: label 'Total A+B+C';
        Defined_Contribution_Retr__SchemeCaptionLbl: label 'Defined Contribution Retr. Scheme';
        ECaptionLbl: label 'E';
        Savings_PlanCaptionLbl: label 'Savings Plan';
        Amount_DepositedCaptionLbl: label 'Amount Deposited';
        Retr__Contribution__CaptionLbl: label 'Retr. Contribution &';
        Savings_PlanCaption_Control78Lbl: label 'Savings Plan';
        Taxable_AmountCaptionLbl: label 'Taxable Amount';
        Column_D_GCaptionLbl: label 'Column D-G';
        Round__H_CaptionLbl: label 'Round (H)';
        K_PoundsCaptionLbl: label 'K Pounds';
        Tax_On_JCaptionLbl: label 'Tax On J';
        ReliefCaptionLbl: label 'Relief';
        MonthlyCaptionLbl: label ' Monthly';
        P_A_Y_E_TAXCaptionLbl: label 'P.A.Y.E TAX';
        ACaptionLbl: label 'A';
        BCaptionLbl: label 'B';
        CCaptionLbl: label 'C';
        DCaptionLbl: label 'D';
        F_CaptionLbl: label 'F ';
        G___Lowest_of_E_F_CaptionLbl: label 'G  (Lowest of E+F)';
        HCaptionLbl: label 'H';
        JCaptionLbl: label 'J';
        KCaptionLbl: label 'K';
        LCaptionLbl: label 'L';
        MCaptionLbl: label 'M';
        NAMES_OF_MORTGAGE_FINANCIAL_INSTITUTIONCaptionLbl: label 'NAMES OF MORTGAGE FINANCIAL INSTITUTION';
        EmptyStringCaptionLbl: label '.....................................................................................................................................................';
        L_R__NO__OF_OWNER_OCCUPIED_HOUSE_____________CapLbl: label 'L.R. NO. OF OWNER OCCUPIED HOUSE .........................................................................................';
        DATE_OF_OCCUPATION___________________________CapLbl: label 'DATE OF OCCUPATION .......................................................................................................';
        TOTALSCaptionLbl: label 'TOTALS';
        V4__Where_any_of_t___________________________Lbl: label '(4) Where any of the pay relates to a period other than this year e.g gratuity, give details....................................................................';
        YearCaptionLbl: label 'Year';
        Amount_Kenya_Pounds_CaptionLbl: label 'Amount(Kenya Pounds)';
        Tax__Shs_CaptionLbl: label 'Tax (Shs)';
        Approved________________________________________________________CaptionLbl: label 'Approved:  .....................................................';
        TOTAL_TAX__COL_M__KshsCaptionLbl: label 'TOTAL TAX (COL M) Kshs';
        TOTAL_CHARGEABLE_PAY__COL_J__K_PoundsCaptionLbl: label 'TOTAL CHARGEABLE PAY (COL J) K.Pounds';
        V1__Date_employee_commenced_if_during_the_year_______________________________________________CaptionLbl: label '(1) Date employee commenced if during the year...............................................';
        Name_and_address_of_old_employer__________________________________________________________________CaptionLbl: label '	  Name and address of old employer..................................................................';
        V2__Date_left_if_during_the_year_______CaptionLbl: label '(2) Date left if during the year....................................................................................';
        Name_and_address_of_new_employer_________________________________________________________________CaptionLbl: label '	 Name and address of new employer.................................................................';
        V3__Where_housing_is_provided_State_monthly_rent______________________________________________CaptionLbl: label '(3) Where housing is provided,State monthly rent..............................................';
        CERTIFICATE_OF_PAY_AND_TAXCaptionLbl: label 'CERTIFICATE OF PAY AND TAX';
        NAME____________________________________________Lbl: label 'NAME			....................................................................................................................................';
        ADDRESS_________________________________________Lbl: label 'ADDRESS	 .....................................................................................................................................';
        SIGNATURE__________________________________________________________Lbl: label 'SIGNATURE   ....................................................................................................................................';
        DATE___STAMP______________________________________________________Lbl: label 'DATE & STAMP   ....................................................................................................................................';
        APPENDIX_1BCaptionLbl: label 'APPENDIX 1B';
        ITEMCaptionLbl: label 'ITEM';
        NO_CaptionLbl: label 'NO.';
        RATECaptionLbl: label 'RATE';
        NO__OF_MONTHSCaptionLbl: label 'NO. OF MONTHS';
        TOTAL_AMOUNT_K__shs_CaptionLbl: label 'TOTAL AMOUNT K. shs.';
        CALCULATION_OF_BENEFITSCaptionLbl: label 'CALCULATION OF BENEFITS';
        TOTAL_BENEFITS_IN_YEARCaptionLbl: label 'TOTAL BENEFITS IN YEAR';
        Where_actual_cost_is_higher_actual_cost_is_brought_to_charge_in_fullCaptionLbl: label '* Where actual cost is higher than given monthly rates of benefits then the actual cost is brought to charge in full';
        LOW_INTERES_RATE_BELOW_PRESCRIBED_RATE_OF__15___PER_CENT_CaptionLbl: label 'LOW INTERES RATE BELOW PRESCRIBED RATE OF (15%) PER CENT.';
        EMPLOYERS_LOAN____Kshs__________RATE_DIFFERENCE_____PRESCRIBED_RARE___EMPLOYERS_Lbl: label 'EMPLOYERS LOAN   =Kshs..........................@............% RATE		  RATE DIFFERENCE	(PRESCRIBED RARE - EMPLOYERS RATE)  =	15%  -   ..........%  =   ........%';
        MONTHLY_BENEFIT_______________________________________X________Kshs________Lbl: label 'MONTHLY BENEFIT			(RATE DIFFERENCE X LOAN)/12	=	  .................................%	 X		Kshs. ......................../12   = Kshs...............................';
        MOTOR_CARSCaptionLbl: label 'MOTOR CARS';
        Upto_1500cCaptionLbl: label 'Upto 1500c';
        V1501cc_1750ccCaptionLbl: label '1501cc-1750cc';
        V1751cc_2000cCaptionLbl: label '1751cc-2000c';
        V2001cc_3000ccCaptionLbl: label '2001cc-3000cc';
        Over_3000cCaptionLbl: label 'Over 3000c';
        EmptyStringCaption_Control210Lbl: label '=';
        EmptyStringCaption_Control211Lbl: label '=';
        EmptyStringCaption_Control212Lbl: label '=';
        EmptyStringCaption_Control213Lbl: label '=';
        EmptyStringCaption_Control214Lbl: label '=';
        FOR_PICK_UPS__PANEL_VANS_AND_LAND_ROVERS_REFER_TO_APPENDIX_5_OF_EMPLOYERS_GUIDE_CaptionLbl: label 'FOR PICK-UPS, PANEL VANS AND LAND-ROVERS REFER TO APPENDIX 5 OF EMPLOYERS GUIDE.';
        If_this_amount_does_not_agree_with_total_of_Col__b_overleaf__attach_explanation_CaptionLbl: label 'If this amount does not agree with total of Col. b overleaf, attach explanation.';
        CAR_BENEFIT___The_higher_the_amount_of_the: label 'CAR BENEFIT - The higher the amount of the monthly rate or the prescribed  rate of benefits is to be brought to charge:-';
        PRESCRIBED_RATE___1996___1__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl: label 'PRESCRIBED RATE : 1996 - 1% per month of the initial cost of the vehicle   ';
        V1997___1_5__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl: label '1997 - 1.5% per month of the initial cost of the vehicle   ';
        V1998_et_seq____2_0__per_month_of_the_initial_cost_of_the_vehicle___CaptionLbl: label '1998 et seq. - 2.0% per month of the initial cost of the vehicle   ';

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
        AmountRemaining := TaxableAmount;
        AmountRemaining := ROUND(AmountRemaining, 0.01);
        EndTax := false;
        TaxTable.SetRange("Table Code", TaxCode);
        if TaxTable.Find('-') then begin
            repeat
                if AmountRemaining <= 0 then
                    EndTax := true
                else begin
                    if ROUND((TaxableAmount), 0.01) > TaxTable."Upper Limit" then
                        Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                    else begin
                        Tax := AmountRemaining * TaxTable.Percentage / 100;
                        TotalTax := TotalTax + Tax;
                        EndTax := true;
                    end;
                    if not EndTax then begin
                        AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                        TotalTax := TotalTax + Tax;
                    end;
                end;
            until (TaxTable.Next = 0) or EndTax = true;
        end;
        TotalTax := TotalTax;
        TotalTax := PayrollRounding(TotalTax);
        IncomeTax := -TotalTax;
        if not Employee."Pays tax" then
            IncomeTax := 0;
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511136_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511136;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
