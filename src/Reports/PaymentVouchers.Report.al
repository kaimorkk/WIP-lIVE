//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511013_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511013) { }
//type("System.IO.Path"; System_IO_Path51511013) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193452 "Payment Vouchers"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/PaymentVouchers.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Payments; Payments)
        {
            DataItemTableView = sorting(No);
            RequestFilterFields = No;
            column(ReportForNavId_3752; 3752) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfo_Name; UpperCase(CompanyInfo.Name))
            {
            }
            column(STRSUBSTNO_TXT002_CompanyInfo_Address_CompanyInfo__CompanyInfo_City_; StrSubstNo(TXT002, CompanyInfo.Address, CompanyInfo, CompanyInfo.City))
            {
            }
            column(city; CompanyInfo.City)
            {
            }
            column(phone; CompanyInfo."Phone No.")
            {
            }
            column(postcode; CompanyInfo."Post Code")
            {
            }
            column(address2; CompanyInfo."Address 2")
            {
            }
            column(address1; CompanyInfo.Address)
            {
            }
            column(name; CompanyInfo.Name)
            {
            }
            column(email; CompanyInfo."E-Mail")
            {
            }
            column(website; CompanyInfo."Home Page")
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(PayeeBankName; PayeeBankName)
            {
            }
            column(PayingBankAccount_Payments; Payments."Paying Bank Account")
            {
            }
            column(BankName; Payments."Bank Name")
            {
            }
            column(Payments1_Payments1_No; Payments.No)
            {
            }
            column(Payments1_Payments1__Cheque_No_; Payments."Cheque No")
            {
            }
            column(Payments1_Payments1_Date; Payments.Date)
            {
            }
            column(PayMode_Payments; Payments."Pay Mode")
            {
            }
            column(Payments1_Payments1_Payee; Payments.Payee)
            {
            }
            column(Remarks; Remarks)
            {
            }
            column(Total_Amount; Payments."Total Amount")
            {
            }
            column(PayeeAddress; PayeeAddress)
            {
            }
            column(NumberText_1_; NumberText[1])
            {
            }
            column(NumberText_2_; NumberText[2])
            {
            }
            column(PreparedbyName; Payments.Cashier)
            {
            }
            column(AuthorizedName; AuthorizedName)
            {
            }
            column(V1stapprover_; "1stapprover")
            {
            }
            column(EmptyString; '_______________________________________')
            {
            }
            column(V2ndapprover_; "2ndapprover")
            {
            }
            column(V2ndapproverdate_; "2ndapproverdate")
            {
            }
            column(V3rdapproverdate_; "3rdapproverdate")
            {
            }
            column(UserRecApp1_Picture; UserRecApp1.Picture)
            {
            }
            column(UserRecApp2_Picture; UserRecApp2.Picture)
            {
            }
            column(ChequeNo_Payments; Payments."Cheque No")
            {
            }
            column(V3rdapprover_; "3rdapprover")
            {
            }
            column(UserRecApp3_Picture; UserRecApp3.Picture)
            {
            }
            column(Designation_1; Designation1)
            {
            }
            column(Designation_2; Designation2)
            {
            }
            column(Designation_3; Designation3)
            {
            }
            column(V1stapproverdate_; "1stapproverdate")
            {
            }
            column(PAYMENT_VOUCHERCaption; PAYMENT_VOUCHERCaptionLbl)
            {
            }
            column(BANK_NAMECaption; BANK_NAMECaptionLbl)
            {
            }
            column(VOUCHER_NOCaption; VOUCHER_NOCaptionLbl)
            {
            }
            column(CHEQUE_NOCaption; CHEQUE_NOCaptionLbl)
            {
            }
            column(PAYEECaption; PAYEECaptionLbl)
            {
            }
            column(PREPARED_BYCaption; PREPARED_BYCaptionLbl)
            {
            }
            column(CHECKED_BY_Caption; CHECKED_BY_CaptionLbl)
            {
            }
            column(SIGNATURECaption; SIGNATURECaptionLbl)
            {
            }
            column(DATE__________________________________________________Caption; DATE__________________________________________________CaptionLbl)
            {
            }
            column(PAYMENT_RECEIVED_BYCaption; PAYMENT_RECEIVED_BYCaptionLbl)
            {
            }
            column(SIGNATURE__________________________________________________Caption; SIGNATURE__________________________________________________CaptionLbl)
            {
            }
            column(DATE__________________________________________________Caption_Control1000000073; DATE__________________________________________________Caption_Control1000000073Lbl)
            {
            }
            column(APPROVALCaption; APPROVALCaptionLbl)
            {
            }
            column(SIGNATURECaption_Control1000000001; SIGNATURECaption_Control1000000001Lbl)
            {
            }
            column(DATE__________________________________________________Caption_Control1000000003; DATE__________________________________________________Caption_Control1000000003Lbl)
            {
            }
            column(APPROVED_BY_Caption; APPROVED_BY_CaptionLbl)
            {
            }
            column(SIGNATURE_Caption; SIGNATURE_CaptionLbl)
            {
            }
            column(DATE__________________________________________________Caption_Control1000000021; DATE__________________________________________________Caption_Control1000000021Lbl)
            {
            }
            column(Payecode; PAYECODE)
            {
            }
            column(WhtCode; WHTACC)
            {
            }
            column(Purpose; Purpose)
            {
            }
            column(TotalNetAmt; TotalNetAmt)
            {
            }
            column(TotalVATAmt; TotalVATAmt)
            {
            }
            column(TotalWHeldAmt; TotalWHeldAmt)
            {
            }
            column(TotalBaseAmt; TotalBaseAmt)
            {
            }
            column(TotalPayeeAmt; TotalPayeeAmt)
            {
            }
            column(TotalTaxAmt; TotalTaxAmt)
            {
            }
            column(PO_INV_No; "PO/INV No")
            {
            }
            column(Base_Amount; "Base Amount")
            {
            }
            dataitem(Integer; Integer)
            {
                DataItemTableView = sorting(Number);

                column(WHTaxLabel_Number_; WHTaxLabel[Number])
                {
                }
                column(WHTaxAmt_Number_; WHTaxAmt[Number])
                {
                }
                column(WHTaxRate_Number_; WHTaxRate[Number])
                {
                }

                trigger OnPreDataItem()
                begin
                    Integer.SetRange(Number, 1, j);
                end;
            }
            dataitem("PV Lines1"; "PV Lines1")
            {
                DataItemLink = "PV No" = field(No);
                DataItemTableView = sorting("PV No", "Line No");
                column(ReportForNavId_7288; 7288) { } // Autogenerated by ForNav - Do not delete
                column(PV_Lines1_Description; "PV Lines1".Description)
                {
                }
                column(PV_Lines1_Amount; "PV Lines1".Amount)
                {
                }
                column(PV_Lines1__Shortcut_Dimension_1_Code_; "PV Lines1"."Shortcut Dimension 1 Code")
                {
                }
                column(PV_Lines1__Account_Type_; "PV Lines1"."Account Type")
                {
                }
                column(PV_Lines1__Account_No__; "PV Lines1"."Account No")
                {
                }
                column(PV_Lines1__Shortcut_Dimension_2_Code_; "PV Lines1"."Shortcut Dimension 2 Code")
                {
                }
                column(STRSUBSTNO___1__2__CurrencyCodeText_Amount_; StrSubstNo('%1 %2', CurrencyCodeText, Amount))
                {
                }
                column(PV_Lines1_AmountCaption; FieldCaption(Amount))
                {
                }
                column(PV_Lines1__Shortcut_Dimension_1_Code_Caption; FieldCaption("Shortcut Dimension 1 Code"))
                {
                }
                column(PV_Lines1__Account_Type_Caption; FieldCaption("Account Type"))
                {
                }
                column(PV_Lines1__Account_No__Caption; FieldCaption("Account No"))
                {
                }
                column(PV_Lines1__Shortcut_Dimension_2_Code_Caption; FieldCaption("Shortcut Dimension 2 Code"))
                {
                }
                column(PV_Lines1_PV_No; "PV Lines1"."PV No")
                {
                }
                column(PV_Lines1_Line_No; "PV Lines1"."Line No")
                {
                }
                column(PV_Lines_VAT_Amount; "PV Lines1"."VAT Amount")
                {
                }
                column(PV_Lines_WTax_Amount; "PV Lines1"."W/Tax Amount")
                {
                }
                column(PV_Lines_Net_Amount; "PV Lines1"."Net Amount")
                {
                }
                column(VATAmount; VATAmount)
                {
                }
                column(WTaxAmount; WTaxAmount)
                {
                }
                column(NetAmount; NetAmount)
                {
                }
                column(PV_Lines1_Retention_Amount; "PV Lines1"."Retention Amount")
                {
                }
                column(RetentionAmount; RetentionAmount)
                {
                }
                column(AppliestoDocNo_PVLines1; "PV Lines1"."Applies to Doc. No")
                {
                }
                column(AccountNo_PVLines1; "PV Lines1"."Account No")
                {
                }
                column(PV_Lines1__Account_Name; "PV Lines1"."Account Name")
                {
                }
                column(PV_Lines1__Description; "PV Lines1".Description)
                {
                }
            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.Get;
                CompanyInfo.CalcFields(CompanyInfo.Picture);
            end;

            trigger OnAfterGetRecord();
            var
                PVLines: Record "PV Lines1";
            begin
                DimValues.Reset;
                DimValues.SetRange(DimValues."Dimension Code", 'BRANCHES');
                DimValues.SetRange(DimValues.Code, Payments."Branch Code");
                if DimValues.Find('-') then begin
                    CompName := DimValues.Name;
                end
                else begin
                    CompName := '';
                end;
                if Payments.Currency <> '' then
                    CurrencyCodeText := Payments.Currency
                else
                    CurrencyCodeText := GLsetup."LCY Code";
                Payments.CalcFields("Total Amount", "Base Amount");
                InitTextVariable;
                FormatNoText(NumberText, "Base Amount", '');
                Banks.Reset;
                Banks.SetRange(Banks."No.", Payments."KBA Bank Code");
                if Banks.Find('-') then begin
                    BankName := Banks.Name;
                end
                else begin
                    BankName := '';
                end;
                Bank.Reset;
                Bank.SetRange(Bank."No.", Payments."Paying Bank Account");
                if Bank.Find('-') then begin
                    PayeeBankName := Bank.Name;
                end
                else begin
                    PayeeBankName := '';
                end;
                PGAccount := '';
                if Payments."Account Type" = Payments."account type"::"G/L Account" then begin
                    PGAccount := Payments."Account No.";
                end;
                if Payments."Account Type" = Payments."account type"::"Bank Account" then begin
                    Bank.Reset;
                    Bank.SetRange(Bank."No.", Payments."Account No.");
                    if Bank.Find('-') then begin
                        Bank.TestField(Bank."Bank Acc. Posting Group");
                        BankPG.Reset;
                        BankPG.SetRange(BankPG.Code, Bank."Bank Acc. Posting Group");
                        if BankPG.Find('-') then begin
                            PGAccount := BankPG."G/L Account No.";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::Vendor then begin
                    Vend.Reset;
                    Vend.SetRange(Vend."No.", Payments."Account No.");
                    if Vend.Find('-') then begin
                        Vend.TestField(Vend."Vendor Posting Group");
                        VendorPG.Reset;
                        VendorPG.SetRange(VendorPG.Code, Vend."Vendor Posting Group");
                        if VendorPG.Find('-') then begin
                            PGAccount := VendorPG."Payables Account";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::Customer then begin
                    Cust.Reset;
                    Cust.SetRange(Cust."No.", Payments."Account No.");
                    if Cust.Find('-') then begin
                        Cust.TestField(Cust."Customer Posting Group");
                        CustPG.Reset;
                        CustPG.SetRange(CustPG.Code, Cust."Customer Posting Group");
                        if CustPG.Find('-') then begin
                            PGAccount := CustPG."Receivables Account";
                        end;
                    end;
                end;
                if Payments."Account Type" = Payments."account type"::"Fixed Asset" then begin
                    FA.Reset;
                    FA.SetRange(FA."FA No.", Payments."Account No.");
                    if FA.Find('-') then begin
                        FA.TestField(FA."FA Posting Group");
                        FAPG.Reset;
                        FAPG.SetRange(FAPG.Code, FA."FA Posting Group");
                        if FAPG.Find('-') then begin
                            PGAccount := FAPG."Acquisition Cost Account";
                        end;
                    end;
                end;
                BankAccountUsed := '';
                //Payments.TESTFIELD(Payments."Pay Mode");
                if Payments."Pay Mode" = 'CASH' then begin
                    BankAccountUsed := Payments."Cashier Bank Account";
                end
                else begin
                    BankAccountUsed := Payments."Paying Bank Account";
                end;
                BankAccountUsedName := '';
                Bank.Reset;
                Bank.SetRange(Bank."No.", BankAccountUsed);
                if Bank.Find('-') then begin
                    Bank.TestField(Bank."Bank Acc. Posting Group");
                    BankPG.Reset;
                    BankPG.SetRange(BankPG.Code, Bank."Bank Acc. Posting Group");
                    if BankPG.Find('-') then begin
                        BankAccountUsed := BankPG."G/L Account No.";
                    end;
                    //BankAccountUsedName:=Bank.Name;
                end;
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", BankAccountUsed);
                if GLAccount.Find('-') then begin
                    BankAccountUsedName := GLAccount.Name;
                end;
                PGAccountUsedName := '';
                GLAccount.Reset;
                GLAccount.SetRange(GLAccount."No.", PGAccount);
                if GLAccount.Find('-') then begin
                    PGAccountUsedName := GLAccount.Name;
                end;
                /* IF UserRec.GET(Payments.Cashier) THEN
				 BEGIN
				 //MESSAGE('%1',Payments.Cashier);
				 UserRec.CALCFIELDS(UserRec.Picture);
				 END;*/
                ApprovalEntries.Reset;
                ApprovalEntries.SetRange(ApprovalEntries."Table ID", 51511003);
                ApprovalEntries.SetRange(ApprovalEntries."Document No.", Payments.No);
                ApprovalEntries.SetRange(ApprovalEntries.Status, ApprovalEntries.Status::Approved);
                if ApprovalEntries.Find('-') then begin
                    repeat
                        i := i + 1;
                        if i = 1 then begin
                            "1stapprover" := ApprovalEntries."Sender ID";
                            "1stapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp1.Get("1stapprover") then
                                UserRecApp1.CalcFields(UserRecApp1.Picture);
                            if EmpRec.Get(UserRecApp1."Employee No.") then
                                Designation1 := EmpRec."Job Title";
                        end;
                        if i = 2 then begin
                            "2ndapprover" := ApprovalEntries."Approver ID";
                            "2ndapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp2.Get("2ndapprover") then
                                UserRecApp2.CalcFields(UserRecApp2.Picture);
                            if EmpRec.Get(UserRecApp2."Employee No.") then
                                Designation2 := EmpRec."Job Title";
                        end;
                        if i = 3 then begin
                            "3rdapprover" := ApprovalEntries."Approver ID";
                            "3rdapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp3.Get("3rdapprover") then
                                UserRecApp3.CalcFields(UserRecApp3.Picture);
                            if EmpRec.Get(UserRecApp3."Employee No.") then
                                Designation3 := EmpRec."Job Title";
                        end;
                    until ApprovalEntries.Next = 0;
                end;
                VATSetup.Reset;
                VATSetup.SetRange(VATSetup."VAT Prod. Posting Group", "PV Lines1"."W/Tax Code");
                VATSetup.SetRange(VATSetup."VAT Prod. Posting Group", 'PAYE');
                if VATSetup.Find('-')
                  then begin
                    WHTACC := VATSetup."Purchase VAT Account";
                end;

                PVLines.Reset();
                PVLines.SetRange("PV No", Payments.No);
                if PVLines.FindSet() then begin
                    PVLines.CalcSums("Net Amount");
                    PVLines.CalcSums("VAT Amount");
                    PVLines.CalcSums("W/Tax Amount");
                    PVLines.CalcSums(Amount);
                    PVLines.CalcSums("Payee Amount");
                    TotalNetAmt := PVLines."Net Amount";
                    TotalVATAmt := PVLines."VAT Amount";
                    TotalWHeldAmt := PVLines."W/Tax Amount";
                    TotalBaseAmt := PVLines.Amount;
                    TotalPayeeAmt := PVLines."Payee Amount";
                    TotalTaxAmt := TotalVATAmt + TotalPayeeAmt;
                end;

                Clear(WHTaxAmt);

                for j := 1 to NoOfWHTs do begin
                    PVLines.Reset();
                    PVLines.SetRange("PV No", Payments.No);
                    PVLines.SetRange("W/Tax Code", WHTaxCode[j]);
                    if PVLines.FindSet() then begin
                        PVLines.CalcSums("W/Tax Amount");
                        WHTaxAmt[j] := PVLines."W/Tax Amount";
                    end;
                end;

            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }
    labels
    {
        SerialNo = 'Serial No.';
        PayeeLabel = 'Name of Payee:';
        Particulars = 'PARTICULARS';
        LpoNo = 'LPO (NO.)';
        InvoiceNo = 'INVOICE (NO.)';
        AmountLabel = 'AMOUNT';
        AmountsInwords = 'Amount in Words';
        AuthorizedBy = 'Authorized by';
        Naration = 'I Certify that, the Invoice(s) above are for incured expendirue and authorized purpose';
        Total = 'TOTAL';
        Dr = 'AC (Dr)';
        Cr = 'AC (Cr)';
        Designation = 'Designation';
        Sign = 'Signature';
        ChequeNo = 'Cheque No.';
    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        GLsetup.Get;
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
        end;
        //;
        //ReportsForNavPre;

        VATProd.Reset();
        VATProd.SetRange("Witholding Tax", true);
        if VATProd.FindSet() then begin
            repeat
                j := j + 1;
                WHTaxCode[j] := VATProd.Code;
                WHTaxLabel[j] := VATProd.Description;
                WHTaxRate[j] := VATProd.Rate;
                NoOfWHTs := NoOfWHTs + 1;
            until VATProd.Next = 0;
        end;
    end;

    var
        PreparedbyName: Text[100];
        AuthorizedName: Text[100];
        DimValues: Record "Dimension Value";
        CompName: Text[100];
        TypeOfDoc: Text[100];
        RecPayTypes: Record Receipts1;
        BankName: Text[100];
        Banks: Record "Bank Account";
        Bank: Record "Bank Account";
        PayeeBankName: Text[100];
        VendorPG: Record "Vendor Posting Group";
        CustPG: Record "Customer Posting Group";
        FAPG: Record "FA Posting Group";
        BankPG: Record "Bank Account Posting Group";
        PGAccount: Text[50];
        Vend: Record Vendor;
        Cust: Record Customer;
        FA: Record "FA Depreciation Book";
        BankAccountUsed: Text[50];
        BankAccountUsedName: Text[100];
        PGAccountUsedName: Text[50];
        GLAccount: Record "G/L Account";
        CompanyInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        OnesText: array[20] of Text[30];
        TensText: array[10] of Text[30];
        ExponentText: array[5] of Text[30];
        GLsetup: Record "General Ledger Setup";
        NumberText: array[2] of Text[80];
        CurrencyCodeText: Code[10];
        TXT001: label '%1 %2';
        TXT002: label '%1, %2  %3';
        ApprovalEntries: Record "Approval Entry";
        "1stapprover": Text[30];
        "2ndapprover": Text[30];
        i: Integer;
        "1stapproverdate": DateTime;
        "2ndapproverdate": DateTime;
        UserRec: Record "User Setup";
        UserRecApp1: Record "User Setup";
        UserRecApp2: Record "User Setup";
        UserRecApp3: Record "User Setup";
        "3rdapprover": Text[30];
        "3rdapproverdate": DateTime;
        PAYMENT_VOUCHERCaptionLbl: label 'PAYMENT VOUCHER';
        BANK_NAMECaptionLbl: label 'BANK NAME';
        VOUCHER_NOCaptionLbl: label 'VOUCHER NO';
        CHEQUE_NOCaptionLbl: label 'CHEQUE NO';
        PAYEECaptionLbl: label 'PAYEE';
        PREPARED_BYCaptionLbl: label 'Prepared by';
        CHECKED_BY_CaptionLbl: label 'Checked by';
        SIGNATURECaptionLbl: label 'SIGNATURE';
        DATE__________________________________________________CaptionLbl: label 'DATE _________________________________________________';
        PAYMENT_RECEIVED_BYCaptionLbl: label 'PAYMENT RECEIVED BY';
        SIGNATURE__________________________________________________CaptionLbl: label 'SIGNATURE _________________________________________________';
        DATE__________________________________________________Caption_Control1000000073Lbl: label 'DATE _________________________________________________';
        APPROVALCaptionLbl: label 'APPROVAL';
        SIGNATURECaption_Control1000000001Lbl: label 'SIGNATURE';
        DATE__________________________________________________Caption_Control1000000003Lbl: label 'DATE _________________________________________________';
        APPROVED_BY_CaptionLbl: label 'APPROVED BY ';
        SIGNATURE_CaptionLbl: label 'SIGNATURE ';
        DATE__________________________________________________Caption_Control1000000021Lbl: label 'DATE _________________________________________________';
        VATAmount: label 'VAT Amount';
        WTaxAmount: label 'W/Tax Amount';
        NetAmount: label 'Net Amount';
        RetentionAmount: label 'Retention Amount';
        PayeeAddress: Text[250];
        OrderNo: Code[50];
        PostedInvoice: Record "Purch. Inv. Header";
        Text000: label 'Preview is not allowed.';
        Text001: label 'Last Check No. must be filled in.';
        Text002: label 'Filters on %1 and %2 are not allowed.';
        Text003: label 'XXXXXXXXXXXXXXXX';
        Text004: label 'must be entered.';
        Text005: label 'The Bank Account and the General Journal Line must have the same currency.';
        Text006: label 'Salesperson';
        Text007: label 'Purchaser';
        Text008: label 'Both Bank Accounts must have the same currency.';
        Text009: label 'Our Contact';
        Text010: label 'XXXXXXXXXX';
        Text011: label 'XXXX';
        Text012: label 'XX.XXXXXXXXXX.XXXX';
        Text013: label '%1 already exists.';
        Text014: label 'Check for %1 %2';
        Text015: label 'Payment';
        Text016: label 'In the Check report, One Check per Vendor and Document No.\';
        Text017: label 'must not be activated when Applies-to ID is specified in the journal lines.';
        Text018: label 'XXX';
        Text019: label 'Total';
        Text020: label 'The total amount of check %1 is %2. The amount must be positive.';
        Text021: label 'VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID';
        Text022: label 'NON-NEGOTIABLE';
        Text023: label 'Test print';
        Text024: label 'XXXX.XX';
        Text025: label 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
        Text026: label 'ZERO';
        Text027: label 'HUNDRED';
        Text028: label 'AND';
        Text029: label '%1 results in a written number that is too long.';
        Text030: label ' is already applied to %1 %2 for customer %3.';
        Text031: label ' is already applied to %1 %2 for vendor %3.';
        Text032: label 'ONE';
        Text033: label 'TWO';
        Text034: label 'THREE';
        Text035: label 'FOUR';
        Text036: label 'FIVE';
        Text037: label 'SIX';
        Text038: label 'SEVEN';
        Text039: label 'EIGHT';
        Text040: label 'NINE';
        Text041: label 'TEN';
        Text042: label 'ELEVEN';
        Text043: label 'TWELVE';
        Text044: label 'THIRTEEN';
        Text045: label 'FOURTEEN';
        Text046: label 'FIFTEEN';
        Text047: label 'SIXTEEN';
        Text048: label 'SEVENTEEN';
        Text049: label 'EIGHTEEN';
        Text050: label 'NINETEEN';
        Text051: label 'TWENTY';
        Text052: label 'THIRTY';
        Text053: label 'FORTY';
        Text054: label 'FIFTY';
        Text055: label 'SIXTY';
        Text056: label 'SEVENTY';
        Text057: label 'EIGHTY';
        Text058: label 'NINETY';
        Text059: label 'THOUSAND';
        Text060: label 'MILLION';
        Text061: label 'BILLION';
        Text062: label 'G/L Account,Customer,Vendor,Bank Account';
        Text063: label 'Net Amount %1';
        Text064: label '%1 must not be %2 for %3 %4.';
        ApprovalName: Text;
        UserSetup: Record User;
        Designation1: Text[50];
        Designation2: Text[50];
        Designation3: Text[50];
        VATSetup: Record "VAT Posting Setup";
        WHTACC: Code[20];
        PAYECODE: Code[20];
        EmpRec: Record Employee;
        TotalVATAmt: Decimal;
        TotalWHeldAmt: Decimal;
        TotalNetAmt: Decimal;
        TotalBaseAmt: Decimal;
        TotalPayeeAmt: Decimal;
        TotalTaxAmt: Decimal;
        PVLines: Record "PV Lines1";
        WHTaxLabel: array[10] of Text[100];
        WHTaxAmt: array[10] of Decimal;
        WHTaxCode: array[10] of Code[100];
        WHTaxRate: array[10] of Code[10];
        j: Integer;
        VATProd: Record "VAT Product Posting Group";
        NoOfWHTs: Integer;

    procedure FormatNoText(var NoText: array[2] of Text[80]; No: Decimal; CurrencyCode: Code[10])
    var
        PrintExponent: Boolean;
        Ones: Integer;
        Tens: Integer;
        Hundreds: Integer;
        Exponent: Integer;
        NoTextIndex: Integer;
    begin
        Clear(NoText);
        NoTextIndex := 1;
        NoText[1] := '****';
        if No < 1 then
            AddToNoText(NoText, NoTextIndex, PrintExponent, Text026)
        else begin
            for Exponent := 4 downto 1 do begin
                PrintExponent := false;
                Ones := No DIV Power(1000, Exponent - 1);
                Hundreds := Ones DIV 100;
                Tens := (Ones MOD 100) DIV 10;
                Ones := Ones MOD 10;
                if Hundreds > 0 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Hundreds]);
                    AddToNoText(NoText, NoTextIndex, PrintExponent, Text027);
                end;
                if Tens >= 2 then begin
                    AddToNoText(NoText, NoTextIndex, PrintExponent, TensText[Tens]);
                    if Ones > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Ones]);
                end else
                    if (Tens * 10 + Ones) > 0 then
                        AddToNoText(NoText, NoTextIndex, PrintExponent, OnesText[Tens * 10 + Ones]);
                if PrintExponent and (Exponent > 1) then
                    AddToNoText(NoText, NoTextIndex, PrintExponent, ExponentText[Exponent]);
                No := No - (Hundreds * 100 + Tens * 10 + Ones) * Power(1000, Exponent - 1);
            end;
        end;
        AddToNoText(NoText, NoTextIndex, PrintExponent, Text028);
        AddToNoText(NoText, NoTextIndex, PrintExponent, Format(No * 100) + ' Cents');
        if CurrencyCode <> '' then
            AddToNoText(NoText, NoTextIndex, PrintExponent, '');
    end;

    local procedure AddToNoText(var NoText: array[2] of Text[80]; var NoTextIndex: Integer; var PrintExponent: Boolean; AddText: Text[30])
    begin
        PrintExponent := true;
        while StrLen(NoText[NoTextIndex] + ' ' + AddText) > MaxStrLen(NoText[1]) do begin
            NoTextIndex := NoTextIndex + 1;
            if NoTextIndex > ArrayLen(NoText) then
                Error(Text029, AddText);
        end;
        NoText[NoTextIndex] := DelChr(NoText[NoTextIndex] + ' ' + AddText, '<');
    end;

    procedure InitTextVariable()
    begin
        OnesText[1] := Text032;
        OnesText[2] := Text033;
        OnesText[3] := Text034;
        OnesText[4] := Text035;
        OnesText[5] := Text036;
        OnesText[6] := Text037;
        OnesText[7] := Text038;
        OnesText[8] := Text039;
        OnesText[9] := Text040;
        OnesText[10] := Text041;
        OnesText[11] := Text042;
        OnesText[12] := Text043;
        OnesText[13] := Text044;
        OnesText[14] := Text045;
        OnesText[15] := Text046;
        OnesText[16] := Text047;
        OnesText[17] := Text048;
        OnesText[18] := Text049;
        OnesText[19] := Text050;
        TensText[1] := '';
        TensText[2] := Text051;
        TensText[3] := Text052;
        TensText[4] := Text053;
        TensText[5] := Text054;
        TensText[6] := Text055;
        TensText[7] := Text056;
        TensText[8] := Text057;
        TensText[9] := Text058;
        ExponentText[1] := '';
        ExponentText[2] := Text059;
        ExponentText[3] := Text060;
        ExponentText[4] := Text061;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511013_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511013;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
