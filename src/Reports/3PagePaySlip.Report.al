//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511128_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511128) { }
//type("System.IO.Path"; System_IO_Path51511128) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193546 "3 Page PaySlip"
{
    RDLCLayout = './Layouts/3PagePaySlip.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            DataItemTableView = sorting("No.") order(ascending);
            RequestFilterFields = "Pay Period Filter", "No.", "Global Dimension 1 Code", "Global Dimension 2 Code", "Section/Location";
            column(ReportForNavId_7528; 7528) { } // Autogenerated by ForNav - Do not delete
            column(Addr_1__1_; Addr[1] [1])
            {
            }
            column(Addr_1__2_; Addr[1] [2])
            {
            }
            column(Addr_1__5_; Addr[1] [5])
            {
            }
            column(Addr_2__1_; Addr[2] [1])
            {
            }
            column(Addr_2__2_; Addr[2] [2])
            {
            }
            column(Addr_2__5_; Addr[2] [5])
            {
            }
            column(Addr_3__1_; Addr[3] [1])
            {
            }
            column(Addr_3__2_; Addr[3] [2])
            {
            }
            column(Addr_3__5_; Addr[3] [5])
            {
            }
            column(EmpArray_1_6_; EmpArray[1, 6])
            {
            }
            column(EmpArray_2_6_; EmpArray[2, 6])
            {
            }
            column(EmpArray_1_3_; EmpArray[1, 3])
            {
                DecimalPlaces = 2 : 2;
            }
            column(EmpArray_2_3_; EmpArray[2, 3])
            {
            }
            column(EmpArray_3_3_; EmpArray[3, 3])
            {
            }
            column(EmpArray_3_6_; EmpArray[3, 6])
            {
            }
            column(ArrEarnings_1_1_; ArrEarnings[1, 1])
            {
            }
            column(ArrEarnings_1_2_; ArrEarnings[1, 2])
            {
            }
            column(ArrEarnings_1_3_; ArrEarnings[1, 3])
            {
            }
            column(ArrEarnings_2_1_; ArrEarnings[2, 1])
            {
            }
            column(ArrEarnings_2_2_; ArrEarnings[2, 2])
            {
            }
            column(ArrEarnings_2_3_; ArrEarnings[2, 3])
            {
            }
            column(ArrEarnings_3_1_; ArrEarnings[3, 1])
            {
            }
            column(ArrEarnings_3_2_; ArrEarnings[3, 2])
            {
            }
            column(ArrEarnings_3_3_; ArrEarnings[3, 3])
            {
            }
            column(ArrDeductions_1_1_; ArrDeductions[1, 1])
            {
            }
            column(ArrDeductions_1_2_; ArrDeductions[1, 2])
            {
            }
            column(ArrDeductions_1_3_; ArrDeductions[1, 3])
            {
            }
            column(ArrDeductions_2_1_; ArrDeductions[2, 1])
            {
            }
            column(ArrDeductions_2_2_; ArrDeductions[2, 2])
            {
            }
            column(ArrDeductions_2_3_; ArrDeductions[2, 3])
            {
            }
            column(ArrDeductions_3_1_; ArrDeductions[3, 1])
            {
            }
            column(ArrDeductions_3_2_; ArrDeductions[3, 2])
            {
            }
            column(ArrDeductions_3_3_; ArrDeductions[3, 3])
            {
            }
            column(ArrDeductions_1_4_; ArrDeductions[1, 4])
            {
            }
            column(ArrDeductions_2_4_; ArrDeductions[2, 4])
            {
            }
            column(ArrDeductions_3_4_; ArrDeductions[3, 4])
            {
            }
            column(ArrDeductions_1_5_; ArrDeductions[1, 5])
            {
            }
            column(ArrDeductions_2_5_; ArrDeductions[2, 5])
            {
            }
            column(ArrDeductions_3_5_; ArrDeductions[3, 5])
            {
            }
            column(ArrEarningsAmt_1_1_; ArrEarningsAmt[1, 1])
            {
            }
            column(ArrEarningsAmt_1_2_; ArrEarningsAmt[1, 2])
            {
            }
            column(ArrEarningsAmt_1_3_; ArrEarningsAmt[1, 3])
            {
            }
            column(ArrEarningsAmt_2_3_; ArrEarningsAmt[2, 3])
            {
            }
            column(ArrEarningsAmt_2_2_; ArrEarningsAmt[2, 2])
            {
            }
            column(ArrEarningsAmt_2_1_; ArrEarningsAmt[2, 1])
            {
            }
            column(ArrEarningsAmt_3_1_; ArrEarningsAmt[3, 1])
            {
            }
            column(ArrEarningsAmt_3_2_; ArrEarningsAmt[3, 2])
            {
            }
            column(ArrEarningsAmt_3_3_; ArrEarningsAmt[3, 3])
            {
            }
            column(ArrDeductionsAmt_2_1_; ArrDeductionsAmt[2, 1])
            {
            }
            column(ArrDeductionsAmt_2_2_; ArrDeductionsAmt[2, 2])
            {
            }
            column(ArrDeductionsAmt_2_4_; ArrDeductionsAmt[2, 4])
            {
            }
            column(ArrDeductionsAmt_2_5_; ArrDeductionsAmt[2, 5])
            {
            }
            column(ArrDeductionsAmt_2_3_; ArrDeductionsAmt[2, 3])
            {
            }
            column(ArrDeductionsAmt_3_5_; ArrDeductionsAmt[3, 5])
            {
            }
            column(ArrDeductionsAmt_3_4_; ArrDeductionsAmt[3, 4])
            {
            }
            column(ArrDeductionsAmt_3_3_; ArrDeductionsAmt[3, 3])
            {
            }
            column(ArrDeductionsAmt_3_2_; ArrDeductionsAmt[3, 2])
            {
            }
            column(ArrDeductionsAmt_3_1_; ArrDeductionsAmt[3, 1])
            {
            }
            column(ArrDeductionsAmt_1_4_; ArrDeductionsAmt[1, 4])
            {
            }
            column(ArrDeductionsAmt_1_5_; ArrDeductionsAmt[1, 5])
            {
            }
            column(ArrDeductionsAmt_1_2_; ArrDeductionsAmt[1, 2])
            {
            }
            column(ArrEarnings_1_4_; ArrEarnings[1, 4])
            {
            }
            column(ArrEarningsAmt_1_4_; ArrEarningsAmt[1, 4])
            {
            }
            column(ArrEarnings_1_5_; ArrEarnings[1, 5])
            {
            }
            column(ArrEarningsAmt_1_5_; ArrEarningsAmt[1, 5])
            {
            }
            column(ArrEarnings_1_6_; ArrEarnings[1, 6])
            {
            }
            column(ArrEarningsAmt_1_6_; ArrEarningsAmt[1, 6])
            {
            }
            column(ArrEarnings_1_7_; ArrEarnings[1, 7])
            {
            }
            column(ArrEarningsAmt_1_7_; ArrEarningsAmt[1, 7])
            {
            }
            column(ArrEarnings_1_8_; ArrEarnings[1, 8])
            {
            }
            column(ArrEarningsAmt_1_8_; ArrEarningsAmt[1, 8])
            {
            }
            column(ArrDeductions_1_6_; ArrDeductions[1, 6])
            {
            }
            column(ArrDeductions_2_6_; ArrDeductions[2, 6])
            {
            }
            column(ArrDeductionsAmt_2_6_; ArrDeductionsAmt[2, 6])
            {
            }
            column(ArrDeductions_3_6_; ArrDeductions[3, 6])
            {
            }
            column(ArrDeductionsAmt_3_6_; ArrDeductionsAmt[3, 6])
            {
            }
            column(ArrDeductions_1_7_; ArrDeductions[1, 7])
            {
            }
            column(ArrDeductionsAmt_1_7_; ArrDeductionsAmt[1, 7])
            {
            }
            column(ArrDeductions_2_7_; ArrDeductions[2, 7])
            {
            }
            column(ArrDeductionsAmt_2_7_; ArrDeductionsAmt[2, 7])
            {
            }
            column(ArrDeductions_3_7_; ArrDeductions[3, 7])
            {
            }
            column(ArrDeductionsAmt_3_7_; ArrDeductionsAmt[3, 7])
            {
            }
            column(ArrDeductions_1_8_; ArrDeductions[1, 8])
            {
            }
            column(ArrDeductionsAmt_1_8_; ArrDeductionsAmt[1, 8])
            {
            }
            column(ArrDeductions_2_8_; ArrDeductions[2, 8])
            {
            }
            column(ArrDeductionsAmt_2_8_; ArrDeductionsAmt[2, 8])
            {
            }
            column(ArrDeductions_3_8_; ArrDeductions[3, 8])
            {
            }
            column(ArrDeductionsAmt_3_7__Control148; ArrDeductionsAmt[3, 7])
            {
            }
            column(ArrDeductions_1_9_; ArrDeductions[1, 9])
            {
            }
            column(ArrDeductionsAmt_1_9_; ArrDeductionsAmt[1, 9])
            {
            }
            column(ArrDeductions_2_9_; ArrDeductions[2, 9])
            {
            }
            column(ArrDeductionsAmt_2_9_; ArrDeductionsAmt[2, 9])
            {
            }
            column(ArrDeductions_3_9_; ArrDeductions[3, 9])
            {
            }
            column(ArrDeductionsAmt_3_8_; ArrDeductionsAmt[3, 8])
            {
            }
            column(ArrDeductions_1_10_; ArrDeductions[1, 10])
            {
            }
            column(ArrDeductionsAmt_1_10_; ArrDeductionsAmt[1, 10])
            {
            }
            column(ArrDeductions_2_10_; ArrDeductions[2, 10])
            {
            }
            column(ArrDeductionsAmt_2_10_; ArrDeductionsAmt[2, 10])
            {
            }
            column(ArrDeductions_3_10_; ArrDeductions[3, 10])
            {
            }
            column(ArrDeductionsAmt_3_9_; ArrDeductionsAmt[3, 9])
            {
            }
            column(ArrDeductions_1_11_; ArrDeductions[1, 11])
            {
            }
            column(ArrDeductionsAmt_1_11_; ArrDeductionsAmt[1, 11])
            {
            }
            column(ArrDeductions_2_11_; ArrDeductions[2, 11])
            {
            }
            column(ArrDeductionsAmt_2_11_; ArrDeductionsAmt[2, 11])
            {
            }
            column(ArrDeductions_3_11_; ArrDeductions[3, 11])
            {
            }
            column(ArrDeductionsAmt_3_10_; ArrDeductionsAmt[3, 10])
            {
            }
            column(ArrDeductions_1_12_; ArrDeductions[1, 12])
            {
            }
            column(ArrDeductionsAmt_1_12_; ArrDeductionsAmt[1, 12])
            {
            }
            column(ArrDeductions_2_12_; ArrDeductions[2, 12])
            {
            }
            column(ArrDeductionsAmt_2_12_; ArrDeductionsAmt[2, 12])
            {
            }
            column(ArrDeductions_3_12_; ArrDeductions[3, 12])
            {
            }
            column(ArrDeductionsAmt_3_11_; ArrDeductionsAmt[3, 11])
            {
            }
            column(ArrEarnings_2_4_; ArrEarnings[2, 4])
            {
            }
            column(ArrEarningsAmt_2_4_; ArrEarningsAmt[2, 4])
            {
            }
            column(ArrEarnings_2_5_; ArrEarnings[2, 5])
            {
            }
            column(ArrEarningsAmt_2_5_; ArrEarningsAmt[2, 5])
            {
            }
            column(ArrEarnings_2_6_; ArrEarnings[2, 6])
            {
            }
            column(ArrEarningsAmt_2_6_; ArrEarningsAmt[2, 6])
            {
            }
            column(ArrEarnings_2_7_; ArrEarnings[2, 7])
            {
            }
            column(ArrEarningsAmt_2_7_; ArrEarningsAmt[2, 7])
            {
            }
            column(ArrEarnings_2_8_; ArrEarnings[2, 8])
            {
            }
            column(ArrEarningsAmt_2_8_; ArrEarningsAmt[2, 8])
            {
            }
            column(ArrEarnings_3_4_; ArrEarnings[3, 4])
            {
            }
            column(ArrEarningsAmt_3_4_; ArrEarningsAmt[3, 4])
            {
            }
            column(ArrEarnings_3_5_; ArrEarnings[3, 5])
            {
            }
            column(ArrEarningsAmt_3_5_; ArrEarningsAmt[3, 5])
            {
            }
            column(ArrEarnings_3_6_; ArrEarnings[3, 6])
            {
            }
            column(ArrEarningsAmt_3_6_; ArrEarningsAmt[3, 6])
            {
            }
            column(ArrEarnings_3_7_; ArrEarnings[3, 7])
            {
            }
            column(ArrEarningsAmt_3_7_; ArrEarningsAmt[3, 7])
            {
            }
            column(ArrEarnings_3_8_; ArrEarnings[3, 8])
            {
            }
            column(ArrEarningsAmt_3_8_; ArrEarningsAmt[3, 8])
            {
            }
            column(EmpArray_1_5_; EmpArray[1, 5])
            {
            }
            column(EmpArray_2_5_; EmpArray[2, 5])
            {
            }
            column(EmpArray_3_5_; EmpArray[3, 5])
            {
            }
            column(EmpArray_1_4_; EmpArray[1, 4])
            {
            }
            column(EmpArray_2_4_; EmpArray[2, 4])
            {
            }
            column(EmpArray_3_4_; EmpArray[3, 4])
            {
            }
            column(Addr_1__6_; Addr[1] [6])
            {
            }
            column(Addr_2__6_; Addr[2] [6])
            {
            }
            column(Addr_3__6_; Addr[3] [6])
            {
            }
            column(UPPERCASE_PayPeriodtext__; UpperCase(PayPeriodtext))
            {
            }
            column(UPPERCASE_PayPeriodtext___Control4; UpperCase(PayPeriodtext))
            {
            }
            column(UPPERCASE_PayPeriodtext_; UpperCase(PayPeriodtext))
            {
            }
            column(EmpArray_1_7_; EmpArray[1, 7])
            {
            }
            column(EmpArray_1_9_; EmpArray[1, 9])
            {
            }
            column(EmpArray_1_7__EmpArray_1_8__EmpArray_1_9_; EmpArray[1, 7] + EmpArray[1, 8] + EmpArray[1, 9])
            {
            }
            column(ROUND__EmpArray_1_7__EmpArray_1_8__EmpArray_1_9___20_1_____; ROUND((EmpArray[1, 7] + EmpArray[1, 8] + EmpArray[1, 9]) / 20, 1, '<'))
            {
            }
            column(EmpArray_1_10_; EmpArray[1, 10])
            {
            }
            column(EmpArray_1_11_; EmpArray[1, 11])
            {
            }
            column(EmpArray_2_8_; EmpArray[2, 8])
            {
            }
            column(EmpArray_2_9_; EmpArray[2, 9])
            {
            }
            column(EmpArray_2_7__EmpArray_2_8__EmpArray_2_9_; EmpArray[2, 7] + EmpArray[2, 8] + EmpArray[2, 9])
            {
            }
            column(ROUND__EmpArray_2_7__EmpArray_2_8__EmpArray_2_9___20_1_____; ROUND((EmpArray[2, 7] + EmpArray[2, 8] + EmpArray[2, 9]) / 20, 1, '<'))
            {
            }
            column(EmpArray_2_10_; EmpArray[2, 10])
            {
            }
            column(EmpArray_2_11_; EmpArray[2, 11])
            {
            }
            column(EmpArray_2_2_; EmpArray[2, 2])
            {
            }
            column(EmpArray_3_8_; EmpArray[3, 8])
            {
            }
            column(EmpArray_3_9_; EmpArray[3, 9])
            {
            }
            column(EmpArray_3_7__EmpArray_3_8__EmpArray_3_9_; EmpArray[3, 7] + EmpArray[3, 8] + EmpArray[3, 9])
            {
            }
            column(ROUND__EmpArray_3_7__EmpArray_3_8__EmpArray_3_9___20_1_____; ROUND((EmpArray[3, 7] + EmpArray[3, 8] + EmpArray[3, 9]) / 20, 1, '<'))
            {
            }
            column(EmpArray_3_10_; EmpArray[3, 10])
            {
            }
            column(EmpArray_3_11_; EmpArray[3, 11])
            {
            }
            column(EmpArray_3_2_; EmpArray[3, 2])
            {
            }
            column(EmpArray_1_2_; EmpArray[1, 2])
            {
            }
            column(EmpArray_1_12_; EmpArray[1, 12])
            {
            }
            column(EmpArray_1_13_; EmpArray[1, 13])
            {
            }
            column(ArrDeductionsAmt_1_6_; ArrDeductionsAmt[1, 6])
            {
            }
            column(ArrDeductionsAmt_1_3_; ArrDeductionsAmt[1, 3])
            {
            }
            column(EmpArray_2_7_; EmpArray[2, 7])
            {
            }
            column(EmpArray_3_7_; EmpArray[3, 7])
            {
            }
            column(EmpArray_1_8_; EmpArray[1, 8])
            {
            }
            column(EmpArray_2_12_; EmpArray[2, 12])
            {
            }
            column(EmpArray_2_13_; EmpArray[2, 13])
            {
            }
            column(EmpArray_3_12_; EmpArray[3, 12])
            {
            }
            column(EmpArray_3_13_; EmpArray[3, 13])
            {
            }
            column(PayModeArray_1_; PayModeArray[1])
            {
            }
            column(PayModeArray_2_; PayModeArray[2])
            {
            }
            column(PayModeArray_3_; PayModeArray[3])
            {
            }
            column(HoursArray_1_1_; HoursArray[1, 1])
            {
            }
            column(HoursArray_1_2_; HoursArray[1, 2])
            {
            }
            column(HoursArray_1_3_; HoursArray[1, 3])
            {
            }
            column(HoursArray_1_4_; HoursArray[1, 4])
            {
            }
            column(HoursArray_1_5_; HoursArray[1, 5])
            {
            }
            column(HoursArray_1_6_; HoursArray[1, 6])
            {
            }
            column(HoursArray_1_7_; HoursArray[1, 7])
            {
            }
            column(HoursArray_1_8_; HoursArray[1, 8])
            {
            }
            column(HoursArray_2_1_; HoursArray[2, 1])
            {
            }
            column(HoursArray_2_2_; HoursArray[2, 2])
            {
            }
            column(HoursArray_2_3_; HoursArray[2, 3])
            {
            }
            column(HoursArray_2_4_; HoursArray[2, 4])
            {
            }
            column(HoursArray_2_5_; HoursArray[2, 5])
            {
            }
            column(HoursArray_2_6_; HoursArray[2, 6])
            {
            }
            column(HoursArray_2_7_; HoursArray[2, 7])
            {
            }
            column(HoursArray_2_8_; HoursArray[2, 8])
            {
            }
            column(HoursArray_3_1_; HoursArray[3, 1])
            {
            }
            column(HoursArray_3_2_; HoursArray[3, 2])
            {
            }
            column(HoursArray_3_3_; HoursArray[3, 3])
            {
            }
            column(HoursArray_3_4_; HoursArray[3, 4])
            {
            }
            column(HoursArray_3_5_; HoursArray[3, 5])
            {
            }
            column(HoursArray_3_6_; HoursArray[3, 6])
            {
            }
            column(HoursArray_3_7_; HoursArray[3, 7])
            {
            }
            column(HoursArray_3_8_; HoursArray[3, 8])
            {
            }
            column(ArrDeductionsAmt_1_1_; ArrDeductionsAmt[1, 1])
            {
            }
            column(HoursArrayD_1_1_; HoursArrayD[1, 1])
            {
            }
            column(HoursArrayD_1_3_; HoursArrayD[1, 3])
            {
            }
            column(HoursArrayD_1_4_; HoursArrayD[1, 4])
            {
            }
            column(HoursArrayD_1_6_; HoursArrayD[1, 6])
            {
            }
            column(HoursArrayD_1_5_; HoursArrayD[1, 5])
            {
            }
            column(HoursArrayD_1_7_; HoursArrayD[1, 7])
            {
            }
            column(HoursArrayD_1_8_; HoursArrayD[1, 8])
            {
            }
            column(HoursArrayD_1_9_; HoursArrayD[1, 9])
            {
            }
            column(HoursArrayD_1_10_; HoursArrayD[1, 10])
            {
            }
            column(HoursArrayD_1_11_; HoursArrayD[1, 11])
            {
            }
            column(HoursArrayD_1_12_; HoursArrayD[1, 12])
            {
            }
            column(HoursArrayD_1_2_; HoursArrayD[1, 2])
            {
            }
            column(HoursArrayD_2_1_; HoursArrayD[2, 1])
            {
            }
            column(HoursArrayD_2_2_; HoursArrayD[2, 2])
            {
            }
            column(HoursArrayD_2_3_; HoursArrayD[2, 3])
            {
            }
            column(HoursArrayD_2_4_; HoursArrayD[2, 4])
            {
            }
            column(HoursArrayD_2_5_; HoursArrayD[2, 5])
            {
            }
            column(HoursArrayD_2_6_; HoursArrayD[2, 6])
            {
            }
            column(HoursArrayD_2_7_; HoursArrayD[2, 7])
            {
            }
            column(HoursArrayD_2_8_; HoursArrayD[2, 8])
            {
            }
            column(HoursArrayD_2_9_; HoursArrayD[2, 9])
            {
            }
            column(HoursArrayD_2_10_; HoursArrayD[2, 10])
            {
            }
            column(HoursArrayD_2_11_; HoursArrayD[2, 11])
            {
            }
            column(HoursArrayD_2_12_; HoursArrayD[2, 12])
            {
            }
            column(HoursArrayD_3_1_; HoursArrayD[3, 1])
            {
            }
            column(HoursArrayD_3_2_; HoursArrayD[3, 2])
            {
            }
            column(HoursArrayD_3_3_; HoursArrayD[3, 3])
            {
            }
            column(HoursArrayD_3_4_; HoursArrayD[3, 4])
            {
            }
            column(HoursArrayD_3_5_; HoursArrayD[3, 5])
            {
            }
            column(HoursArrayD_3_6_; HoursArrayD[3, 6])
            {
            }
            column(HoursArrayD_3_7_; HoursArrayD[3, 7])
            {
            }
            column(HoursArrayD_3_8_; HoursArrayD[3, 8])
            {
            }
            column(HoursArrayD_3_9_; HoursArrayD[3, 9])
            {
            }
            column(HoursArrayD_3_10_; HoursArrayD[3, 10])
            {
            }
            column(HoursArrayD_3_11_; HoursArrayD[3, 11])
            {
            }
            column(HoursArrayD_3_12_; HoursArrayD[3, 12])
            {
            }
            column(UPPERCASE_CoName_; UpperCase(CoName))
            {
            }
            column(UPPERCASE_CoName__Control443; UpperCase(CoName))
            {
            }
            column(UPPERCASE_CoName__Control444; UpperCase(CoName))
            {
            }
            column(ArrDeductionsAmt_3_13_; ArrDeductionsAmt[3, 13])
            {
            }
            column(ArrDeductionsAmt_3_14_; ArrDeductionsAmt[3, 14])
            {
            }
            column(HoursArrayD_3_13_; HoursArrayD[3, 13])
            {
            }
            column(HoursArrayD_3_14_; HoursArrayD[3, 14])
            {
            }
            column(ArrDeductions_3_13_; ArrDeductions[3, 13])
            {
            }
            column(ArrDeductions_3_14_; ArrDeductions[3, 14])
            {
            }
            column(ArrDeductionsAmt_2_13_; ArrDeductionsAmt[2, 13])
            {
            }
            column(ArrDeductionsAmt_2_14_; ArrDeductionsAmt[2, 14])
            {
            }
            column(ArrDeductionsAmt_2_15_; ArrDeductionsAmt[2, 15])
            {
            }
            column(ArrDeductions_3_15_; ArrDeductions[3, 15])
            {
            }
            column(ArrDeductionsAmt_3_15_; ArrDeductionsAmt[3, 15])
            {
            }
            column(HoursArrayD_3_15_; HoursArrayD[3, 15])
            {
            }
            column(ArrDeductions_2_13_; ArrDeductions[2, 13])
            {
            }
            column(ArrDeductions_2_14_; ArrDeductions[2, 14])
            {
            }
            column(ArrDeductions_2_15_; ArrDeductions[2, 15])
            {
            }
            column(HoursArrayD_2_13_; HoursArrayD[2, 13])
            {
            }
            column(HoursArrayD_2_14_; HoursArrayD[2, 14])
            {
            }
            column(HoursArrayD_2_15_; HoursArrayD[2, 15])
            {
            }
            column(ArrDeductionsAmt_1_13_; ArrDeductionsAmt[1, 13])
            {
            }
            column(ArrDeductionsAmt_1_14_; ArrDeductionsAmt[1, 14])
            {
            }
            column(ArrDeductionsAmt_1_15_; ArrDeductionsAmt[1, 15])
            {
            }
            column(ArrDeductions_1_13_; ArrDeductions[1, 13])
            {
            }
            column(ArrDeductions_1_14_; ArrDeductions[1, 14])
            {
            }
            column(ArrDeductions_1_15_; ArrDeductions[1, 15])
            {
            }
            column(HoursArrayD_1_13_; HoursArrayD[1, 13])
            {
            }
            column(HoursArrayD_1_14_; HoursArrayD[1, 14])
            {
            }
            column(HoursArrayD_1_15_; HoursArrayD[1, 15])
            {
            }
            column(ArrDeductions_1_16_; ArrDeductions[1, 16])
            {
            }
            column(ArrDeductionsAmt_1_16_; ArrDeductionsAmt[1, 16])
            {
            }
            column(ArrDeductions_2_16_; ArrDeductions[2, 16])
            {
            }
            column(ArrDeductionsAmt_2_16_; ArrDeductionsAmt[2, 16])
            {
            }
            column(ArrDeductions_3_16_; ArrDeductions[3, 16])
            {
            }
            column(ArrDeductionsAmt_3_16_; ArrDeductionsAmt[3, 16])
            {
            }
            column(HoursArrayD_1_16_; HoursArrayD[1, 16])
            {
            }
            column(HoursArrayD_2_16_; HoursArrayD[2, 16])
            {
            }
            column(HoursArrayD_3_16_; HoursArrayD[3, 16])
            {
            }
            column(ArrDeductionsAmt_3_17_; ArrDeductionsAmt[3, 17])
            {
            }
            column(ArrDeductionsAmt_3_18_; ArrDeductionsAmt[3, 18])
            {
            }
            column(HoursArrayD_3_17_; HoursArrayD[3, 17])
            {
            }
            column(HoursArrayD_3_18_; HoursArrayD[3, 18])
            {
            }
            column(ArrDeductionsAmt_3_19_; ArrDeductionsAmt[3, 19])
            {
            }
            column(HoursArrayD_3_19_; HoursArrayD[3, 19])
            {
            }
            column(ArrDeductions_3_17_; ArrDeductions[3, 17])
            {
            }
            column(ArrDeductions_3_18_; ArrDeductions[3, 18])
            {
            }
            column(ArrDeductions_3_19_; ArrDeductions[3, 19])
            {
            }
            column(ArrDeductions_3_20_; ArrDeductions[3, 20])
            {
            }
            column(ArrDeductionsAmt_3_20_; ArrDeductionsAmt[3, 20])
            {
            }
            column(HoursArrayD_3_20_; HoursArrayD[3, 20])
            {
            }
            column(ArrDeductionsAmt_2_17_; ArrDeductionsAmt[2, 17])
            {
            }
            column(ArrDeductionsAmt_2_18_; ArrDeductionsAmt[2, 18])
            {
            }
            column(ArrDeductionsAmt_2_19_; ArrDeductionsAmt[2, 19])
            {
            }
            column(ArrDeductionsAmt_2_20_; ArrDeductionsAmt[2, 20])
            {
            }
            column(ArrDeductions_2_17_; ArrDeductions[2, 17])
            {
            }
            column(ArrDeductions_2_18_; ArrDeductions[2, 18])
            {
            }
            column(ArrDeductions_2_19_; ArrDeductions[2, 19])
            {
            }
            column(HoursArrayD_2_17_; HoursArrayD[2, 17])
            {
            }
            column(HoursArrayD_2_18_; HoursArrayD[2, 18])
            {
            }
            column(HoursArrayD_2_19_; HoursArrayD[2, 19])
            {
            }
            column(ArrDeductions_2_20_; ArrDeductions[2, 20])
            {
            }
            column(HoursArrayD_2_20_; HoursArrayD[2, 20])
            {
            }
            column(ArrDeductionsAmt_1_17_; ArrDeductionsAmt[1, 17])
            {
            }
            column(ArrDeductionsAmt_1_18_; ArrDeductionsAmt[1, 18])
            {
            }
            column(ArrDeductionsAmt_1_19_; ArrDeductionsAmt[1, 19])
            {
            }
            column(ArrDeductionsAmt_1_20_; ArrDeductionsAmt[1, 20])
            {
            }
            column(ArrDeductions_1_17_; ArrDeductions[1, 17])
            {
            }
            column(ArrDeductions_1_18_; ArrDeductions[1, 18])
            {
            }
            column(ArrDeductions_1_19_; ArrDeductions[1, 19])
            {
            }
            column(HoursArrayD_1_17_; HoursArrayD[1, 17])
            {
            }
            column(HoursArrayD_1_18_; HoursArrayD[1, 18])
            {
            }
            column(HoursArrayD_1_19_; HoursArrayD[1, 19])
            {
            }
            column(ArrDeductions_1_20_; ArrDeductions[1, 20])
            {
            }
            column(HoursArrayD_1_20_; HoursArrayD[1, 20])
            {
            }
            column(ArrEarningsAmt_3_9_; ArrEarningsAmt[3, 9])
            {
            }
            column(ArrEarningsAmt_3_10_; ArrEarningsAmt[3, 10])
            {
            }
            column(ArrEarningsAmt_3_11_; ArrEarningsAmt[3, 11])
            {
            }
            column(ArrEarningsAmt_3_12_; ArrEarningsAmt[3, 12])
            {
            }
            column(ArrEarningsAmt_3_13_; ArrEarningsAmt[3, 13])
            {
            }
            column(ArrEarningsAmt_3_14_; ArrEarningsAmt[3, 14])
            {
            }
            column(ArrEarningsAmt_3_15_; ArrEarningsAmt[3, 15])
            {
            }
            column(ArrEarningsAmt_3_16_; ArrEarningsAmt[3, 16])
            {
            }
            column(HoursArray_3_9_; HoursArray[3, 9])
            {
            }
            column(HoursArray_3_10_; HoursArray[3, 10])
            {
            }
            column(HoursArray_3_11_; HoursArray[3, 11])
            {
            }
            column(HoursArray_3_12_; HoursArray[3, 12])
            {
            }
            column(HoursArray_3_13_; HoursArray[3, 13])
            {
            }
            column(HoursArray_3_14_; HoursArray[3, 14])
            {
            }
            column(HoursArray_3_15_; HoursArray[3, 15])
            {
            }
            column(HoursArray_3_16_; HoursArray[3, 16])
            {
            }
            column(ArrEarnings_3_9_; ArrEarnings[3, 9])
            {
            }
            column(ArrEarnings_3_10_; ArrEarnings[3, 10])
            {
            }
            column(ArrEarnings_3_11_; ArrEarnings[3, 11])
            {
            }
            column(ArrEarnings_3_12_; ArrEarnings[3, 12])
            {
            }
            column(ArrEarnings_3_13_; ArrEarnings[3, 13])
            {
            }
            column(ArrEarnings_3_14_; ArrEarnings[3, 14])
            {
            }
            column(ArrEarnings_3_15_; ArrEarnings[3, 15])
            {
            }
            column(ArrEarnings_3_16_; ArrEarnings[3, 16])
            {
            }
            column(ArrEarningsAmt_2_11_; ArrEarningsAmt[2, 11])
            {
            }
            column(ArrEarningsAmt_2_10_; ArrEarningsAmt[2, 10])
            {
            }
            column(ArrEarningsAmt_2_9_; ArrEarningsAmt[2, 9])
            {
            }
            column(ArrEarningsAmt_2_12_; ArrEarningsAmt[2, 12])
            {
            }
            column(ArrEarningsAmt_2_13_; ArrEarningsAmt[2, 13])
            {
            }
            column(ArrEarningsAmt_2_14_; ArrEarningsAmt[2, 14])
            {
            }
            column(ArrEarningsAmt_2_15_; ArrEarningsAmt[2, 15])
            {
            }
            column(ArrEarningsAmt_2_16_; ArrEarningsAmt[2, 16])
            {
            }
            column(HoursArray_2_9_; HoursArray[2, 9])
            {
            }
            column(HoursArray_2_2__Control613; HoursArray[2, 2])
            {
            }
            column(HoursArray_2_11_; HoursArray[2, 11])
            {
            }
            column(HoursArray_2_12_; HoursArray[2, 12])
            {
            }
            column(HoursArray_2_13_; HoursArray[2, 13])
            {
            }
            column(HoursArray_2_14_; HoursArray[2, 14])
            {
            }
            column(HoursArray_2_15_; HoursArray[2, 15])
            {
            }
            column(HoursArray_2_16_; HoursArray[2, 16])
            {
            }
            column(ArrEarnings_2_9_; ArrEarnings[2, 9])
            {
            }
            column(ArrEarnings_2_10_; ArrEarnings[2, 10])
            {
            }
            column(ArrEarnings_2_11_; ArrEarnings[2, 11])
            {
            }
            column(ArrEarnings_2_12_; ArrEarnings[2, 12])
            {
            }
            column(ArrEarnings_2_13_; ArrEarnings[2, 13])
            {
            }
            column(ArrEarnings_2_14_; ArrEarnings[2, 14])
            {
            }
            column(ArrEarnings_2_15_; ArrEarnings[2, 15])
            {
            }
            column(ArrEarnings_2_16_; ArrEarnings[2, 16])
            {
            }
            column(ArrEarningsAmt_1_9_; ArrEarningsAmt[1, 9])
            {
            }
            column(ArrEarningsAmt_1_10_; ArrEarningsAmt[1, 10])
            {
            }
            column(ArrEarningsAmt_1_11_; ArrEarningsAmt[1, 11])
            {
            }
            column(ArrEarningsAmt_1_12_; ArrEarningsAmt[1, 12])
            {
            }
            column(ArrEarningsAmt_1_13_; ArrEarningsAmt[1, 13])
            {
            }
            column(ArrEarningsAmt_1_14_; ArrEarningsAmt[1, 14])
            {
            }
            column(ArrEarningsAmt_1_15_; ArrEarningsAmt[1, 15])
            {
            }
            column(ArrEarningsAmt_1_16_; ArrEarningsAmt[1, 16])
            {
            }
            column(HoursArray_1_9_; HoursArray[1, 9])
            {
            }
            column(HoursArray_1_10_; HoursArray[1, 10])
            {
            }
            column(HoursArray_1_11_; HoursArray[1, 11])
            {
            }
            column(HoursArray_1_12_; HoursArray[1, 12])
            {
            }
            column(HoursArray_1_13_; HoursArray[1, 13])
            {
            }
            column(HoursArray_1_14_; HoursArray[1, 14])
            {
            }
            column(HoursArray_1_15_; HoursArray[1, 15])
            {
            }
            column(HoursArray_1_16_; HoursArray[1, 16])
            {
            }
            column(ArrEarnings_1_9_; ArrEarnings[1, 9])
            {
            }
            column(ArrEarnings_1_10_; ArrEarnings[1, 10])
            {
            }
            column(ArrEarnings_1_11_; ArrEarnings[1, 11])
            {
            }
            column(ArrEarnings_1_12_; ArrEarnings[1, 12])
            {
            }
            column(ArrEarnings_1_13_; ArrEarnings[1, 13])
            {
            }
            column(ArrEarnings_1_14_; ArrEarnings[1, 14])
            {
            }
            column(ArrEarnings_1_15_; ArrEarnings[1, 15])
            {
            }
            column(ArrEarnings_1_16_; ArrEarnings[1, 16])
            {
            }
            column(ArrEarningsAmt_3_17_; ArrEarningsAmt[3, 17])
            {
            }
            column(HoursArray_3_17_; HoursArray[3, 17])
            {
            }
            column(ArrEarnings_3_17_; ArrEarnings[3, 17])
            {
            }
            column(ArrEarningsAmt_2_17_; ArrEarningsAmt[2, 17])
            {
            }
            column(HoursArray_2_17_; HoursArray[2, 17])
            {
            }
            column(ArrEarnings_2_17_; ArrEarnings[2, 17])
            {
            }
            column(ArrEarningsAmt_1_17_; ArrEarningsAmt[1, 17])
            {
            }
            column(HoursArray_1_17_; HoursArray[1, 17])
            {
            }
            column(ArrEarnings_1_17_; ArrEarnings[1, 17])
            {
            }
            column(TOTAL_BENEFITSCaption; TOTAL_BENEFITSCaptionLbl)
            {
            }
            column(TOTAL_BENEFITSCaption_Control32; TOTAL_BENEFITSCaption_Control32Lbl)
            {
            }
            column(TOTAL_BENEFITSCaption_Control33; TOTAL_BENEFITSCaption_Control33Lbl)
            {
            }
            column(Net_PayCaption; Net_PayCaptionLbl)
            {
            }
            column(Net_PayCaption_Control42; Net_PayCaption_Control42Lbl)
            {
            }
            column(Net_PayCaption_Control44; Net_PayCaption_Control44Lbl)
            {
            }
            column(EarningsCaption; EarningsCaptionLbl)
            {
            }
            column(EarningsCaption_Control66; EarningsCaption_Control66Lbl)
            {
            }
            column(No_Caption; No_CaptionLbl)
            {
            }
            column(Name_Caption; Name_CaptionLbl)
            {
            }
            column(Title_Caption; Title_CaptionLbl)
            {
            }
            column(Gross_PayCaption; Gross_PayCaptionLbl)
            {
            }
            column(Total_DeductionsCaption; Total_DeductionsCaptionLbl)
            {
            }
            column(No_Caption_Control11; No_Caption_Control11Lbl)
            {
            }
            column(Name_Caption_Control12; Name_Caption_Control12Lbl)
            {
            }
            column(Title_Caption_Control106; Title_Caption_Control106Lbl)
            {
            }
            column(Total_DeductionsCaption_Control110; Total_DeductionsCaption_Control110Lbl)
            {
            }
            column(No_Caption_Control111; No_Caption_Control111Lbl)
            {
            }
            column(Name_Caption_Control112; Name_Caption_Control112Lbl)
            {
            }
            column(Title_Caption_Control113; Title_Caption_Control113Lbl)
            {
            }
            column(Total_DeductionsCaption_Control121; Total_DeductionsCaption_Control121Lbl)
            {
            }
            column(Gross_PayCaption_Control212; Gross_PayCaption_Control212Lbl)
            {
            }
            column(Gross_PayCaption_Control213; Gross_PayCaption_Control213Lbl)
            {
            }
            column(DeptCaption; DeptCaptionLbl)
            {
            }
            column(DeptCaption_Control219; DeptCaption_Control219Lbl)
            {
            }
            column(DeptCaption_Control221; DeptCaption_Control221Lbl)
            {
            }
            column(TAX_DETAILSCaption; TAX_DETAILSCaptionLbl)
            {
            }
            column(TAX_DETAILSCaption_Control108; TAX_DETAILSCaption_Control108Lbl)
            {
            }
            column(Taxable_Pay_Caption; Taxable_Pay_CaptionLbl)
            {
            }
            column(Less_Retirement_Contrib_Caption; Less_Retirement_Contrib_CaptionLbl)
            {
            }
            column(HousingCaption; HousingCaptionLbl)
            {
            }
            column(Net_Taxable_AmountCaption; Net_Taxable_AmountCaptionLbl)
            {
            }
            column(Net_Taxable_Kenya_PoundsCaption; Net_Taxable_Kenya_PoundsCaptionLbl)
            {
            }
            column(Tax_ChargedCaption; Tax_ChargedCaptionLbl)
            {
            }
            column(Monthly_Personal_Relief_SHS_Caption; Monthly_Personal_Relief_SHS_CaptionLbl)
            {
            }
            column(Tax_Paid_SHS_Caption; Tax_Paid_SHS_CaptionLbl)
            {
            }
            column(Taxable_PayCaption; Taxable_PayCaptionLbl)
            {
            }
            column(Less_Retirement_Contrib_Caption_Control257; Less_Retirement_Contrib_Caption_Control257Lbl)
            {
            }
            column(HousingCaption_Control258; HousingCaption_Control258Lbl)
            {
            }
            column(Net_Taxable_AmountCaption_Control260; Net_Taxable_AmountCaption_Control260Lbl)
            {
            }
            column(Net_Taxable_Kenya_PoundsCaption_Control262; Net_Taxable_Kenya_PoundsCaption_Control262Lbl)
            {
            }
            column(Tax_ChargedCaption_Control264; Tax_ChargedCaption_Control264Lbl)
            {
            }
            column(Monthly_Personal_ReliefCaption; Monthly_Personal_ReliefCaptionLbl)
            {
            }
            column(Tax_PaidCaption; Tax_PaidCaptionLbl)
            {
            }
            column(Taxable_PayCaption_Control270; Taxable_PayCaption_Control270Lbl)
            {
            }
            column(Less_Retirement_Contrib_Caption_Control272; Less_Retirement_Contrib_Caption_Control272Lbl)
            {
            }
            column(HousingCaption_Control273; HousingCaption_Control273Lbl)
            {
            }
            column(Net_Taxable_AmountCaption_Control275; Net_Taxable_AmountCaption_Control275Lbl)
            {
            }
            column(Net_Taxable_Kenya_PoundsCaption_Control277; Net_Taxable_Kenya_PoundsCaption_Control277Lbl)
            {
            }
            column(Tax_ChargedCaption_Control279; Tax_ChargedCaption_Control279Lbl)
            {
            }
            column(Monthly_Personal_ReliefCaption_Control281; Monthly_Personal_ReliefCaption_Control281Lbl)
            {
            }
            column(Tax_PaidCaption_Control283; Tax_PaidCaption_Control283Lbl)
            {
            }
            column(B_F_MPRCaption; B_F_MPRCaptionLbl)
            {
            }
            column(C_F_MPRCaption; C_F_MPRCaptionLbl)
            {
            }
            column(B_F_MPRCaption_Control285; B_F_MPRCaption_Control285Lbl)
            {
            }
            column(C_F_MPRCaption_Control286; C_F_MPRCaption_Control286Lbl)
            {
            }
            column(B_F_MPRCaption_Control287; B_F_MPRCaption_Control287Lbl)
            {
            }
            column(C_F_MPRCaption_Control288; C_F_MPRCaption_Control288Lbl)
            {
            }
            column(TAX_DETAILSCaption_Control78; TAX_DETAILSCaption_Control78Lbl)
            {
            }
            column(Payment_ByCaption; Payment_ByCaptionLbl)
            {
            }
            column(Payment_ByCaption_Control294; Payment_ByCaption_Control294Lbl)
            {
            }
            column(Payment_ByCaption_Control300; Payment_ByCaption_Control300Lbl)
            {
            }
            column(Hrs_Days_No_Caption; Hrs_Days_No_CaptionLbl)
            {
            }
            column(Hrs_Days_No_Caption_Control404; Hrs_Days_No_Caption_Control404Lbl)
            {
            }
            column(AmountCaption; AmountCaptionLbl)
            {
            }
            column(AmountCaption_Control450; AmountCaption_Control450Lbl)
            {
            }
            column(EarningsCaption_Control451; EarningsCaption_Control451Lbl)
            {
            }
            column(Hrs_Days_No_Caption_Control452; Hrs_Days_No_Caption_Control452Lbl)
            {
            }
            column(AmountCaption_Control453; AmountCaption_Control453Lbl)
            {
            }
            column(DeductionsCaption; DeductionsCaptionLbl)
            {
            }
            column(Hrs_Days_No_Caption_Control455; Hrs_Days_No_Caption_Control455Lbl)
            {
            }
            column(AmountCaption_Control456; AmountCaption_Control456Lbl)
            {
            }
            column(DeductionsCaption_Control457; DeductionsCaption_Control457Lbl)
            {
            }
            column(Hrs_Days_No_Caption_Control458; Hrs_Days_No_Caption_Control458Lbl)
            {
            }
            column(AmountCaption_Control459; AmountCaption_Control459Lbl)
            {
            }
            column(DeductionsCaption_Control472; DeductionsCaption_Control472Lbl)
            {
            }
            column(Hrs_Days_No_Caption_Control473; Hrs_Days_No_Caption_Control473Lbl)
            {
            }
            column(AmountCaption_Control474; AmountCaption_Control474Lbl)
            {
            }
            column(Employee_No_; Employee."No.")
            {
            }
            trigger OnPreDataItem();
            begin
                CoRec.Get;
                CoName := CoRec.Name;
                if BeginDate = DateSpecified then
                    Employee.SetRange(Status, Employee.Status::Active);
                NoOfRecords := Count;
                NoOfColumns := 3;
                CUser := UserId;
                GetGroup.GetUserGroup(CUser, GroupCode);
                SetRange(Employee."Posting Group", GroupCode);
            end;

            trigger OnAfterGetRecord();
            begin
                BankName := '';
                BankBranch := '';
                CfMpr := 0;
                RecordNo := RecordNo + 1;
                ColumnNo := ColumnNo + 1;
                for j := 1 to 20 do begin
                    ArrDeductionsAmt[ColumnNo, j] := 0;
                    ArrDeductions[ColumnNo, j] := '';
                    HoursArrayD[ColumnNo, j] := 0;
                end;
                for j := 1 to 17 do begin
                    ArrEarnings[ColumnNo, j] := '';
                    ArrEarningsAmt[ColumnNo, j] := 0;
                    HoursArray[ColumnNo, j] := 0;
                end;
                Index := 0;
                Index1 := 0;
                Addr[ColumnNo] [1] := Format("No.");
                Addr[ColumnNo] [2] := Format("First Name") + ' ' + Format("Middle Name") + ' ' + Format("Last Name");
                Addr[ColumnNo] [3] := Format("Middle Name");
                Addr[ColumnNo] [4] := Format("Last Name");
                Addr[ColumnNo] [5] := Format("Job Title");
                Addr[ColumnNo] [6] := Format("Global Dimension 1 Code");
                Addr[ColumnNo] [7] := Format("Global Dimension 2 Code");
                Addr[ColumnNo] [8] := Format("Basic Pay");
                Addr[ColumnNo] [14] := Format(Employee."P.I.N");
                Addr[ColumnNo] [15] := Format(Employee."Bank Account Number");
                if EmpBank.Get("Employee's Bank", "Bank Branch") then begin
                    BankName := EmpBank.Name;
                    BankBranch := EmpBank."Name 2";
                end;
                Addr[ColumnNo] [16] := BankBranch;
                Addr[ColumnNo] [17] := BankName;
                EmpArray[ColumnNo] [1] := Employee."Basic Pay";
                if (Employee."Cumm. Basic Pay" = 0) and (BeginDate <> DateSpecified) then begin
                    Employee.SetRange(Employee."Pay Period Filter", DateSpecified);
                    Employee.CalcFields("Cumm. Basic Pay");
                    EmpArray[ColumnNo] [1] := Employee."Cumm. Basic Pay";
                end;
                if EmpBank.Get("Employee's Bank", "Bank Branch") then
                    BankName := EmpBank.Name;
                Employee.CalcFields("Taxable Allowance", "Tax Deductible Amount");
                Employee.CalcFields("Total Allowances", "Total Deductions");
                Employee.CalcFields("Benefits-Non Cash", "Total Savings", "Retirement Contribution");
                if BeginDate = DateSpecified then
                    BasicSalary := Employee."Basic Pay"
                else
                    BasicSalary := Employee."Cumm. Basic Pay";
                TaxableAmount := BasicSalary + Employee."Taxable Allowance";
                if Employee."Housed by Employer" then begin
                    case Housing of
                        Housing::Ordinary:
                            Employee."Total Quarters" := 0.15 * TaxableAmount;
                        Housing::Directors:
                            Employee."Total Quarters" := 0.15 * TaxableAmount;
                        Housing::Agricultural:
                            Employee."Total Quarters" := 0.1 * TaxableAmount;
                    end;
                end;
                Addr[ColumnNo] [9] := Format(TaxableAmount);
                RightBracket := false;
                CompRec.Get;
                HseLimit := CompRec."Housing Earned Limit";
                TaxCode := CompRec."Tax Table";
                if ((TaxableAmount > HseLimit) and (Employee."Total Quarters" > 0)) then begin
                    if Employee."Employer Rent" then
                        if Employee."House Rent" > Employee."Total Quarters" then
                            Employee."Total Quarters" := Employee."House Rent"
                        else
                            Employee."Total Quarters" := Employee."Total Quarters"
                    else
                        Employee."Total Quarters" := Employee."Total Quarters" - Employee."House Rent";
                end;
                if (BeginDate <> DateSpecified) then begin
                    Employee.SetRange("Pay Period Filter", DateSpecified);
                    Employee.CalcFields("Cumulative Quarters");
                    Employee."Total Quarters" := Employee."Cumulative Quarters";
                end;
                Employee."Total Quarters" := ROUND(Employee."Total Quarters", 1, '<');
                TaxableAmount := TaxableAmount + Employee."Total Quarters" + Employee."Tax Deductible Amount";
                CompRec.Get;
                //Checking for Pension Limit to allow for tax
                retirecontribution := 0;
                retirecontribution := -Employee."Retirement Contribution";
                if Employee."Retirement Contribution" > CompRec."Pension Limit Amount" then begin
                    ExcessRetirement := retirecontribution - CompRec."Pension Limit Amount";
                    TaxableAmount := TaxableAmount + ExcessRetirement
                end;
                //END----Checking for pension Limit
                TaxableAmount := ROUND(TaxableAmount, 1, '>');
                // GetTaxBracket(TaxableAmount);
                EmpArray[ColumnNo] [10] := IncomeTax;
                relief := Employee."Tax Relief Amount";
                if (Format(DateSpecified, 0, '<month>')) <> '1' then begin
                    EmpRec.Reset;
                    EmpRec.SetRange(EmpRec."Pay Period Filter", CalcDate('-1M', DateSpecified));
                    EmpRec.Get(Employee."No.");
                    EmpRec.CalcFields(EmpRec.BfMpr);
                    IncomeTax := IncomeTax + relief + EmpRec.BfMpr;
                    EmpArray[ColumnNo] [12] := EmpRec.BfMpr;
                end
                else
                    IncomeTax := IncomeTax + Employee."Tax Relief Amount";
                if IncomeTax > 0 then begin
                    CfMpr := IncomeTax;
                    IncomeTax := 0;
                end;
                NetPay := BasicSalary + Employee."Total Allowances"
                + Employee."Total Deductions" + IncomeTax + Employee."Total Savings";
                Addr[ColumnNo] [10] := Format(IncomeTax);
                Addr[ColumnNo] [11] := Format(ROUND(NetPay));
                Addr[ColumnNo] [12] := Format(ROUND(Employee."Total Deductions" + IncomeTax + Employee."Total Savings"));
                Addr[ColumnNo] [13] := Format(BasicSalary + Employee."Total Allowances");
                EmpArray[ColumnNo] [2] := IncomeTax;
                EmpArray[ColumnNo] [3] := NetPay;
                EmpArray[ColumnNo] [4] := Employee."Total Deductions" + IncomeTax + Employee."Total Savings";
                EmpArray[ColumnNo] [5] := BasicSalary + Employee."Total Allowances";
                EmpArray[ColumnNo] [6] := Employee."Benefits-Non Cash";
                EmpArray[ColumnNo] [7] := BasicSalary + Employee."Taxable Allowance";
                EmpArray[ColumnNo] [8] := Employee."Tax Deductible Amount" + ExcessRetirement;
                EmpArray[ColumnNo] [9] := Employee."Total Quarters";
                EmpArray[ColumnNo] [11] := Employee."Tax Relief Amount";
                EmpArray[ColumnNo] [13] := CfMpr;
                Employee.CalcFields(Employee."Tax Deductible to Date", Employee."SSF Employer to Date");
                if not Employee."Pays tax" then begin
                    EmpArray[ColumnNo] [7] := 0;
                    EmpArray[ColumnNo] [8] := 0;
                    EmpArray[ColumnNo] [9] := 0;
                    EmpArray[ColumnNo] [10] := 0;
                    EmpArray[ColumnNo] [11] := 0;
                    EmpArray[ColumnNo] [12] := 0;
                    EmpArray[ColumnNo] [13] := 0;
                end;
                //************************************************************************
                PayDeduct.Reset;
                PayDeduct.SetRange(PayDeduct."Employee No", Employee."No.");
                PayDeduct.SetRange(PayDeduct."Payroll Period", DateSpecified);
                if PayDeduct.Find('-') then
                    repeat
                        if PayDeduct.Type = PayDeduct.Type::Payment then begin
                            HoursBal := 0;
                            Index := Index + 1;
                            if Pay.Get(PayDeduct.Code) then begin
                                if Pay."Show Balance" then begin
                                    Pay.SetRange("Employee Filter", Employee."No.");
                                    Pay.SetRange("Pay Period Filter", 0D, DateSpecified);
                                    Pay.CalcFields("Total Amount");
                                    if Pay."Overtime Factor" > 0 then
                                        HoursBal := PayDeduct."No. of Units"
                                    else begin
                                        HoursBal := Pay."Total Amount";
                                        Pay.Reset;
                                        Pay.SetRange("Employee Filter", Employee."No.");
                                        Pay.CalcFields("Opening Balance");
                                        HoursBal := HoursBal + Pay."Opening Balance";
                                    end;
                                end;
                            end;
                            ArrEarnings[ColumnNo, Index] := PayDeduct.Description;
                            ArrEarningsAmt[ColumnNo, Index] := PayDeduct.Amount;
                            HoursArray[ColumnNo, Index] := Abs(HoursBal);
                        end
                        else begin
                            Index1 := Index1 + 1;
                            HoursBal := 0;
                            if Ded.Get(PayDeduct.Code) then begin
                                if Ded."Show Balance" then begin
                                    Ded.SetRange("Employee Filter", Employee."No.");
                                    Ded.SetRange("Pay Period Filter", 0D, DateSpecified);
                                    Ded.CalcFields("Total Amount");
                                    if PayDeduct."Loan Repay" then begin
                                        // if Loans1.Get(PayDeduct.Code, Employee."No.") then begin
                                        //     Loans1.SetRange("Date Filter", 0D, DateSpecified);
                                        //     Loans1.CalcFields("Amount Paid", "Interest Repaid to Date", "Amount Paid", "Cumm. Period Repayments");
                                        //     //HoursBal:=Loans1."Loan Amount"-Loans1."Cumm. Period Repayments";
                                        //     HoursBal := (Loans1."Loan Amount" - Abs(Loans1."Amount Paid"));
                                        //     HoursArrayD[ColumnNo, Index1] := HoursBal;
                                        // end;
                                    end
                                    else begin
                                        HoursBal := Ded."Total Amount";
                                        Ded.Reset;
                                        Ded.SetRange("Employee Filter", Employee."No.");
                                        Ded.CalcFields("Opening Balance");
                                        HoursBal := HoursBal + Ded."Opening Balance";
                                        HoursArrayD[ColumnNo, Index1] := Abs(HoursBal);
                                    end;
                                end;
                            end;
                            ArrDeductions[ColumnNo, Index1] := PayDeduct.Description;
                            ArrDeductionsAmt[ColumnNo, Index1] := PayDeduct.Amount;
                        end
                    until PayDeduct.Next = 0;
                //CoinageAnalysis(NetPay,ColumnNo);
                if (RecordNo = NoOfRecords) and (ColumnNo < 3) then begin
                    for i := ColumnNo + 1 to NoOfColumns do begin
                        Clear(Addr[i]);
                        Clear(EmpArray[i]);
                        Clear(DenomArray[i]);
                        Clear(NoOfUnitsArray[i]);
                        Clear(PayModeArray[i]);
                        BankName := '';
                        BankBranch := '';
                        Clear(ArrDeductionsAmt[i]);
                        Clear(ArrEarningsAmt[i]);
                        Clear(ArrEarnings[i]);
                        Clear(ArrDeductions[i]);
                        Clear(HoursArray[i]);
                        Clear(HoursArrayD[i]);
                    end;
                    ColumnNo := 0;
                end else begin
                    if ColumnNo = NoOfColumns then
                        ColumnNo := 0;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        GetPayPeriod;
        PayPeriodtext := Employee.GetFilter("Pay Period Filter");
        if PayPeriodtext = '' then
            Error('Pay period must be specified for this report');
        DateSpecified := Employee.GetRangeMin("Pay Period Filter");
        HoldDate := Employee.GetRangeMin("Pay Period Filter");
        if PayPeriod.Get(DateSpecified) then
            PayPeriodtext := PayPeriod.Name;
        Year := Date2dmy(HoldDate, 3);
        PayPeriodtext := PayPeriodtext + '-' + Format(Year);
        EndDate := CalcDate('1M', DateSpecified - 1);
        //;
        //ReportsForNavPre;
    end;

    var
        Addr: array[10, 30] of Text[250];
        NoOfRecords: Integer;
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        i: Integer;
        Transactions: Record "Assignment Matrix-X1";
        AmountRemaining: Decimal;
        IncomeTax: Decimal;
        PayPeriod: Record "Payroll PeriodX1";
        PayPeriodtext: Text[30];
        BeginDate: Date;
        DateSpecified: Date;
        EndDate: Date;
        EmpBank: Record "Employee Bank AccountX1";
        BankName: Text[30];
        BasicSalary: Decimal;
        TaxableAmt: Decimal;
        RightBracket: Boolean;
        NetPay: Decimal;
        PayPeriodRec: Record "Payroll PeriodX1";
        PayDeduct: Record "Assignment Matrix-X1";
        EmpRec: Record Employee;
        EmpNo: Code[10];
        TaxableAmount: Decimal;
        PAYE: Decimal;
        ArrEarnings: array[4, 17] of Text[250];
        ArrDeductions: array[4, 20] of Text[250];
        Index: Integer;
        Index1: Integer;
        j: Integer;
        ArrEarningsAmt: array[4, 17] of Decimal;
        ArrDeductionsAmt: array[4, 20] of Decimal;
        Year: Integer;
        EmpArray: array[10, 15] of Decimal;
        HoldDate: Date;
        DenomArray: array[3, 12] of Text[50];
        NoOfUnitsArray: array[3, 12] of Integer;
        AmountArray: array[3, 12] of Decimal;
        PayModeArray: array[3] of Text[30];
        HoursArray: array[4, 17] of Decimal;
        CompRec: Record "Human Resources Setup";
        HseLimit: Decimal;
        ExcessRetirement: Decimal;
        CfMpr: Decimal;
        relief: Decimal;
        TaxCode: Code[10];
        HoursBal: Decimal;
        Pay: Record EarningsX1;
        Ded: Record DeductionsX1;
        // Loans1: Record "Loans transactionsX1";
        HoursArrayD: array[4, 20] of Decimal;
        BankBranch: Text[30];
        CoRec: Record "Company Information";
        CoName: Text[80];
        retirecontribution: Decimal;
        GetGroup: Codeunit Payroll3;
        GroupCode: Code[20];
        CUser: Code[20];
        TOTAL_BENEFITSCaptionLbl: label 'TOTAL BENEFITS';
        TOTAL_BENEFITSCaption_Control32Lbl: label 'TOTAL BENEFITS';
        TOTAL_BENEFITSCaption_Control33Lbl: label 'TOTAL BENEFITS';
        Net_PayCaptionLbl: label 'Net Pay';
        Net_PayCaption_Control42Lbl: label 'Net Pay';
        Net_PayCaption_Control44Lbl: label 'Net Pay';
        EarningsCaptionLbl: label 'Earnings';
        EarningsCaption_Control66Lbl: label 'Earnings';
        No_CaptionLbl: label 'No:';
        Name_CaptionLbl: label 'Name:';
        Title_CaptionLbl: label 'Title:';
        Gross_PayCaptionLbl: label 'Gross Pay';
        Total_DeductionsCaptionLbl: label 'Total Deductions';
        No_Caption_Control11Lbl: label 'No:';
        Name_Caption_Control12Lbl: label 'Name:';
        Title_Caption_Control106Lbl: label 'Title:';
        Total_DeductionsCaption_Control110Lbl: label 'Total Deductions';
        No_Caption_Control111Lbl: label 'No:';
        Name_Caption_Control112Lbl: label 'Name:';
        Title_Caption_Control113Lbl: label 'Title:';
        Total_DeductionsCaption_Control121Lbl: label 'Total Deductions';
        Gross_PayCaption_Control212Lbl: label 'Gross Pay';
        Gross_PayCaption_Control213Lbl: label 'Gross Pay';
        DeptCaptionLbl: label 'Dept';
        DeptCaption_Control219Lbl: label 'Dept';
        DeptCaption_Control221Lbl: label 'Dept';
        TAX_DETAILSCaptionLbl: label 'TAX DETAILS';
        TAX_DETAILSCaption_Control108Lbl: label 'TAX DETAILS';
        Taxable_Pay_CaptionLbl: label 'Taxable Pay ';
        Less_Retirement_Contrib_CaptionLbl: label 'Less Retirement Contrib.';
        HousingCaptionLbl: label 'Housing';
        Net_Taxable_AmountCaptionLbl: label 'Net Taxable Amount';
        Net_Taxable_Kenya_PoundsCaptionLbl: label 'Net Taxable Kenya Pounds';
        Tax_ChargedCaptionLbl: label 'Tax Charged';
        Monthly_Personal_Relief_SHS_CaptionLbl: label 'Monthly Personal Relief(SHS)';
        Tax_Paid_SHS_CaptionLbl: label 'Tax Paid(SHS)';
        Taxable_PayCaptionLbl: label 'Taxable Pay';
        Less_Retirement_Contrib_Caption_Control257Lbl: label 'Less Retirement Contrib.';
        HousingCaption_Control258Lbl: label 'Housing';
        Net_Taxable_AmountCaption_Control260Lbl: label 'Net Taxable Amount';
        Net_Taxable_Kenya_PoundsCaption_Control262Lbl: label 'Net Taxable Kenya Pounds';
        Tax_ChargedCaption_Control264Lbl: label 'Tax Charged';
        Monthly_Personal_ReliefCaptionLbl: label 'Monthly Personal Relief';
        Tax_PaidCaptionLbl: label 'Tax Paid';
        Taxable_PayCaption_Control270Lbl: label 'Taxable Pay';
        Less_Retirement_Contrib_Caption_Control272Lbl: label 'Less Retirement Contrib.';
        HousingCaption_Control273Lbl: label 'Housing';
        Net_Taxable_AmountCaption_Control275Lbl: label 'Net Taxable Amount';
        Net_Taxable_Kenya_PoundsCaption_Control277Lbl: label 'Net Taxable Kenya Pounds';
        Tax_ChargedCaption_Control279Lbl: label 'Tax Charged';
        Monthly_Personal_ReliefCaption_Control281Lbl: label 'Monthly Personal Relief';
        Tax_PaidCaption_Control283Lbl: label 'Tax Paid';
        B_F_MPRCaptionLbl: label 'B/F MPR';
        C_F_MPRCaptionLbl: label 'C/F MPR';
        B_F_MPRCaption_Control285Lbl: label 'B/F MPR';
        C_F_MPRCaption_Control286Lbl: label 'C/F MPR';
        B_F_MPRCaption_Control287Lbl: label 'B/F MPR';
        C_F_MPRCaption_Control288Lbl: label 'C/F MPR';
        TAX_DETAILSCaption_Control78Lbl: label 'TAX DETAILS';
        Payment_ByCaptionLbl: label 'Payment By';
        Payment_ByCaption_Control294Lbl: label 'Payment By';
        Payment_ByCaption_Control300Lbl: label 'Payment By';
        Hrs_Days_No_CaptionLbl: label 'Hrs/Days/No.';
        Hrs_Days_No_Caption_Control404Lbl: label 'Hrs/Days/No.';
        AmountCaptionLbl: label 'Amount';
        AmountCaption_Control450Lbl: label 'Amount';
        EarningsCaption_Control451Lbl: label 'Earnings';
        Hrs_Days_No_Caption_Control452Lbl: label 'Hrs/Days/No.';
        AmountCaption_Control453Lbl: label 'Amount';
        DeductionsCaptionLbl: label 'Deductions';
        Hrs_Days_No_Caption_Control455Lbl: label 'Hrs/Days/No.';
        AmountCaption_Control456Lbl: label 'Amount';
        DeductionsCaption_Control457Lbl: label 'Deductions';
        Hrs_Days_No_Caption_Control458Lbl: label 'Hrs/Days/No.';
        AmountCaption_Control459Lbl: label 'Amount';
        DeductionsCaption_Control472Lbl: label 'Deductions';
        Hrs_Days_No_Caption_Control473Lbl: label 'Hrs/Days/No.';
        AmountCaption_Control474Lbl: label 'Amount';

    procedure GetTaxBracket(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
        AmountRemaining := TaxableAmount;
        AmountRemaining := ROUND(AmountRemaining, 0.01);
        EndTax := false;
        TaxTable.SetRange("Table Code", TaxCode);
        if TaxTable.Find('-') then begin
            repeat
                if AmountRemaining <= 0 then
                    EndTax := true
                else begin
                    if ROUND((TaxableAmount), 0.01) > TaxTable."Upper Limit" then
                        Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                    else begin
                        Tax := AmountRemaining * TaxTable.Percentage / 100;
                        TotalTax := TotalTax + Tax;
                        EndTax := true;
                    end;
                    if not EndTax then begin
                        AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                        TotalTax := TotalTax + Tax;
                    end;
                end;
            until (TaxTable.Next = 0) or EndTax = true;
        end;
        TotalTax := TotalTax;
        TotalTax := PayrollRounding(TotalTax);
        IncomeTax := -TotalTax;
        if not Employee."Pays tax" then
            IncomeTax := 0;
    end;

    procedure GetPayPeriod()
    begin
        PayPeriod.SetRange(PayPeriod."Close Pay", false);
        if PayPeriod.Find('-') then begin
            PayPeriodtext := PayPeriod.Name;
            BeginDate := PayPeriod."Starting Date";
        end;
    end;

    procedure GetTaxBracket1(var TaxableAmount: Decimal)
    var
        TaxTable: Record BracketsX1;
        TotalTax: Decimal;
        Tax: Decimal;
        EndTax: Boolean;
    begin
        AmountRemaining := TaxableAmount;
        TaxTable.Find('-');
        repeat
            if AmountRemaining <= 0 then
                EndTax := true
            else begin
                if AmountRemaining >= TaxTable."Taxable Amount" then
                    Tax := TaxTable."Taxable Amount" * TaxTable.Percentage / 100
                else begin
                    Tax := AmountRemaining * TaxTable.Percentage / 100;
                    EndTax := true;
                end;
                AmountRemaining := AmountRemaining - TaxTable."Taxable Amount";
                //IF EndTax=FALSE THEN
                TotalTax := TotalTax + Tax;
            end;
        until (TaxTable.Next = 0);
        PAYE := -TotalTax;
    end;

    procedure PayrollRounding(var Amount: Decimal) PayrollRounding: Decimal
    var
        HRsetup: Record "Human Resources Setup";
    begin
        HRsetup.Get;
        if HRsetup."Payroll Rounding Precision" = 0 then
            Error('You must specify the rounding precision under HR setup');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Nearest then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '=');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Up then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '>');
        if HRsetup."Payroll Rounding Type" = HRsetup."payroll rounding type"::Down then
            PayrollRounding := ROUND(Amount, HRsetup."Payroll Rounding Precision", '<');
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511128_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511128;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
