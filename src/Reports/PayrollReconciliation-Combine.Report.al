//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511185_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511185) { }
//type("System.IO.Path"; System_IO_Path51511185) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193590 "Payroll Reconciliation-Combine"
{
    RDLCLayout = './Layouts/PayrollReconciliation-Combine.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(EarningsX1; EarningsX1)
        {
            DataItemTableView = sorting(Code);
            PrintOnlyIfDetail = true;
            RequestFilterFields = "Pay Period Filter";
            column(ReportForNavId_7169; 7169) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(STRSUBSTNO__PERIOD___1__UPPERCASE_FORMAT_Thismonth_0___month_text___year4_____; StrSubstNo('PERIOD: %1', UpperCase(Format(Thismonth, 0, '<month text> <year4>'))))
            {
            }
            column(Title; Title)
            {
            }
            column(EarningsX1_Code; EarningsX1.Code)
            {
            }
            column(EarningsX1_Description; EarningsX1.Description)
            {
            }
            column(PAYROLL_RECONCILIATIONCaption; PAYROLL_RECONCILIATIONCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(EmployeeCaption; EmployeeCaptionLbl)
            {
            }
            column(Current_PeriodCaption; Current_PeriodCaptionLbl)
            {
            }
            column(DifferenceCaption; DifferenceCaptionLbl)
            {
            }
            column(EarningsX1_Pay_Period_Filter; EarningsX1."Pay Period Filter")
            {
            }
            dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
            {
                DataItemLink = Code = field(Code), "Payroll Period" = field("Pay Period Filter");
                DataItemTableView = sorting("Employee No", Type, Code, "Payroll Period", "Reference No") where(Type = const(Payment));
                column(ReportForNavId_5751; 5751) { } // Autogenerated by ForNav - Do not delete
                column(Assignment_Matrix_X1__Employee_No_; "Assignment Matrix-X1"."Employee No")
                {
                }
                column(Assignment_Matrix_X1_Amount; "Assignment Matrix-X1".Amount)
                {
                }
                column(EmpName; EmpName)
                {
                }
                column(LastMonthVal; LastMonthVal)
                {
                }
                column(Difference; Difference)
                {
                }
                column(Assignment_Matrix_X1_Amount_Control1000000015; "Assignment Matrix-X1".Amount)
                {
                }
                column(LastMonthVal_Control1000000016; LastMonthVal)
                {
                }
                column(Difference_Control1000000017; Difference)
                {
                }
                column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
                {
                }
                column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
                {
                }
                column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
                {
                }
                column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
                {
                }
                trigger OnPreDataItem();
                begin

                end;

                trigger OnAfterGetRecord();
                begin
                    if Emp.Get("Assignment Matrix-X1"."Employee No") then begin
                        EmpName := Emp."First Name" + ' ' + Emp."Middle Name" + ' ' + Emp."Last Name";
                    end;
                    if Direction = Direction::"Last Month" then begin
                        LastMonthVal := 0;
                        Difference := 0;
                        Assignmat.Reset;
                        Assignmat.SetRange(Assignmat."Employee No", "Assignment Matrix-X1"."Employee No");
                        Assignmat.SetRange(Assignmat.Type, "Assignment Matrix-X1".Type);
                        Assignmat.SetRange(Assignmat.Code, "Assignment Matrix-X1".Code);
                        Assignmat.SetRange(Assignmat."Payroll Period", Lastmonth);
                        Assignmat.SetRange(Assignmat.Amount, "Assignment Matrix-X1".Amount);
                        if Assignmat.Find('+') then
                            CurrReport.Skip
                        else begin
                            Assignmat.Reset;
                            Assignmat.SetRange(Assignmat."Employee No", "Assignment Matrix-X1"."Employee No");
                            Assignmat.SetRange(Assignmat.Type, "Assignment Matrix-X1".Type);
                            Assignmat.SetRange(Assignmat.Code, "Assignment Matrix-X1".Code);
                            Assignmat.SetRange(Assignmat."Payroll Period", Lastmonth);
                            if Assignmat.Find('+') then
                                LastMonthVal := Assignmat.Amount
                            else if not Assignmat.Find('+') then
                                LastMonthVal := 0;
                        end;
                        Difference := "Assignment Matrix-X1".Amount - LastMonthVal;
                    end else if Direction = Direction::"Next Month" then begin
                        LastMonthVal := 0;
                        Difference := 0;
                        Assignmat.Reset;
                        Assignmat.SetRange(Assignmat."Employee No", "Assignment Matrix-X1"."Employee No");
                        Assignmat.SetRange(Assignmat.Type, "Assignment Matrix-X1".Type);
                        Assignmat.SetRange(Assignmat.Code, "Assignment Matrix-X1".Code);
                        Assignmat.SetRange(Assignmat."Payroll Period", Nextmonth);
                        Assignmat.SetRange(Assignmat.Amount, "Assignment Matrix-X1".Amount);
                        if Assignmat.Find('+') then
                            CurrReport.Skip
                        else begin
                            Assignmat.Reset;
                            Assignmat.SetRange(Assignmat."Employee No", "Assignment Matrix-X1"."Employee No");
                            Assignmat.SetRange(Assignmat.Type, "Assignment Matrix-X1".Type);
                            Assignmat.SetRange(Assignmat.Code, "Assignment Matrix-X1".Code);
                            Assignmat.SetRange(Assignmat."Payroll Period", Nextmonth);
                            if Assignmat.Find('+') then
                                LastMonthVal := Assignmat.Amount
                            else if not Assignmat.Find('+') then
                                LastMonthVal := 0;
                        end;
                        Difference := "Assignment Matrix-X1".Amount - LastMonthVal;
                    end;
                end;

            }
        }
        dataitem(DeductionsX1; DeductionsX1)
        {
            DataItemTableView = sorting(Code);
            PrintOnlyIfDetail = true;
            column(ReportForNavId_1209; 1209) { } // Autogenerated by ForNav - Do not delete
            column(DeductionsX1_Code; DeductionsX1.Code)
            {
            }
            column(DeductionsX1_Description; DeductionsX1.Description)
            {
            }
            dataitem(DetailedDeductions; "Assignment Matrix-X1")
            {
                DataItemLink = Code = field(Code);
                DataItemTableView = sorting("Employee No", Type, Code, "Payroll Period", "Reference No") where(Type = const(Deduction));
                column(ReportForNavId_2272; 2272) { } // Autogenerated by ForNav - Do not delete
                column(DetailedDeductions__Employee_No_; DetailedDeductions."Employee No")
                {
                }
                column(EmpName_Control1000000026; EmpName)
                {
                }
                column(DetailedDeductions_Amount; DetailedDeductions.Amount)
                {
                }
                column(LastMonthVal_Control1000000028; LastMonthVal)
                {
                }
                column(Difference_Control1000000029; Difference)
                {
                }
                column(DetailedDeductions_Amount_Control1000000031; DetailedDeductions.Amount)
                {
                }
                column(LastMonthVal_Control1000000032; LastMonthVal)
                {
                }
                column(Difference_Control1000000033; Difference)
                {
                }
                column(DetailedDeductions_Type; DetailedDeductions.Type)
                {
                }
                column(DetailedDeductions_Code; DetailedDeductions.Code)
                {
                }
                column(DetailedDeductions_Payroll_Period; DetailedDeductions."Payroll Period")
                {
                }
                column(DetailedDeductions_Reference_No; DetailedDeductions."Reference No")
                {
                }
                trigger OnPreDataItem();
                begin
                    DetailedDeductions.SetRange(DetailedDeductions."Payroll Period", Thismonth);

                end;

                trigger OnAfterGetRecord();
                begin
                    if Emp.Get(DetailedDeductions."Employee No") then begin
                        EmpName := Emp."First Name" + ' ' + Emp."Middle Name" + ' ' + Emp."Last Name";
                    end;
                    LastMonthVal := 0;
                    Difference := 0;
                    Assignmat.Reset;
                    Assignmat.SetRange(Assignmat."Employee No", DetailedDeductions."Employee No");
                    Assignmat.SetRange(Assignmat.Type, DetailedDeductions.Type);
                    Assignmat.SetRange(Assignmat.Code, DetailedDeductions.Code);
                    Assignmat.SetRange(Assignmat."Payroll Period", Lastmonth);
                    Assignmat.SetRange(Assignmat.Amount, DetailedDeductions.Amount);
                    if Assignmat.Find('+') then
                        CurrReport.Skip
                    else begin
                        Assignmat.Reset;
                        Assignmat.SetRange(Assignmat."Employee No", DetailedDeductions."Employee No");
                        Assignmat.SetRange(Assignmat.Type, DetailedDeductions.Type);
                        Assignmat.SetRange(Assignmat.Code, DetailedDeductions.Code);
                        Assignmat.SetRange(Assignmat."Payroll Period", Lastmonth);
                        if Assignmat.Find('+') then
                            LastMonthVal := Assignmat.Amount
                        else if not Assignmat.Find('+') then
                            LastMonthVal := 0;
                    end;
                    Difference := DetailedDeductions.Amount - LastMonthVal;
                end;

            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        Thismonth := EarningsX1.GetRangeMin(EarningsX1."Pay Period Filter");
        if Direction = Direction::"Next Month" then begin
            Nextmonth := CalcDate('1M', Thismonth);
            Title := 'Next Period';
        end else if Direction = Direction::"Last Month" then begin
            Lastmonth := CalcDate('-1M', Thismonth);
            Title := 'Last Period';
        end;
        //;
        //ReportsForNavPre;
    end;

    var
        EmpName: Text[230];
        Emp: Record Employee;
        Assignmat: Record "Assignment Matrix-X1";
        Thismonth: Date;
        Lastmonth: Date;
        LastMonthVal: Decimal;
        Difference: Decimal;
        Nextmonth: Date;
        Title: Text[30];
        Direction: Option ,"Last Month","Next Month";
        PAYROLL_RECONCILIATIONCaptionLbl: label 'PAYROLL RECONCILIATION';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        EmployeeCaptionLbl: label 'Employee';
        Current_PeriodCaptionLbl: label 'Current Period';
        DifferenceCaptionLbl: label 'Difference';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511185_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511185;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
