//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511146_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511146) { }
//type("System.IO.Path"; System_IO_Path51511146) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193561 "Allocation Report"
{
    UsageCategory = ReportsAndAnalysis;
    RDLCLayout = './Layouts/AllocationReport.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Assignment Matrix-X1"; "Assignment Matrix-X1")
        {
            DataItemTableView = sorting("Payroll Period", Type, Code);
            RequestFilterFields = "Payroll Period", Type, "Code";
            RequestFilterHeading = 'Payroll';
            column(ReportForNavId_5751; 5751) { } // Autogenerated by ForNav - Do not delete
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(UPPERCASE_FORMAT__Payroll_Period__0___month_text___year4____; UpperCase(Format("Payroll Period", 0, '<month text> <year4>')))
            {
            }
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(TIME; Time)
            {
            }
            column(Assignment_Matrix_X1_Type; "Assignment Matrix-X1".Type)
            {
            }
            column(Assignment_Matrix_X1__Assignment_Matrix_X1__Description; "Assignment Matrix-X1".Description)
            {
            }
            column(Assignment_Matrix_X1_Amount; "Assignment Matrix-X1".Amount)
            {
            }
            column(Assignment_Matrix_X1_Code; "Assignment Matrix-X1".Code)
            {
            }
            column(STRSUBSTNO__Total__1__Type_; StrSubstNo('Total %1', Type))
            {
            }
            column(Assignment_Matrix_X1_Amount_Control1000000031; "Assignment Matrix-X1".Amount)
            {
            }
            column(Net_Salary_; 'Net Salary')
            {
            }
            column(TotalNetPay; TotalNetPay)
            {
            }
            column(No_of_Employees_; 'No of Employees')
            {
            }
            column(NoOfEmployees; NoOfEmployees)
            {
            }
            column(COMPANY_SUMMARYCaption; COMPANY_SUMMARYCaptionLbl)
            {
            }
            column(PERIOD_Caption; PERIOD_CaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(CODECaption; CODECaptionLbl)
            {
            }
            column(DESCRIPTIONCaption; DESCRIPTIONCaptionLbl)
            {
            }
            column(AMOUNTCaption; AMOUNTCaptionLbl)
            {
            }
            column(Assignment_Matrix_X1_Employee_No; "Assignment Matrix-X1"."Employee No")
            {
            }
            column(Assignment_Matrix_X1_Payroll_Period; "Assignment Matrix-X1"."Payroll Period")
            {
            }
            column(Assignment_Matrix_X1_Reference_No; "Assignment Matrix-X1"."Reference No")
            {
            }
            column(Taxableamount_AssignmentMatrixX1; "Assignment Matrix-X1"."Taxable amount")
            {
            }
            column(TaxDeductible_AssignmentMatrixX1; "Assignment Matrix-X1"."Tax Deductible")
            {
            }
            column(TaxCharged; Taxcharged)
            {
            }
            column(Contribution_Benefit; "Assignment Matrix-X1"."Less Pension Contribution")
            {
            }
            column(NonCashBenefit_AssignmentMatrixX1; "Assignment Matrix-X1"."Non-Cash Benefit")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo(Code);
                TotalNetPay := 0;
            end;

            trigger OnAfterGetRecord();
            begin
                if EmpRec.Get("Assignment Matrix-X1"."Employee No") then begin
                    if EmpRec.Status <> EmpRec.Status::Active then
                        CurrReport.Skip;
                end;
                if "Assignment Matrix-X1".Type = "Assignment Matrix-X1".Type::Payment then begin
                    if Earning.Get("Assignment Matrix-X1".Code) then begin
                        if not Earning."Non-Cash Benefit" then
                            TotalNetPay := TotalNetPay + "Assignment Matrix-X1".Amount;
                    end;
                end
                else
                    TotalNetPay := TotalNetPay + "Assignment Matrix-X1".Amount;
                // Taxcharged= "Assignment Matrix-X1".Paye +
            end;

        }
        // dataitem("Loan Application1"; "Loan Application1")
        // {
        //     column(ReportForNavId_1000000017; 1000000017) { } // Autogenerated by ForNav - Do not delete
        //     column(FORMAT_TODAY_0_4_1; Format(Today, 0, 4))
        //     {
        //     }
        //     column(LOAN_STATUS_REPORT_; 'LOAN STATUS REPORT')
        //     {
        //     }
        //     column(Loan_Application1__GETFILTERS; "Loan Application1".GetFilters)
        //     {
        //     }
        //     column(Loan_Application1__Loan_Product_Type_; "Loan Application1"."Loan Product Type")
        //     {
        //     }
        //     column(Loan_Application1__Employee_No_; "Loan Application1"."Employee No")
        //     {
        //     }
        //     column(Loan_Application1__Employee_Name_; "Loan Application1"."Employee Name")
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Approved_Amount_; "Loan Application1"."Approved Amount")
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Total_Repayment_; "Loan Application1"."Total Repayment")
        //     {
        //     }
        //     column(Balance; Balance)
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Interest_Amount_; "Loan Application1"."Interest Amount")
        //     {
        //     }
        //     column(i; i)
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Approved_Amount__Control1000000008; "Loan Application1"."Approved Amount")
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Interest_Amount__Control1000000009; "Loan Application1"."Interest Amount")
        //     {
        //     }
        //     column(Loan_Application1__Loan_Application1___Total_Repayment__Control1000000011; "Loan Application1"."Total Repayment")
        //     {
        //     }
        //     column(Balance_Control1000000016; Balance)
        //     {
        //     }
        //     column(Loan_Application1_Loan_No; "Loan Application1"."Loan No")
        //     {
        //     }
        //     column(Loan_Application1_Payroll_Group; "Loan Application1"."Payroll Group")
        //     {
        //     }
        //     column(Loan_App_Description; "Loan Application1".Description)
        //     {
        //     }
        //     trigger OnPreDataItem();
        //     begin
        //         LastFieldNo := FieldNo("Loan Product Type");

        //     end;

        //     trigger OnAfterGetRecord();
        //     begin
        //         "Loan Application1".CalcFields("Loan Application1"."Total Repayment", "Loan Application1"."Interest Amount",
        //         "Loan Application1".Receipts);
        //         Balance := 0;
        //         Balance := ("Loan Application1"."Approved Amount" + "Loan Application1"."Total Repayment" - "Loan Application1".Receipts);
        //         i := i + 1;
        //     end;

        // }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        EmpRec.Reset;
        EmpRec.SetRange(EmpRec."Pay Period Filter", "Assignment Matrix-X1".GetRangeMin("Assignment Matrix-X1"."Payroll Period"));
        if EmpRec.Find('-') then
            repeat
                EmpRec.CalcFields(EmpRec."Total Allowances", EmpRec."Total Deductions");
                if (EmpRec."Total Allowances" + EmpRec."Total Deductions") <> 0 then
                    NoOfEmployees := NoOfEmployees + 1;
            until EmpRec.Next = 0;
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        TotalNetPay: Decimal;
        Earning: Record EarningsX1;
        NoOfEmployees: Integer;
        EmpRec: Record Employee;
        COMPANY_SUMMARYCaptionLbl: label 'COMPANY SUMMARY';
        PERIOD_CaptionLbl: label 'PERIOD:';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        CODECaptionLbl: label 'CODE';
        DESCRIPTIONCaptionLbl: label 'DESCRIPTION';
        AMOUNTCaptionLbl: label 'AMOUNT';
        Balance: Decimal;
        i: Integer;
        TaxChargedLbl: label 'Tax Charged';
        Taxcharged: Decimal;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511146_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511146;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
