//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511193_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511193) { }
//type("System.IO.Path"; System_IO_Path51511193) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193598 "Transport Request"
{
    RDLCLayout = './Layouts/TransportRequest.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Training Request1"; "Training Request1")
        {
            column(ReportForNavId_8496; 8496) { } // Autogenerated by ForNav - Do not delete
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(CompanyInfo_Name; CompanyInfo.Name)
            {
            }
            column(STRSUBSTNO_TXT002_CompanyInfo_Address_CompanyInfo__Post_Code__CompanyInfo_City_; StrSubstNo(TXT002, CompanyInfo."Address 2", CompanyInfo."Post Code", CompanyInfo.City))
            {
            }
            column(CompanyInfo_Address; CompanyInfo.Address)
            {
            }
            column(Training_Request1__Training_Request1___Request_No__; "Training Request1"."Request No.")
            {
            }
            column(Training_Request1__Training_Request1___Request_Date_; "Training Request1"."Request Date")
            {
            }
            column(Training_Request1__Employee_No_; "Training Request1"."Employee No")
            {
            }
            column(Training_Request1__Employee_Name_; "Training Request1"."Employee Name")
            {
            }
            column(Training_Request1__Training_Request1__Description; "Training Request1".Description)
            {
            }
            column(Training_Request1__Training_Request1___Planned_Start_Date_; "Training Request1"."Planned Start Date")
            {
            }
            column(Training_Request1__Training_Request1___Planned_End_Date_; "Training Request1"."Planned End Date")
            {
            }
            column(Training_Request1__Training_Request1___No__Of_Days_; "Training Request1"."No. Of Days")
            {
            }
            column(V1stapprover_; "1stapprover")
            {
            }
            column(UserRecApp1_Picture; UserRecApp1.Picture)
            {
            }
            column(V2ndapprover_; "2ndapprover")
            {
            }
            column(UserRecApp2_Picture; UserRecApp2.Picture)
            {
            }
            column(V3rdapprover_; "3rdapprover")
            {
            }
            column(UserRecApp3_Picture; UserRecApp3.Picture)
            {
            }
            column(V1stapproverdate_; "1stapproverdate")
            {
            }
            column(V2ndapproverdate_; "2ndapproverdate")
            {
            }
            column(V3rdapproverdate_; "3rdapproverdate")
            {
            }
            column(Training_Request1__Training_Insitution_; "Training Request1"."Training Insitution")
            {
            }
            column(Training_Request1__Tuition_Fee_; "Training Request1"."Tuition Fee Flow")
            {
            }
            column(Training_Request1__Per_Diem_; "Training Request1"."Per Diem Flow")
            {
            }
            column(Training_Request1__Air_Ticket_; "Training Request1"."Air Ticket Flow")
            {
            }
            column(Training_Request1_Travel_Documents_Fees; "Training Request1"."Travel Documents Fees Flow")
            {
            }
            column(Training_Request1_Reimbursible_Imprest; "Training Request1"."Reimbursible Imprest Flow")
            {
            }
            column(Training_Request1__Total_Cost_; "Training Request1"."Total Cost")
            {
            }
            column(Training_Request1__Exchange_Rate_; "Training Request1"."Exchange Rate")
            {
            }
            column(Training_Request1__Total_Cost__LCY__; "Total Cost (LCY)")
            {
            }
            column(Training_Request1__Available_Funds_; "Training Request1"."Available Funds")
            {
            }
            column(TRAINING_REQUISITION_Caption; TRAINING_REQUISITION_CaptionLbl)
            {
            }
            column(Training_Request1__Training_Request1___Request_No__Caption; FieldCaption("Request No."))
            {
            }
            column(Training_Request1__Training_Request1___Request_Date_Caption; FieldCaption("Request Date"))
            {
            }
            column(Training_Request1__Employee_No_Caption; FieldCaption("Employee No"))
            {
            }
            column(Training_Request1__Employee_Name_Caption; FieldCaption("Employee Name"))
            {
            }
            column(Training_Request1__Training_Request1__DescriptionCaption; FieldCaption(Description))
            {
            }
            column(Training_Request1__Training_Request1___Planned_Start_Date_Caption; FieldCaption("Planned Start Date"))
            {
            }
            column(Training_Request1__Training_Request1___Planned_End_Date_Caption; FieldCaption("Planned End Date"))
            {
            }
            column(Training_Request1__Training_Request1___No__Of_Days_Caption; FieldCaption("No. Of Days"))
            {
            }
            column(APPROVALCaption; APPROVALCaptionLbl)
            {
            }
            column(PREPARED_BYCaption; PREPARED_BYCaptionLbl)
            {
            }
            column(SIGNATURECaption; SIGNATURECaptionLbl)
            {
            }
            column(CHECKED_BY_Caption; CHECKED_BY_CaptionLbl)
            {
            }
            column(SIGNATURECaption_Control1000000021; SIGNATURECaption_Control1000000021Lbl)
            {
            }
            column(DATE__________________________________________________Caption; DATE__________________________________________________CaptionLbl)
            {
            }
            column(DATE__________________________________________________Caption_Control1000000055; DATE__________________________________________________Caption_Control1000000055Lbl)
            {
            }
            column(APPROVED_BY_Caption; APPROVED_BY_CaptionLbl)
            {
            }
            column(SIGNATURE_Caption; SIGNATURE_CaptionLbl)
            {
            }
            column(DATE__________________________________________________Caption_Control1000000060; DATE__________________________________________________Caption_Control1000000060Lbl)
            {
            }
            column(Training_Request1__Training_Insitution_Caption; FieldCaption("Training Insitution"))
            {
            }
            column(Training_Request1__Tuition_Fee_Caption; FieldCaption("Tuition Fee"))
            {
            }
            column(Training_Request1__Per_Diem_Caption; FieldCaption("Per Diem"))
            {
            }
            column(Training_Request1__Air_Ticket_Caption; FieldCaption("Air Ticket"))
            {
            }
            column(Training_Request1__Total_Cost_Caption; FieldCaption("Total Cost"))
            {
            }
            column(Training_Request1__Exchange_Rate_Caption; FieldCaption("Exchange Rate"))
            {
            }
            column(Training_Request1__Total_Cost__LCY__Caption; FieldCaption("Total Cost (LCY)"))
            {
            }
            column(ImprestCaption; Imprest)
            {
            }
            column(TravelDocsCaption; TravelDocs)
            {
            }
            column(Training_Request1__Available_Funds_Caption; FieldCaption("Available Funds"))
            {
            }
            dataitem("Training Participants"; "Training Participants")
            {
                DataItemLink = "Training Request" = field("Request No.");
                column(ReportForNavId_1000000001; 1000000001) { } // Autogenerated by ForNav - Do not delete
                column(Training_Participants_Training_Request; "Training Participants"."Training Request")
                {
                }
                column(Training_Participants_Employee_No; "Training Participants"."Employee No")
                {
                }
                column(Training_Participants_Employee_Name; "Training Participants"."Employee Name")
                {
                }
                column(Training_Participants_Department; "Training Participants".Department)
                {
                }
                column(Training_Participants_Designation; "Training Participants".Designation)
                {
                }
                column(Training_Participants_Directorate; "Training Participants".Directorate)
                {
                }
                column(Training_Participants_Training_Need; "Training Participants"."Training Need")
                {
                }
                column(Training_Participants_Need_Source; "Training Participants"."Need Source")
                {
                }
                column(Training_Participants_Training_Need_Description; "Training Participants"."Training Need Description")
                {
                }
                column(Training_Participants_Per_Diem_Distribution; "Training Participants"."Per Diem Distribution")
                {
                }
                column(Training_Participants_Tuition_Fee_Distribution; "Training Participants"."Tuition Fee Distribution")
                {
                }
                column(Training_Participants_Air_Ticket_Distribution; "Training Participants"."Air Ticket Distribution")
                {
                }
                column(Training_Participants_Imprest_Distribution; "Training Participants"."Imprest Distribution")
                {
                }
                column(Training_Participants_Travel_Docs_Fees_Dstrbtn; "Training Participants"."Travel Docs Fees Dstrbtn")
                {
                }
                column(Dept; Dept)
                {
                }
                column(Directorate; DirectorateName)
                {
                }
                trigger OnAfterGetRecord();
                begin
                    DimensionValue.Reset;
                    if DimensionValue.Get('DEPARTMENT', "Training Participants".Department) then
                        Dept := DimensionValue.Name;
                    DimensionValue.Reset;
                    if DimensionValue.Get('DIRECTORATE', "Training Participants".Directorate) then
                        DirectorateName := DimensionValue.Name;
                end;

            }
            trigger OnPreDataItem();
            begin
                CompanyInfo.CalcFields(CompanyInfo.Picture);
                "Training Request1".CalcFields("Training Request1"."Tuition Fee Flow", "Training Request1"."Per Diem Flow", "Training Request1"."Air Ticket Flow", "Training Request1"."Reimbursible Imprest Flow", "Training Request1"."Travel Documents Fees Flow");
            end;

            trigger OnAfterGetRecord();
            begin
                ApprovalEntries.Reset;
                ApprovalEntries.SetRange(ApprovalEntries."Table ID", 69039);
                ApprovalEntries.SetRange(ApprovalEntries."Document No.", "Training Request1"."Request No.");
                ApprovalEntries.SetRange(ApprovalEntries.Status, ApprovalEntries.Status::Approved);
                if ApprovalEntries.Find('-') then begin
                    i := 0;
                    repeat
                        i := i + 1;
                        if i = 1 then begin
                            "1stapprover" := ApprovalEntries."Approver ID";
                            "1stapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp1.Get("1stapprover") then
                                UserRecApp1.CalcFields(UserRecApp1.Picture);
                        end;
                        if i = 2 then begin
                            "2ndapprover" := ApprovalEntries."Approver ID";
                            "2ndapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp2.Get("2ndapprover") then
                                UserRecApp2.CalcFields(UserRecApp2.Picture);
                        end;
                        if i = 3 then begin
                            "3rdapprover" := ApprovalEntries."Approver ID";
                            "3rdapproverdate" := ApprovalEntries."Last Date-Time Modified";
                            if UserRecApp3.Get("3rdapprover") then
                                UserRecApp3.CalcFields(UserRecApp3.Picture);
                        end;
                    until ApprovalEntries.Next = 0;
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        CompanyInfo.Get;
        SalesSetup.Get;
        GLsetup.Get;
        case SalesSetup."Logo Position on Documents" of
            SalesSetup."logo position on documents"::"No Logo":
                ;
            SalesSetup."logo position on documents"::Left:
                begin
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Center:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
            SalesSetup."logo position on documents"::Right:
                begin
                    CompanyInfo.Get;
                    CompanyInfo.CalcFields(Picture);
                end;
        end;
        //;
        //ReportsForNavPre;
    end;

    var
        DimValues: Record "Dimension Value";
        CompName: Text[100];
        TypeOfDoc: Text[100];
        RecPayTypes: Record Receipts1;
        BankName: Text[100];
        Banks: Record "Bank Account";
        Bank: Record "Bank Account";
        PayeeBankName: Text[100];
        VendorPG: Record "Vendor Posting Group";
        CustPG: Record "Customer Posting Group";
        FAPG: Record "FA Posting Group";
        BankPG: Record "Bank Account Posting Group";
        PGAccount: Text[50];
        Vend: Record Vendor;
        Cust: Record Customer;
        FA: Record "FA Depreciation Book";
        BankAccountUsed: Text[50];
        BankAccountUsedName: Text[100];
        PGAccountUsedName: Text[50];
        GLAccount: Record "G/L Account";
        CompanyInfo: Record "Company Information";
        SalesSetup: Record "Sales & Receivables Setup";
        OnesText: array[20] of Text[30];
        TensText: array[10] of Text[30];
        ExponentText: array[5] of Text[30];
        GLsetup: Record "General Ledger Setup";
        NumberText: array[2] of Text[80];
        CurrencyCodeText: Code[10];
        TXT001: label '%1 %2';
        TXT002: label '%1, %2  %3';
        ApprovalEntries: Record "Approval Entry";
        "1stapprover": Text[30];
        "2ndapprover": Text[30];
        i: Integer;
        "1stapproverdate": DateTime;
        "2ndapproverdate": DateTime;
        UserRec: Record "User Setup";
        UserRecApp1: Record "User Setup";
        UserRecApp2: Record "User Setup";
        UserRecApp3: Record "User Setup";
        "3rdapprover": Text[30];
        "3rdapproverdate": DateTime;
        TRAINING_REQUISITION_CaptionLbl: label 'TRAINING REQUISITION ';
        APPROVALCaptionLbl: label 'APPROVAL';
        PREPARED_BYCaptionLbl: label 'PREPARED BY';
        SIGNATURECaptionLbl: label 'SIGNATURE';
        CHECKED_BY_CaptionLbl: label 'CHECKED BY ';
        SIGNATURECaption_Control1000000021Lbl: label 'SIGNATURE';
        DATE__________________________________________________CaptionLbl: label 'DATE _________________________________________________';
        DATE__________________________________________________Caption_Control1000000055Lbl: label 'DATE _________________________________________________';
        APPROVED_BY_CaptionLbl: label 'APPROVED BY ';
        SIGNATURE_CaptionLbl: label 'SIGNATURE ';
        DATE__________________________________________________Caption_Control1000000060Lbl: label 'DATE _________________________________________________';
        DimensionValue: Record "Dimension Value";
        Dept: Text[80];
        DirectorateName: Text[80];
        Imprest: label 'Reimbursible Imprest';
        TravelDocs: label 'Travel Document Fees';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511193_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511193;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
