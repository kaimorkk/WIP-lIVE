//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511155_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511155) { }
//type("System.IO.Path"; System_IO_Path51511155) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193569 "Leave Balance"
{
    RDLCLayout = './Layouts/LeaveBalance.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem(Employee; Employee)
        {
            column(ReportForNavId_1000000016; 1000000016) { } // Autogenerated by ForNav - Do not delete
            dataitem("Employee Leaves1"; "Employee Leaves1")
            {
                DataItemLink = "Employee No" = field("No.");
                RequestFilterFields = "Leave Code", "Employee No", "Leaves Date Filter", "Maturity Date";
                column(ReportForNavId_7387; 7387) { } // Autogenerated by ForNav - Do not delete
                column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
                {
                }
                //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
                // {
                // }
                column(USERID; UserId)
                {
                }
                column(CompanyInfo_Picture; CompanyInfo.Picture)
                {
                }
                column(Employee_Leaves1__Employee_No_; "Employee Leaves1"."Employee No")
                {
                }
                column(Employee_Leaves1__Employee_Leaves1__Entitlement; "Employee Leaves1".Entitlement)
                {
                }
                column(Employee_Leaves1__Employee_Leaves1___Balance_Brought_Forward_; "Employee Leaves1"."Balance Brought Forward")
                {
                }
                column(Name; Name)
                {
                }
                column(Employee_Leaves1__Entitlement___Employee_Leaves1____Balance_Brought_Forward___TotalRecalls____TotalTaken_TotalAbsence_; ("Employee Leaves1".Entitlement + "Employee Leaves1"."Balance Brought Forward" + TotalRecalls) - (TotalTaken + TotalAbsence))
                {
                }
                column(TotalRecalls; TotalRecalls)
                {
                }
                column(TotalTaken; TotalTaken)
                {
                }
                column(TotalAbsence; TotalAbsence)
                {
                }
                column(ANNUAL_LEAVE_BALANCE_Caption; ANNUAL_LEAVE_BALANCE_CaptionLbl)
                {
                }
                column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
                {
                }
                column(Staff_No_Caption; Staff_No_CaptionLbl)
                {
                }
                column(NameCaption; NameCaptionLbl)
                {
                }
                column(Balance_B_FCaption; Balance_B_FCaptionLbl)
                {
                }
                column(BalanceCaption; BalanceCaptionLbl)
                {
                }
                column(EntitlmentCaption; EntitlmentCaptionLbl)
                {
                }
                column(Days_TakenCaption; Days_TakenCaptionLbl)
                {
                }
                column(Days_RecalledCaption; Days_RecalledCaptionLbl)
                {
                }
                column(Days_AbsentCaption; Days_AbsentCaptionLbl)
                {
                }
                column(Employee_Leaves1_Leave_Code; "Employee Leaves1"."Leave Code")
                {
                }
                column(Employee_Leaves1_Maturity_Date; "Employee Leaves1"."Maturity Date")
                {
                }
                trigger OnPreDataItem();
                begin
                    CompanyInfo.Reset;
                    CompanyInfo.CalcFields(CompanyInfo.Picture);
                    //"Employee Leaves1".SETRANGE("Employee Leaves1"."Maturity Date",MaturityDateFilter);
                end;

                trigger OnAfterGetRecord();
                begin
                    if Emp.Get("Employee Leaves1"."Employee No") then begin
                        "Employee Leaves1".CalcFields("Employee Leaves1"."Total Days Taken", "Employee Leaves1"."Recalled Days");
                        Name := Emp."First Name" + ' ' + Emp."Middle Name" + ' ' + Emp."Last Name";
                    end;
                    TotalTaken := 0;
                    TotalRecalls := 0;
                    TotalAbsence := 0;
                    //MESSAGE('DATE FILTER %1',"Employee Leaves1".GETFILTER("Leaves Date Filter"));
                    EmpLeaveApps.Reset;
                    EmpLeaveApps.SetRange(EmpLeaveApps."Employee No", "Employee No");
                    EmpLeaveApps.SetRange(EmpLeaveApps."Leave Code", "Leave Code");
                    EmpLeaveApps.SetRange(EmpLeaveApps."Maturity Date", "Maturity Date");
                    EmpLeaveApps.SetRange(EmpLeaveApps.Status, EmpLeaveApps.Status::Released);
                    //EmpLeaveApps.SETFILTER(EmpLeaveApps."End Date","Employee Leaves1".GETFILTER("Leaves Date Filter"));
                    if EmpLeaveApps.Find('-') then begin
                        repeat
                            TotalTaken := TotalTaken + EmpLeaveApps."Days Applied";
                        until EmpLeaveApps.Next = 0;
                    end;
                    Recalls.Reset;
                    Recalls.SetRange(Recalls."Employee No", "Employee Leaves1"."Employee No");
                    Recalls.SetRange(Recalls."Maturity Date", "Employee Leaves1"."Maturity Date");
                    Recalls.SetFilter(Recalls."Recalled To", "Employee Leaves1".GetFilter("Leaves Date Filter"));
                    if Recalls.Find('-') then begin
                        repeat
                            TotalRecalls := TotalRecalls + Recalls."No. of Off Days";
                        until Recalls.Next = 0;
                    end;
                    Absences.Reset;
                    Absences.SetRange(Absences."Employee No", "Employee No");
                    Absences.SetRange(Absences."Maturity Date", "Maturity Date");
                    Absences.SetFilter(Absences."Absent To", "Employee Leaves1".GetFilter("Leaves Date Filter"));
                    if Absences.Find('-') then begin
                        repeat
                            TotalAbsence := TotalAbsence + Absences."No. of  Days Absent";
                        until Absences.Next = 0;
                    end;
                end;

            }
        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        AcctPeriod.Reset;
        AcctPeriod.SetRange(AcctPeriod."Starting Date", 0D, Today);
        AcctPeriod.SetRange(AcctPeriod."New Fiscal Year", true);
        if AcctPeriod.Find('+') then
            MaturityDateFilter := CalcDate('1Y', AcctPeriod."Starting Date") - 1;
        // MESSAGE('%1',MaturityDateFilter);
        //;
        //ReportsForNavPre;
    end;

    var
        Emp: Record Employee;
        Name: Text[50];
        AcctPeriod: Record "Payroll PeriodX1";
        MaturityDateFilter: Date;
        CompanyInfo: Record "Company Information";
        EmpLeaveApps: Record "Employee Leave Application1";
        TotalTaken: Decimal;
        Recalls: Record "Employee Off/Holidays1";
        TotalRecalls: Decimal;
        Absences: Record "Employee Absentism1";
        TotalAbsence: Decimal;
        ANNUAL_LEAVE_BALANCE_CaptionLbl: label 'ANNUAL LEAVE BALANCE ';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Staff_No_CaptionLbl: label 'Staff No.';
        NameCaptionLbl: label 'Name';
        Balance_B_FCaptionLbl: label 'Balance B/F';
        BalanceCaptionLbl: label 'Balance';
        EntitlmentCaptionLbl: label 'Entitlment';
        Days_TakenCaptionLbl: label 'Days Taken';
        Days_RecalledCaptionLbl: label 'Days Recalled';
        Days_AbsentCaptionLbl: label 'Days Absent';

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511155_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511155;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
