//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511244_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511244) { }
//type("System.IO.Path"; System_IO_Path51511244) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193646 "Posted Unreconciling Items1"
{
    RDLCLayout = './Layouts/PostedUnreconcilingItems1.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Account Statement Line"; "Bank Account Statement Line")
        {
            DataItemTableView = sorting("Transaction Date") order(descending) where("Statement Amount" = filter(> 0));
            PrintOnlyIfDetail = false;
            RequestFilterFields = "Bank Account No.";
            column(ReportForNavId_3919; 3919) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Bank_Account_Statement_Line__Bank_Account_No__; "Bank Account Statement Line"."Bank Account No.")
            {
            }
            column(BankName; BankName)
            {
            }
            column(FORMAT_VarBankRec__Statement_Date__0___Month_text___Year4___; Format(VarBankRec."Statement Date", 0, '<Month text> <Year4>'))
            {
            }
            column(Bank_Account_Statement_Line__Document_No__; "Bank Account Statement Line"."Document No.")
            {
            }
            column(Bank_Account_Statement_Line__Transaction_Date_; "Bank Account Statement Line"."Transaction Date")
            {
            }
            column(Bank_Account_Statement_Line_Description; "Bank Account Statement Line".Description)
            {
            }
            // column(Bank_Account_Statement_Line_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Account_Statement_Line__Check_No__; "Bank Account Statement Line"."Check No.")
            {
            }
            column(Bank_Account_Statement_Line__Applied_Amount_; "Bank Account Statement Line"."Applied Amount")
            {
            }
            column(Bank_Account_Statement_Line__Statement_Amount_; "Bank Account Statement Line"."Statement Amount")
            {
            }
            column(Bank_Account_Statement_Line_Difference; "Bank Account Statement Line".Difference)
            {
            }
            column(BANK_ACCOUNT_RECONCILIATION_REPORTCaption; BANK_ACCOUNT_RECONCILIATION_REPORTCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Bank_Account_Statement_Line__Bank_Account_No__Caption; FieldCaption("Bank Account No."))
            {
            }
            column(Bank_Name_Caption; Bank_Name_CaptionLbl)
            {
            }
            column(Reconciliation_as_at_Caption; Reconciliation_as_at_CaptionLbl)
            {
            }
            column(Document_No_Caption; Document_No_CaptionLbl)
            {
            }
            column(DateCaption; DateCaptionLbl)
            {
            }
            column(DescriptionCaption; DescriptionCaptionLbl)
            {
            }
            column(Cash_Book_AmountCaption; Cash_Book_AmountCaptionLbl)
            {
            }
            column(Reconciled_Caption; Reconciled_CaptionLbl)
            {
            }
            column(Cheque_No_Caption; Cheque_No_CaptionLbl)
            {
            }
            column(Statement_AmountCaption; Statement_AmountCaptionLbl)
            {
            }
            column(DifferenceCaption; DifferenceCaptionLbl)
            {
            }
            column(Reconciled_Items_DebitsCaption; Reconciled_Items_DebitsCaptionLbl)
            {
            }
            column(Bank_Account_Statement_Line_Statement_No_; "Bank Account Statement Line"."Statement No.")
            {
            }
            column(Bank_Account_Statement_Line_Statement_Line_No_; "Bank Account Statement Line"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Account Statement Line".SetRange("Bank Account Statement Line"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Account Statement Line".SetRange("Bank Account Statement Line"."Statement No.", VarBankRec."Statement No.");
            end;

            trigger OnAfterGetRecord();
            begin
                if "Bank Account Statement Line"."Statement Amount" < 0 then
                    TotalReconciledCredit := TotalReconciledCredit + Abs("Bank Account Statement Line"."Statement Amount")
                else
                    TotalReconciledDebit := TotalReconciledDebit + "Bank Account Statement Line"."Statement Amount";
            end;

        }
        dataitem("Bank Acc. Reconciliation Line4"; "Bank Account Statement Line")
        {
            DataItemTableView = sorting("Transaction Date") order(descending) where("Statement Amount" = filter(< 0));
            PrintOnlyIfDetail = false;
            column(ReportForNavId_4640; 4640) { } // Autogenerated by ForNav - Do not delete
            column(Bank_Acc__Reconciliation_Line4__Document_No__; "Bank Acc. Reconciliation Line4"."Document No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line4__Transaction_Date_; "Bank Acc. Reconciliation Line4"."Transaction Date")
            {
            }
            column(Bank_Acc__Reconciliation_Line4_Description; "Bank Acc. Reconciliation Line4".Description)
            {
            }
            // column(Bank_Acc__Reconciliation_Line4_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Acc__Reconciliation_Line4__Check_No__; "Bank Acc. Reconciliation Line4"."Check No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line4__Applied_Amount_; "Bank Acc. Reconciliation Line4"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line4__Statement_Amount_; "Bank Acc. Reconciliation Line4"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line4_Difference; "Bank Acc. Reconciliation Line4".Difference)
            {
            }
            column(Reconciled_Items_CreditsCaption; Reconciled_Items_CreditsCaptionLbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line4_Bank_Account_No_; "Bank Acc. Reconciliation Line4"."Bank Account No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line4_Statement_No_; "Bank Acc. Reconciliation Line4"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line4_Statement_Line_No_; "Bank Acc. Reconciliation Line4"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Acc. Reconciliation Line4".SetRange("Bank Acc. Reconciliation Line4"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line4".SetRange("Bank Acc. Reconciliation Line4"."Statement No.", VarBankRec."Statement No.");
            end;

        }
        dataitem("Bank Acc. Reconciliation Line1"; "Bank Account Statement Line")
        {
            // DataItemTableView = sorting(Reconciled, "Transaction Date") order(descending) where(Reconciled = filter(false), Difference = filter(<> 0), "Statement Amount" = filter(> 0));
            PrintOnlyIfDetail = false;
            column(ReportForNavId_8845; 8845) { } // Autogenerated by ForNav - Do not delete
            column(Bank_Acc__Reconciliation_Line1__Document_No__; "Bank Acc. Reconciliation Line1"."Document No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line1__Transaction_Date_; "Bank Acc. Reconciliation Line1"."Transaction Date")
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Description; "Bank Acc. Reconciliation Line1".Description)
            {
            }
            // column(Bank_Acc__Reconciliation_Line1_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Acc__Reconciliation_Line1__Check_No__; "Bank Acc. Reconciliation Line1"."Check No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line1__Applied_Amount_; "Bank Acc. Reconciliation Line1"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line1__Statement_Amount_; "Bank Acc. Reconciliation Line1"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Difference; "Bank Acc. Reconciliation Line1".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line1__Statement_Amount__Control1000000090; "Bank Acc. Reconciliation Line1"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line1__Applied_Amount__Control1000000091; "Bank Acc. Reconciliation Line1"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Difference_Control1000000092; "Bank Acc. Reconciliation Line1".Difference)
            {
            }
            column(Items_in_Bank_Not_in_Cash_Book_DebitsCaption; Items_in_Bank_Not_in_Cash_Book_DebitsCaptionLbl)
            {
            }
            column(TotalCaption; TotalCaptionLbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Bank_Account_No_; "Bank Acc. Reconciliation Line1"."Bank Account No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Statement_No_; "Bank Acc. Reconciliation Line1"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line1_Statement_Line_No_; "Bank Acc. Reconciliation Line1"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Acc. Reconciliation Line1".SetRange("Bank Acc. Reconciliation Line1"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line1".SetRange("Bank Acc. Reconciliation Line1"."Statement No.", VarBankRec."Statement No.");
            end;

            trigger OnAfterGetRecord();
            begin
                if "Bank Acc. Reconciliation Line1"."Statement Amount" < 0 then
                    TotalUnReconciledCredit := TotalUnReconciledCredit + Abs("Bank Acc. Reconciliation Line1"."Statement Amount")
                else
                    TotalUnReconciledDebit := TotalUnReconciledDebit + "Bank Acc. Reconciliation Line1"."Statement Amount";
            end;

        }
        dataitem(UnBankedReceipts; "Bank Account Statement Line")
        {
            // DataItemTableView = sorting(Reconciled, "Transaction Date") order(descending) where(Reconciled = filter(false), Difference = filter(<> 0), "Statement Amount" = filter(0));
            column(ReportForNavId_2979; 2979) { } // Autogenerated by ForNav - Do not delete
            column(UnBankedReceipts__Document_No__; UnBankedReceipts."Document No.")
            {
            }
            column(UnBankedReceipts__Check_No__; UnBankedReceipts."Check No.")
            {
            }
            column(UnBankedReceipts__Transaction_Date_; UnBankedReceipts."Transaction Date")
            {
            }
            column(UnBankedReceipts_Description; UnBankedReceipts.Description)
            {
            }
            column(UnBankedReceipts__Statement_Amount_; UnBankedReceipts."Statement Amount")
            {
            }
            column(UnBankedReceipts__Applied_Amount_; UnBankedReceipts."Applied Amount")
            {
            }
            column(UnBankedReceipts_Difference; UnBankedReceipts.Difference)
            {
            }
            // column(UnBankedReceipts_Reconciled; Reconciled)
            // {
            // }
            column(UnBankedReceipts__Statement_Amount__Control1102758010; UnBankedReceipts."Statement Amount")
            {
            }
            column(UnBankedReceipts__Applied_Amount__Control1102758011; UnBankedReceipts."Applied Amount")
            {
            }
            column(UnBankedReceipts_Difference_Control1102758012; UnBankedReceipts.Difference)
            {
            }
            column(Unbanked_ReceiptsCaption; Unbanked_ReceiptsCaptionLbl)
            {
            }
            column(TotalCaption_Control1102758009; TotalCaption_Control1102758009Lbl)
            {
            }
            column(UnBankedReceipts_Bank_Account_No_; UnBankedReceipts."Bank Account No.")
            {
            }
            column(UnBankedReceipts_Statement_No_; UnBankedReceipts."Statement No.")
            {
            }
            column(UnBankedReceipts_Statement_Line_No_; UnBankedReceipts."Statement Line No.")
            {
            }
        }
        dataitem("Bank Acc. Reconciliation Line5"; "Bank Account Statement Line")
        {
            // DataItemTableView = sorting(Reconciled, "Transaction Date") order(descending) where(Reconciled = filter(false), Difference = filter(<> 0), "Statement Amount" = filter(< 0));
            column(ReportForNavId_3688; 3688) { } // Autogenerated by ForNav - Do not delete
            column(Bank_Acc__Reconciliation_Line5__Document_No__; "Bank Acc. Reconciliation Line5"."Document No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line5__Transaction_Date_; "Bank Acc. Reconciliation Line5"."Transaction Date")
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Description; "Bank Acc. Reconciliation Line5".Description)
            {
            }
            // column(Bank_Acc__Reconciliation_Line5_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Acc__Reconciliation_Line5__Check_No__; "Bank Acc. Reconciliation Line5"."Check No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line5__Applied_Amount_; "Bank Acc. Reconciliation Line5"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line5__Statement_Amount_; "Bank Acc. Reconciliation Line5"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Difference; "Bank Acc. Reconciliation Line5".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Difference_Control1000000088; "Bank Acc. Reconciliation Line5".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line5__Statement_Amount__Control1000000102; "Bank Acc. Reconciliation Line5"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line5__Applied_Amount__Control1000000103; "Bank Acc. Reconciliation Line5"."Applied Amount")
            {
            }
            column(Items_in_Bank_Not_in_Cash_Book_CreditsCaption; Items_in_Bank_Not_in_Cash_Book_CreditsCaptionLbl)
            {
            }
            column(TotalCaption_Control1000000089; TotalCaption_Control1000000089Lbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Bank_Account_No_; "Bank Acc. Reconciliation Line5"."Bank Account No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Statement_No_; "Bank Acc. Reconciliation Line5"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line5_Statement_Line_No_; "Bank Acc. Reconciliation Line5"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Acc. Reconciliation Line5".SetRange("Bank Acc. Reconciliation Line5"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line5".SetRange("Bank Acc. Reconciliation Line5"."Statement No.", VarBankRec."Statement No.");
            end;

        }
        dataitem("Bank Acc. Reconciliation Line2"; "Bank Account Statement Line")
        {
            // DataItemTableView = sorting(Reconciled, "Transaction Date") order(descending) where(Reconciled = filter(false), "Applied Amount" = filter(<> 0), "Statement Amount" = filter(> 0));
            PrintOnlyIfDetail = false;
            column(ReportForNavId_3714; 3714) { } // Autogenerated by ForNav - Do not delete
            column(Bank_Acc__Reconciliation_Line2__Document_No__; "Bank Acc. Reconciliation Line2"."Document No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line2__Transaction_Date_; "Bank Acc. Reconciliation Line2"."Transaction Date")
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Description; "Bank Acc. Reconciliation Line2".Description)
            {
            }
            // column(Bank_Acc__Reconciliation_Line2_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Acc__Reconciliation_Line2__Check_No__; "Bank Acc. Reconciliation Line2"."Check No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line2__Applied_Amount_; "Bank Acc. Reconciliation Line2"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line2__Statement_Amount_; "Bank Acc. Reconciliation Line2"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Difference; "Bank Acc. Reconciliation Line2".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Difference_Control1000000104; "Bank Acc. Reconciliation Line2".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line2__Statement_Amount__Control1000000106; "Bank Acc. Reconciliation Line2"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line2__Applied_Amount__Control1000000107; "Bank Acc. Reconciliation Line2"."Applied Amount")
            {
            }
            column(Unreconciled_Items_DebitsCaption; Unreconciled_Items_DebitsCaptionLbl)
            {
            }
            column(TotalCaption_Control1000000105; TotalCaption_Control1000000105Lbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Bank_Account_No_; "Bank Acc. Reconciliation Line2"."Bank Account No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Statement_No_; "Bank Acc. Reconciliation Line2"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line2_Statement_Line_No_; "Bank Acc. Reconciliation Line2"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Acc. Reconciliation Line2".SetRange("Bank Acc. Reconciliation Line2"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line2".SetRange("Bank Acc. Reconciliation Line2"."Statement No.", VarBankRec."Statement No.");
            end;

            trigger OnAfterGetRecord();
            begin
                if "Bank Acc. Reconciliation Line2"."Statement Amount" < 0 then
                    TotalNotInCBCredit := TotalNotInCBCredit + Abs("Bank Acc. Reconciliation Line2"."Statement Amount")
                else
                    TotalNotInCBDebit := TotalNotInCBDebit + "Bank Acc. Reconciliation Line2"."Statement Amount";
            end;

        }
        dataitem("Bank Acc. Reconciliation Line6"; "Bank Account Statement Line")
        {
            // DataItemTableView = sorting(Reconciled, "Transaction Date") order(descending) where(Reconciled = filter(false), "Applied Amount" = filter(<> 0), "Statement Amount" = filter(< 0));
            column(ReportForNavId_8597; 8597) { } // Autogenerated by ForNav - Do not delete
            column(Bank_Acc__Reconciliation_Line6__Document_No__; "Bank Acc. Reconciliation Line6"."Document No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line6__Transaction_Date_; "Bank Acc. Reconciliation Line6"."Transaction Date")
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Description; "Bank Acc. Reconciliation Line6".Description)
            {
            }
            // column(Bank_Acc__Reconciliation_Line6_Reconciled; Reconciled)
            // {
            // }
            column(Bank_Acc__Reconciliation_Line6__Check_No__; "Bank Acc. Reconciliation Line6"."Check No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line6__Applied_Amount_; "Bank Acc. Reconciliation Line6"."Applied Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line6__Statement_Amount_; "Bank Acc. Reconciliation Line6"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Difference; "Bank Acc. Reconciliation Line6".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Difference_Control1000000108; "Bank Acc. Reconciliation Line6".Difference)
            {
            }
            column(Bank_Acc__Reconciliation_Line6__Statement_Amount__Control1000000110; "Bank Acc. Reconciliation Line6"."Statement Amount")
            {
            }
            column(Bank_Acc__Reconciliation_Line6__Applied_Amount__Control1000000111; "Bank Acc. Reconciliation Line6"."Applied Amount")
            {
            }
            column(TotalReconciledDebit; TotalReconciledDebit)
            {
            }
            column(TotalUnReconciledDebit; TotalUnReconciledDebit)
            {
            }
            column(TotalNotInCBDebit; TotalNotInCBDebit)
            {
            }
            column(TotalReconciledCredit; TotalReconciledCredit)
            {
            }
            column(TotalUnReconciledCredit; TotalUnReconciledCredit)
            {
            }
            column(TotalNotInCBCredit; TotalNotInCBCredit)
            {
            }
            column(Unreconciled_Items_CreditsCaption; Unreconciled_Items_CreditsCaptionLbl)
            {
            }
            column(TotalCaption_Control1000000109; TotalCaption_Control1000000109Lbl)
            {
            }
            column(Reconciliation_SummaryCaption; Reconciliation_SummaryCaptionLbl)
            {
            }
            column(Total_Reconciled_Caption; Total_Reconciled_CaptionLbl)
            {
            }
            column(Total_Not_in_Cash_Book_Caption; Total_Not_in_Cash_Book_CaptionLbl)
            {
            }
            column(DebitCaption; DebitCaptionLbl)
            {
            }
            column(Total_Unreconciled_Caption; Total_Unreconciled_CaptionLbl)
            {
            }
            column(CreditCaption; CreditCaptionLbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Bank_Account_No_; "Bank Acc. Reconciliation Line6"."Bank Account No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Statement_No_; "Bank Acc. Reconciliation Line6"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line6_Statement_Line_No_; "Bank Acc. Reconciliation Line6"."Statement Line No.")
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                "Bank Acc. Reconciliation Line6".SetRange("Bank Acc. Reconciliation Line6"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line6".SetRange("Bank Acc. Reconciliation Line6"."Statement No.", VarBankRec."Statement No.");
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        Company.Get;
        TotalReconciledCredit := 0;
        TotalReconciledDebit := 0;
        TotalUnReconciledDebit := 0;
        TotalUnReconciledCredit := 0;
        TotalNotInCBCredit := 0;
        TotalNotInCBDebit := 0;
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        VarBankRec: Record "Bank Account Statement";
        BankRecPresented: Record "Bank Account Statement Line";
        BankRecUnPresented: Record "Bank Account Statement Line";
        TotalPresented: Decimal;
        TotalUnPresented: Decimal;
        BankStatBalance: Decimal;
        BankLastBalance: Decimal;
        BankName: Text[30];
        BankAcc: Record "Bank Account";
        CashBkBal: Decimal;
        Difference: Decimal;
        Company: Record "Company Information";
        UncreditedChqs: Decimal;
        TotalDifference: Decimal;
        TotalReconciledCredit: Decimal;
        TotalReconciledDebit: Decimal;
        TotalUnReconciledDebit: Decimal;
        TotalUnReconciledCredit: Decimal;
        TotalNotInCBCredit: Decimal;
        TotalNotInCBDebit: Decimal;
        BANK_ACCOUNT_RECONCILIATION_REPORTCaptionLbl: label 'BANK ACCOUNT RECONCILIATION REPORT';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Bank_Name_CaptionLbl: label 'Bank Name:';
        Reconciliation_as_at_CaptionLbl: label 'Reconciliation as at:';
        Document_No_CaptionLbl: label 'Document No.';
        DateCaptionLbl: label 'Date';
        DescriptionCaptionLbl: label 'Description';
        Cash_Book_AmountCaptionLbl: label 'Cash Book Amount';
        Reconciled_CaptionLbl: label 'Reconciled?';
        Cheque_No_CaptionLbl: label 'Cheque No.';
        Statement_AmountCaptionLbl: label 'Statement Amount';
        DifferenceCaptionLbl: label 'Difference';
        Reconciled_Items_DebitsCaptionLbl: label 'Reconciled Items Debits';
        Reconciled_Items_CreditsCaptionLbl: label 'Reconciled Items Credits';
        Items_in_Bank_Not_in_Cash_Book_DebitsCaptionLbl: label 'Items in Bank Not in Cash Book Debits';
        TotalCaptionLbl: label 'Total';
        Unbanked_ReceiptsCaptionLbl: label 'Unbanked Receipts';
        TotalCaption_Control1102758009Lbl: label 'Total';
        Items_in_Bank_Not_in_Cash_Book_CreditsCaptionLbl: label 'Items in Bank Not in Cash Book Credits';
        TotalCaption_Control1000000089Lbl: label 'Total';
        Unreconciled_Items_DebitsCaptionLbl: label 'Unreconciled Items Debits';
        TotalCaption_Control1000000105Lbl: label 'Total';
        Unreconciled_Items_CreditsCaptionLbl: label 'Unreconciled Items Credits';
        TotalCaption_Control1000000109Lbl: label 'Total';
        Reconciliation_SummaryCaptionLbl: label 'Reconciliation Summary';
        Total_Reconciled_CaptionLbl: label 'Total Reconciled:';
        Total_Not_in_Cash_Book_CaptionLbl: label 'Total Not in Cash Book:';
        DebitCaptionLbl: label 'Debit';
        Total_Unreconciled_CaptionLbl: label 'Total Unreconciled:';
        CreditCaptionLbl: label 'Credit';

    procedure getbankRec(var BankRec: Record "Bank Account Statement"; var StatementBalance: Decimal)
    begin
        VarBankRec := BankRec;
        BankStatBalance := StatementBalance;
        //BankStatBalance:=BankRec."Statement Ending Balance"-BankRec."Balance Last Statement";
        //ADDED BY ERIC
        BankStatBalance := BankRec."Statement Ending Balance";
        BankLastBalance := BankRec."Balance Last Statement";
    end;

    procedure TotalPresentedFunc()
    begin
        BankRecPresented.SetRange(BankRecPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecPresented.SetRange(BankRecPresented."Statement No.", VarBankRec."Statement No.");
        // BankRecPresented.SetRange(BankRecPresented.Reconciled, true);
        if BankRecPresented.Find('-') then begin
            repeat
                TotalPresented := TotalPresented + BankRecPresented."Applied Amount";
            until BankRecPresented.Next = 0;
        end;
    end;

    procedure TotalUnpresentedFunc()
    begin
        BankRecUnPresented.SetRange(BankRecUnPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecUnPresented.SetRange(BankRecUnPresented."Statement No.", VarBankRec."Statement No.");
        // BankRecUnPresented.SetRange(BankRecUnPresented.Reconciled, false);
        if BankRecPresented.Find('-') then begin
            repeat
                TotalUnPresented := TotalUnPresented + BankRecUnPresented."Applied Amount";
            until BankRecUnPresented.Next = 0;
        end;
    end;

    procedure GetBank()
    begin
        if BankAcc.Get(VarBankRec."Bank Account No.") then begin
            BankAcc.SetRange(BankAcc."Date Filter", 0D, VarBankRec."Statement Date");
            BankAcc.CalcFields(BankAcc."Balance at Date");
            CashBkBal := BankAcc."Balance at Date";
            BankName := BankAcc.Name;
        end;
    end;

    procedure TotalDiffFunc()
    begin
        BankRecPresented.Reset;
        BankRecPresented.SetRange(BankRecPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecPresented.SetRange(BankRecPresented."Statement No.", VarBankRec."Statement No.");
        //BankRecPresented.SETRANGE(BankRecPresented.Reconciled,TRUE);
        if BankRecPresented.Find('-') then begin
            repeat
                TotalDifference := TotalDifference + BankRecPresented.Difference;
            //MESSAGE('%1',TotalDifference);
            until BankRecPresented.Next = 0;
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511244_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511244;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
