//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511022_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511022) { }
//type("System.IO.Path"; System_IO_Path51511022) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193460 "Reconcile Report New"
{
    RDLCLayout = './Layouts/ReconcileReportNew.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("Bank Acc. Reconciliation Line"; "Bank Acc. Reconciliation Line")
        {
            RequestFilterFields = "Bank Account No.";
            column(ReportForNavId_1210; 1210) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_TODAY_0_4_; Format(Today, 0, 4))
            {
            }
            column(COMPANYNAME; Company.Name)
            {
            }
            //column(CurrReport_PAGENO; Format(//ReportForNav.PageNo))
            // {
            // }
            column(USERID; UserId)
            {
            }
            column(Bank_Acc__Reconciliation_Line__Bank_Account_No__; "Bank Acc. Reconciliation Line"."Bank Account No.")
            {
            }
            column(BankStatBalance; BankStatBalance)
            {
            }
            column(BankName; BankName)
            {
            }
            column(VarBankRec__Statement_Date_; VarBankRec."Statement Date")
            {
            }
            column(BankAccNo; BankAccNo)
            {
            }
            column(ReconciliationStatement; ReconciliationStatement)
            {
            }
            column(CashBkBal_BankStatBalance; CashBkBal - BankStatBalance)
            {
            }
            column(TotalUnPresented_TotalDifference; TotalUnPresented + TotalDifference)
            {
            }
            column(UncreditedChqs; UncreditedChqs)
            {
            }
            column(TotalUnpresentedChqs; TotalUnpresentedChqs)
            {
            }
            column(CashBkBal; CashBkBal)
            {
            }
            column(DebitDiff; DebitDiff)
            {
            }
            column(CreditDiff; CreditDiff)
            {
            }
            column(DebitDiff_UncreditedChqs; DebitDiff + UncreditedChqs)
            {
            }
            column(CreditDiff_TotalUnpresentedChqs; CreditDiff + TotalUnpresentedChqs)
            {
            }
            column(BANK_ACCOUNT_RECONCILIATION_REPORTCaption; BANK_ACCOUNT_RECONCILIATION_REPORTCaptionLbl)
            {
            }
            column(CurrReport_PAGENOCaption; CurrReport_PAGENOCaptionLbl)
            {
            }
            column(Bank_Code_Caption; Bank_Code_CaptionLbl)
            {
            }
            column(Bank_Name_Caption; Bank_Name_CaptionLbl)
            {
            }
            column(Reconciliation_as_at_Caption; Reconciliation_as_at_CaptionLbl)
            {
            }
            column(BANK_BALANCE_AS_PER_BANK_STATEMENTCaption; BANK_BALANCE_AS_PER_BANK_STATEMENTCaptionLbl)
            {
            }
            column(Bank_Account_No_Caption; Bank_Account_No_CaptionLbl)
            {
            }
            column(Difference_between_Cash_book_and_Bank_Statement_BalanceCaption; Difference_between_Cash_book_and_Bank_Statement_BalanceCaptionLbl)
            {
            }
            column(Total_Unreconciling_itemsCaption; Total_Unreconciling_itemsCaptionLbl)
            {
            }
            column(RECEIPTS_IN_CASHBOOK_NOT_IN_BANKCaption; RECEIPTS_IN_CASHBOOK_NOT_IN_BANKCaptionLbl)
            {
            }
            column(PAYMENTS_IN_CASHBOOK_NOT_IN_BANK__UNPRESENTED_CHEQUES_Caption; PAYMENTS_IN_CASHBOOK_NOT_IN_BANK__UNPRESENTED_CHEQUES_CaptionLbl)
            {
            }
            column(Add_Caption; Add_CaptionLbl)
            {
            }
            column(BANK_BALANCE_AS_PER_CASH_BOOKCaption; BANK_BALANCE_AS_PER_CASH_BOOKCaptionLbl)
            {
            }
            column(Less_Caption; Less_CaptionLbl)
            {
            }
            column(PAYMENTS_IN_BANK_NOT_IN_CASH_BOOKCaption; PAYMENTS_IN_BANK_NOT_IN_CASH_BOOKCaptionLbl)
            {
            }
            column(TotalCaption; TotalCaptionLbl)
            {
            }
            column(RECEIPTS_IN_BANK_NOT_IN_CASH_BOOKCaption; RECEIPTS_IN_BANK_NOT_IN_CASH_BOOKCaptionLbl)
            {
            }
            column(DataItem50; Prepared_by_________Date_____________________________Lbl)
            {
            }
            column(DataItem51; Reviewed__by_______Date______________________________Lbl)
            {
            }
            column(ACCOUNTANTCaption; ACCOUNTANTCaptionLbl)
            {
            }
            column(Bank_Acc__Reconciliation_Line_Statement_No_; "Bank Acc. Reconciliation Line"."Statement No.")
            {
            }
            column(Bank_Acc__Reconciliation_Line_Statement_Line_No_; "Bank Acc. Reconciliation Line"."Statement Line No.")
            {
            }
            // column(Bank_Acc__Reconciliation_Line_Reconciled; Reconciled)
            // {
            // }
            column(DateChequeEFT; Text000)
            {
            }
            column(ChequeEFT; Text001)
            {
            }
            column(DispatchDate; Text002)
            {
            }
            column(Amount; Text003)
            {
            }
            column(DateReceipt; Text004)
            {
            }
            column(ReceiptNumber; Text005)
            {
            }
            column(DateBanked; Text006)
            {
            }
            column(Description; "Bank Acc. Reconciliation Line".Description)
            {
            }
            column(DocumentNo; "Bank Acc. Reconciliation Line"."Document No.")
            {
            }
            column(TransactionDate; "Bank Acc. Reconciliation Line"."Transaction Date")
            {
            }
            column(AppliedAmount; "Bank Acc. Reconciliation Line"."Applied Amount")
            {
            }
            column(DataItem1000000020; Approved__by_______Date______________________________Lbl)
            {
            }
            trigger OnPreDataItem();
            begin
                LastFieldNo := FieldNo("Bank Account No.");
                TotalPresentedFunc;
                TotalUnpresentedFunc;
                TotalDiffFunc;
                GetBank;
                CashBal := CashBkBal;
                "Bank Acc. Reconciliation Line".SetRange("Bank Acc. Reconciliation Line"."Bank Account No.", VarBankRec."Bank Account No.");
                "Bank Acc. Reconciliation Line".SetRange("Bank Acc. Reconciliation Line"."Statement No.", VarBankRec."Statement No.");
                if (TotalUnPresented + TotalDifference) = (CashBkBal - BankStatBalance) then
                    Finished := true;
                if TotalUnPresented <> 0 then
                    IsDifferent := true;
            end;

            trigger OnAfterGetRecord();
            begin
                UncreditedChqs := 0;
                TotalUnpresentedChqs := 0;
                // if "Bank Acc. Reconciliation Line".Reconciled = false then begin
                if "Bank Acc. Reconciliation Line"."Applied Amount" > 0 then begin
                    if "Bank Acc. Reconciliation Line"."Applied Amount" = "Bank Acc. Reconciliation Line"."Statement Amount" then
                        UncreditedChqs := "Bank Acc. Reconciliation Line"."Applied Amount"
                    else if "Bank Acc. Reconciliation Line"."Applied Amount" <> "Bank Acc. Reconciliation Line"."Statement Amount" then
                        UncreditedChqs := "Bank Acc. Reconciliation Line"."Applied Amount" - "Bank Acc. Reconciliation Line"."Statement Amount";
                end else
                    TotalUnpresentedChqs := "Bank Acc. Reconciliation Line"."Applied Amount";
                // end;
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        Company.Get;
        // ReconciliationStatement:='Reconciliation is incomplete please go through it again';
        //;
        //ReportsForNavPre;
    end;

    var
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        TotalFor: label 'Total for ';
        VarBankRec: Record "Bank Acc. Reconciliation";
        BankRecPresented: Record "Bank Acc. Reconciliation Line";
        BankRecUnPresented: Record "Bank Acc. Reconciliation Line";
        TotalPresented: Decimal;
        TotalUnPresented: Decimal;
        BankStatBalance: Decimal;
        BankLastBalance: Decimal;
        BankName: Text[30];
        BankAcc: Record "Bank Account";
        CashBkBal: Decimal;
        Difference: Decimal;
        Company: Record "Company Information";
        UncreditedChqs: Decimal;
        BankAccNo: Code[30];
        ReconciliationStatement: Text[250];
        Finished: Boolean;
        PrintWithRecon: Boolean;
        IsDifferent: Boolean;
        TotalUnpresentedChqs: Decimal;
        TotalDifference: Decimal;
        CreditDiff: Decimal;
        DebitDiff: Decimal;
        CashBal: Decimal;
        BANK_ACCOUNT_RECONCILIATION_REPORTCaptionLbl: label 'BANK ACCOUNT RECONCILIATION REPORT';
        CurrReport_PAGENOCaptionLbl: label 'Page';
        Bank_Code_CaptionLbl: label 'Bank Code:';
        Bank_Name_CaptionLbl: label 'Bank Name:';
        Reconciliation_as_at_CaptionLbl: label 'Reconciliation as at:';
        BANK_BALANCE_AS_PER_BANK_STATEMENTCaptionLbl: label 'BANK BALANCE AS PER BANK STATEMENT';
        Bank_Account_No_CaptionLbl: label 'Bank Account No:';
        Difference_between_Cash_book_and_Bank_Statement_BalanceCaptionLbl: label 'Difference between Cash book and Bank Statement Balance';
        Total_Unreconciling_itemsCaptionLbl: label 'Total Unreconciling items';
        RECEIPTS_IN_CASHBOOK_NOT_IN_BANKCaptionLbl: label 'RECEIPTS IN CASHBOOK NOT IN BANK';
        PAYMENTS_IN_CASHBOOK_NOT_IN_BANK__UNPRESENTED_CHEQUES_CaptionLbl: label 'PAYMENTS IN CASHBOOK NOT IN BANK (UNPRESENTED CHEQUES)';
        Add_CaptionLbl: label 'Add:';
        BANK_BALANCE_AS_PER_CASH_BOOKCaptionLbl: label 'BANK BALANCE AS PER CASH BOOK';
        Less_CaptionLbl: label 'Less:';
        PAYMENTS_IN_BANK_NOT_IN_CASH_BOOKCaptionLbl: label 'PAYMENTS IN BANK NOT IN CASH BOOK';
        TotalCaptionLbl: label 'Total';
        RECEIPTS_IN_BANK_NOT_IN_CASH_BOOKCaptionLbl: label 'RECEIPTS IN BANK NOT IN CASH BOOK';
        Prepared_by_________Date_____________________________Lbl: label 'Prepared by:........................................										Date...............................................';
        Reviewed__by_______Date______________________________Lbl: label ' Reviewed  by:..............................................								Date...............................................';
        ACCOUNTANTCaptionLbl: label 'ACCOUNTANT';
        Text000: label 'Date of Cheque/EFT';
        Text001: label 'Cheque/EFT No';
        Text002: label 'Dispatch Date';
        Text003: label 'Amount';
        Text004: label 'Date of Receipt';
        Text005: label 'Receipt Number';
        Text006: label 'Date Banked';
        Approved__by_______Date______________________________Lbl: label 'Approved  by:..............................................								Date...............................................';

    procedure getbankRec(var BankRec: Record "Bank Acc. Reconciliation"; var StatementBalance: Decimal)
    begin
        VarBankRec := BankRec;
        BankStatBalance := StatementBalance;
        //BankStatBalance:=BankRec."Statement Ending Balance"-BankRec."Balance Last Statement";
        //ADDED BY ERIC
        BankStatBalance := BankRec."Statement Ending Balance";
        BankLastBalance := BankRec."Balance Last Statement";
    end;

    procedure TotalPresentedFunc()
    begin
        BankRecPresented.SetRange(BankRecPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecPresented.SetRange(BankRecPresented."Statement No.", VarBankRec."Statement No.");
        // BankRecPresented.SetRange(BankRecPresented.Reconciled, true);
        if BankRecPresented.Find('-') then begin
            repeat
                TotalPresented := TotalPresented + BankRecPresented."Applied Amount";
            until BankRecPresented.Next = 0;
        end;
    end;

    procedure TotalUnpresentedFunc()
    begin
        BankRecUnPresented.Reset;
        BankRecUnPresented.SetRange(BankRecUnPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecUnPresented.SetRange(BankRecUnPresented."Statement No.", VarBankRec."Statement No.");
        // BankRecUnPresented.SetRange(BankRecUnPresented.Reconciled, false);
        if BankRecUnPresented.Find('-') then begin
            repeat
                //MESSAGE('doing it account %1 Statement No=%2',VarBankRec."Bank Account No.",VarBankRec."Statement No.");
                //BankRecUnPresented.CALCFIELDS(BankRecUnPresented."Applied Amount");
                TotalUnPresented := TotalUnPresented + BankRecUnPresented."Applied Amount";
            until BankRecUnPresented.Next = 0;
        end;
    end;

    procedure GetBank()
    begin
        if BankAcc.Get(VarBankRec."Bank Account No.") then begin
            BankAcc.SetRange(BankAcc."Date Filter", 0D, VarBankRec."Statement Date");
            BankAcc.CalcFields(BankAcc."Balance at Date");
            CashBkBal := BankAcc."Balance at Date";
            BankName := BankAcc.Name;
            BankAccNo := BankAcc."Bank Account No.";
        end;
    end;

    procedure TotalDiffFunc()
    begin
        BankRecPresented.Reset;
        BankRecPresented.SetRange(BankRecPresented."Bank Account No.", VarBankRec."Bank Account No.");
        BankRecPresented.SetRange(BankRecPresented."Statement No.", VarBankRec."Statement No.");
        //BankRecPresented.SETRANGE(BankRecPresented.Reconciled,TRUE);
        if BankRecPresented.Find('-') then begin
            DebitDiff := 0;
            CreditDiff := 0;
            repeat
                TotalDifference := TotalDifference + BankRecPresented.Difference;
                if BankRecPresented.Difference > 0 then
                    DebitDiff := DebitDiff + BankRecPresented.Difference;
                if BankRecPresented.Difference < 0 then
                    CreditDiff := CreditDiff + BankRecPresented.Difference;
            until BankRecPresented.Next = 0;
        end;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511022_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511022;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
