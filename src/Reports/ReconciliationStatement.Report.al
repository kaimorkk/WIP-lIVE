//dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
//{
//assembly("ForNav.Reports.7.3.0.2559")
// {
//   type(ForNav.Report_7_3_0_2559; ForNavReport51511246_v7_3_0_2559) { }
//}
//assembly("mscorlib")
//  {
//    Version = '4.0.0.0';
//    type("System.IO.Stream"; SystemIOStream51511246) { }
//type("System.IO.Path"; System_IO_Path51511246) { }
//   }
//} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 52193647 "Reconciliation Statement"
{
    RDLCLayout = './Layouts/ReconciliationStatement.rdlc';
    DefaultLayout = RDLC;

    dataset
    {
        dataitem("G/L Account"; "G/L Account")
        {
            DataItemTableView = sorting("No.");
            RequestFilterFields = "Date Filter";
            column(ReportForNavId_6710; 6710) { } // Autogenerated by ForNav - Do not delete
            column(FORMAT_BeginDate_0___Month_text______year4___; Format(BeginDate, 0, '<Month text>	<year4>'))
            {
            }
            column(G_L_Account_Name; "G/L Account".Name)
            {
            }
            column(G_L_Account__Balance_at_Date_; "G/L Account"."Balance at Date")
            {
            }
            column(Liquidity; Liquidity)
            {
            }
            column(ABS_Interest_; Abs(Interest))
            {
            }
            column(ABS_BalbfDanidaAc_; Abs(BalbfDanidaAc))
            {
            }
            column(ABS_Receipt_; Abs(Receipt))
            {
            }
            column(ABS_DanidaCpnOpen_; Abs(DanidaCpnOpen))
            {
            }
            column(ABS_CostCurrentPeriod_; Abs(CostCurrentPeriod))
            {
            }
            column(ABS_CostPreviousPeriod_; Abs(CostPreviousPeriod))
            {
            }
            column(ABS_BalbfDanidaAc_Receipt_; Abs(BalbfDanidaAc + Receipt))
            {
            }
            column(ABS_Interest_BalbfDanidaAc_Receipt_DanidaCpn_DanidaCpnOpen_; Abs(Interest + BalbfDanidaAc + Receipt + DanidaCpn + DanidaCpnOpen))
            {
            }
            column(ABS_CostCurrentPeriod_CostPreviousPeriod_; Abs(CostCurrentPeriod + CostPreviousPeriod))
            {
            }
            column(ABS_Interest_BalbfDanidaAc_Receipt_DanidaCpn_CostCurrentPeriod_CostPreviousPeriod_DanidaCpnOpen_; Abs(Interest + BalbfDanidaAc + Receipt + DanidaCpn + CostCurrentPeriod + CostPreviousPeriod + DanidaCpnOpen))
            {
            }
            column(ABS_DanidaCpn_; Abs(DanidaCpn))
            {
            }
            column(DANIDA_HEALTH_SECTOR_SUPPORT_OFFICECaption; DANIDA_HEALTH_SECTOR_SUPPORT_OFFICECaptionLbl)
            {
            }
            column(RECONCILIATION_OF_FUND_STATEMENTCaption; RECONCILIATION_OF_FUND_STATEMENTCaptionLbl)
            {
            }
            column(Net_Liquid_Balance_Caption; Net_Liquid_Balance_CaptionLbl)
            {
            }
            column(Funded_by_Caption; Funded_by_CaptionLbl)
            {
            }
            column(A_C_9601__Bal__b_fCaption; A_C_9601__Bal__b_fCaptionLbl)
            {
            }
            column(Receipt_in_periodCaption; Receipt_in_periodCaptionLbl)
            {
            }
            column(Add_A_C_8599_Interest_Earned_to_Date_Caption; Add_A_C_8599_Interest_Earned_to_Date_CaptionLbl)
            {
            }
            column(A_C_9699__DANIDA_H_OCaption; A_C_9699__DANIDA_H_OCaptionLbl)
            {
            }
            column(DisbursedCaption; DisbursedCaptionLbl)
            {
            }
            column(Total_Available_before_disbursementCaption; Total_Available_before_disbursementCaptionLbl)
            {
            }
            column(Brought_ForwardCaption; Brought_ForwardCaptionLbl)
            {
            }
            column(Add_for_monthCaption; Add_for_monthCaptionLbl)
            {
            }
            column(NET_FUNDCaption; NET_FUNDCaptionLbl)
            {
            }
            column(Receipt_in_period_Caption; Receipt_in_period_CaptionLbl)
            {
            }
            column(G_L_Account_No_; "G/L Account"."No.")
            {
            }
            trigger OnPreDataItem();
            begin
                // "G/L Account".SETRANGE("G/L Account"."Reconciliation Statement",TRUE);
                //	CostCurrentPeriod:=CostCurrentPeriod+ExchangeAdj;
                //	BalbfDanidaAc:=BalbfDanidaAc+BalPhase1;
            end;

            trigger OnAfterGetRecord();
            begin
                "G/L Account".CalcFields("G/L Account"."Balance at Date");
                //	IF "G/L Account".CurrentAc THEN
                "G/L Account"."Balance at Date" := "G/L Account"."Balance at Date" + WithTax;
                Liquidity := Liquidity + "G/L Account"."Balance at Date";
            end;

        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
            area(Content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                    }
                }
            }
        }

    }

    trigger OnInitReport()
    begin
        //;
        //ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
        //;
        ////ReportForNav.Post;
    end;

    trigger OnPreReport()
    begin
        DateFilter := "G/L Account".GetFilter("G/L Account"."Date Filter");
        GetAccFilter;
        DateFilter := "G/L Account".GetFilter("G/L Account"."Date Filter");
        BeginDate := "G/L Account".GetRangeMin("G/L Account"."Date Filter");
        EndDate := "G/L Account".GetRangemax("G/L Account"."Date Filter");
        GetExpenses(DateFilter);
        GetPreviousExpenses(DateFilter);
        GetDanidaOpen(DateFilter);
        GetExchangeAdj(DateFilter);
        GetInterest(DateFilter);
        GetWithTax(DateFilter);
        GetOpeningBalances(DateFilter);
        GetfromGL(DateFilter);
        GetCpn(DateFilter);
        DateFilter := "G/L Account".GetFilter("G/L Account"."Date Filter");
        BeginDate := "G/L Account".GetRangeMin("G/L Account"."Date Filter");
        EndDate := "G/L Account".GetRangemax("G/L Account"."Date Filter");
        Month1 := Date2dmy(BeginDate, 2);
        Month2 := Date2dmy(EndDate, 2);
        if Month1 <> Month2 then
            Error('The Date Filter Specified is wrong, please specify dates within the same month as your date filter');
        //;
        //ReportsForNavPre;
    end;

    var
        Liquidity: Decimal;
        BalbfDanidaAc: Decimal;
        Receipt: Decimal;
        Interest: Decimal;
        DanidaCpn: Decimal;
        ExchangeAdj: Decimal;
        WithTax: Decimal;
        Disbursement: Decimal;
        Transfer: Decimal;
        DateFilter: Text[30];
        BeginDate: Date;
        EndDate: Date;
        Month1: Integer;
        Month2: Integer;
        TotalFunds: Decimal;
        TotBeforeDisburse: Decimal;
        TotalDisbursed: Decimal;
        CostPreviousPeriod: Decimal;
        CostCurrentPeriod: Decimal;
        BfExchangeAdj: Decimal;
        BalPhase1: Decimal;
        DanidaCpnOpen: Decimal;
        DANIDA_HEALTH_SECTOR_SUPPORT_OFFICECaptionLbl: label 'DANIDA HEALTH SECTOR SUPPORT OFFICE';
        RECONCILIATION_OF_FUND_STATEMENTCaptionLbl: label 'RECONCILIATION OF FUND STATEMENT';
        Net_Liquid_Balance_CaptionLbl: label 'Net Liquid Balance:';
        Funded_by_CaptionLbl: label 'Funded by:';
        A_C_9601__Bal__b_fCaptionLbl: label 'A/C 9601: Bal. b/f';
        Receipt_in_periodCaptionLbl: label 'Receipt in period';
        Add_A_C_8599_Interest_Earned_to_Date_CaptionLbl: label 'Add A/C 8599(Interest Earned to Date)';
        A_C_9699__DANIDA_H_OCaptionLbl: label 'A/C 9699: DANIDA H/O';
        DisbursedCaptionLbl: label 'Disbursed';
        Total_Available_before_disbursementCaptionLbl: label 'Total Available before disbursement';
        Brought_ForwardCaptionLbl: label 'Brought Forward';
        Add_for_monthCaptionLbl: label 'Add for month';
        NET_FUNDCaptionLbl: label 'NET FUND';
        Receipt_in_period_CaptionLbl: label 'Receipt in period:';

    procedure GetAccFilter() GLAccFilter: Text[30]
    var
        GLAcc: Record "G/L Account";
    begin
        GLAcc.Reset;
        GLAcc.SetRange(GLAcc."Income/Balance", GLAcc."income/balance"::"Income Statement");
        if GLAcc.Find('-') then
            GLAccFilter := GLAcc."No." + '..';
        if GLAcc.Find('+') then
            GLAccFilter := GLAccFilter + GLAcc."No.";
    end;

    procedure GetfromGL(var Datedelimiter: Text[30])
    var
        GLAcc: Record "G/L Account";
    begin
        GLAcc.Reset;
        if GLAcc.Find('-') then
            repeat
                GLAcc.SetFilter(GLAcc."Date Filter", Datedelimiter);
                GLAcc.CalcFields(GLAcc."Net Change");
            // IF GLAcc."Exchange Adjustment Acc" THEN
            // ExchangeAdj:=GLAcc."Net Change";
            //IF GLAcc."Witholding Tax Account" THEN
            //WithTax:=GLAcc."Net Change";
            until GLAcc.Next = 0;
    end;

    procedure GetDanidaOpen(var DateDelimiter: Text[30])
    var
        GLAccount: Record "G/L Account";
    begin
        GLAccount.Reset;
        /*
		 GLAccount.SETRANGE(GLAccount."DANIDA Fund",TRUE);
		  IF GLAccount.FIND('-') THEN BEGIN
		   GLAccount.SETFILTER(GLAccount."Date Filter",DateDelimiter);
		   GLAccount.CALCFIELDS(GLAccount."Balance at Date",GLAccount."Net Change");
			 BalbfDanidaAc:=GLAccount."Balance at Date"+BalPhase1;
			 Receipt:=GLAccount."Net Change";
			 END
			 ELSE
			 MESSAGE('DANIDA  FUND ACCOUNT NOT SPECIFIED');
		  */

    end;

    procedure GetExchangeAdj(var DateDelmt: Text[30])
    var
        GlAccnt: Record "G/L Account";
    begin
        GlAccnt.Reset;
        /*
        GlAccnt.SETRANGE(GlAccnt."Exchange Adjustment Acc",TRUE);
         IF GlAccnt.FIND('-') THEN BEGIN
          GlAccnt.SETFILTER(GlAccnt."Date Filter",DateDelmt);
          GlAccnt.CALCFIELDS(GlAccnt."Net Change");
            ExchangeAdj:=GlAccnt."Net Change";
            END
            ELSE
            MESSAGE('Transfer Account Not Defined');
         */

    end;

    procedure GetInterest(var DateDelmt: Text[30])
    var
        GlAccnt: Record "G/L Account";
    begin
        GlAccnt.Reset;
        /*
        GlAccnt.SETRANGE(GlAccnt."Interest Earnings",TRUE);
         IF GlAccnt.FIND('-') THEN BEGIN
          GlAccnt.SETFILTER(GlAccnt."Date Filter",DateDelmt);
          GlAccnt.CALCFIELDS(GlAccnt."Balance at Date");
            Interest:=GlAccnt."Balance at Date";
            END
            ELSE
            MESSAGE('Interest Earnings Account Not Defined');
         */

    end;

    procedure GetOpeningBalances(var Datedelimiter: Text[30])
    var
        GLAcc: Record "G/L Account";
    begin
        GLAcc.Reset;
        if GLAcc.Find('-') then
            repeat
                GLAcc.SetRange(GLAcc."Date Filter", 0D, BeginDate - 1);
                GLAcc.CalcFields(GLAcc."Net Change");
            /*
            IF GLAcc."DANIDA Fund" THEN
            BalbfDanidaAc:=GLAcc."Net Change";
            IF GLAcc."Danida Cpn Account" THEN
            DanidaCpnOpen:=GLAcc."Net Change";
           */
            until GLAcc.Next = 0;

    end;

    procedure GetExpenses(var Datedelimiter: Text[30])
    var
        GLAcc: Record "G/L Account";
    begin
        GLAcc.Reset;
        repeat
            GLAcc.SetRange(GLAcc."Date Filter", BeginDate, EndDate);
            GLAcc.CalcFields(GLAcc."Net Change");
            if GLAcc."Income/Balance" = GLAcc."income/balance"::"Income Statement" then
                if GLAcc."Account Type" = GLAcc."account type"::Posting then
                    CostCurrentPeriod := CostCurrentPeriod + GLAcc."Net Change";
        until GLAcc.Next = 0;
    end;

    procedure GetPreviousExpenses(var Datedelimiter: Text[30]) TotalPreviousCost: Decimal
    var
        GLAcc: Record "G/L Account";
    begin
        GLAcc.Reset;
        if GLAcc.Find('-') then begin
            repeat
                GLAcc.SetRange(GLAcc."Date Filter", 0D, BeginDate - 1);
                GLAcc.CalcFields(GLAcc."Balance at Date");
                if GLAcc."Income/Balance" = GLAcc."income/balance"::"Income Statement" then
                    if GLAcc."Account Type" = GLAcc."account type"::Posting then
                        CostPreviousPeriod := CostPreviousPeriod + GLAcc."Balance at Date";
            //  IF GLAcc."Exchange Adjustment Acc"=TRUE THEN
            //  BfExchangeAdj:=GLAcc."Balance at Date";
            //   IF GLAcc."Transfer Account"=TRUE THEN
            //  BalPhase1:=GLAcc."Balance at Date";
            until GLAcc.Next = 0;
            CostPreviousPeriod := CostPreviousPeriod + BfExchangeAdj;
        end;
    end;

    procedure GetWithTax(var DateDelmt: Text[30])
    var
        GlAccnt: Record "G/L Account";
    begin
        GlAccnt.Reset;
        /*
        GlAccnt.SETRANGE(GlAccnt."Witholding Tax Account",TRUE);
         IF GlAccnt.FIND('-') THEN BEGIN
          GlAccnt.SETRANGE(GlAccnt."Date Filter",0D,EndDate);
          GlAccnt.CALCFIELDS(GlAccnt."Net Change");
            WithTax:=GlAccnt."Net Change";
            END
            ELSE
            MESSAGE('Witholding Tax Account Not Defined');
       */

    end;

    procedure GetCpn(var DateDelmt: Text[30])
    var
        GlAccnt: Record "G/L Account";
    begin
        GlAccnt.Reset;
        /*
        GlAccnt.SETRANGE(GlAccnt."Danida Cpn Account",TRUE);
         IF GlAccnt.FIND('-') THEN BEGIN
          GlAccnt.SETFILTER(GlAccnt."Date Filter",DateDelmt);
          GlAccnt.CALCFIELDS(GlAccnt."Net Change");
            DanidaCpn:=GlAccnt."Net Change";
            END
            ELSE
            MESSAGE('DANIDA CPN ACCOUNT MUST BE DEFINED');
       */

    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        //[WithEvents]
        //ReportForNav: DotNet ForNavReport51511246_v7_3_0_2559;
        ReportForNavOpenDesigner: Boolean;

        ReportForNavAllowDesign: Boolean;

    /*local procedure ReportsForNavInit();
    var
        ApplicationSystemConstants: Codeunit "Application System Constants";
        addInFileName: Text;
        tempAddInFileName: Text;
        path: DotNet System_IO_Path51511246;
        ReportForNavObject: Variant;
    begin
        addInFileName := ApplicationPath() + 'Add-ins\ReportsForNAV_7_3_0_2559\ForNav.Reports.7.3.0.2559.dll';
        if not File.Exists(addInFileName) then begin
            tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.7.3.0.2559.dll';
            if not File.Exists(tempAddInFileName) then
                Error('Please install the ForNAV DLL version 7.3.0.2559 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
        end;
        ReportForNavObject := //ReportForNav.GetLatest(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
        ReportForNav := ReportForNavObject;
        //ReportForNav.Init();
    end;

    //local procedure ReportsForNavPre();
    // begin
    ////ReportForNav.OpenDesigner := ReportForNavOpenDesigner;
    //if not //ReportForNav.Pre() then CurrReport.Quit();
    //end;*/

    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
