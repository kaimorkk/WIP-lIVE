report 52193572 "PR Individual Payslip"
{
    DefaultLayout = RDLC;
    RDLCLayout = './Layouts/PR Individual Payslip.rdl';

    dataset
    {
        dataitem("HR Employees"; "Employee")
        {
            DataItemTableView = sorting("No.");
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.";
            column(COMPANYNAME; COMPANYNAME)
            {
            }
            column(PeriodName; PeriodName) { }
            column(PeriodYear; PeriodYear)
            {
            }
            column(CompanyInfo_Picture; CompanyInfo.Picture)
            {
            }
            column(P_I_N; "P.I.N")
            {

            }
            column(CompanyInfo_Watermark; CompanyInfo."Company Watermark")
            {
            }
            column(strEmpName; strEmpName) { }
            column(IDNumber_HREmployees; "HR Employees"."ID Number")
            {
            }
            column(Grade; "Current Job Grade")
            {

            }
            column(Job_Title2; "Job Title2")
            {

            }
            column(Department_HREmployees; "Department Name")
            {
            }
            column(COMPANYNAME_Control1102756028; CompanyInfo.Name)
            {
            }
            column(CompanyInfo_Picture_Control1102756013; CompanyInfo.Picture)
            {
            }
            column(CompanyInfoCompanyWatermark; CompanyInfo."Company Watermark")
            {
            }
            column(HR_Employee_No_; "No.")
            {
            }
            column(Implementing_Unit_Name; "Implementing Unit Name")
            {
            }
            column(Salary_Scale; SalaryScale)
            {
            }
            column(Salary_Notch; SalaryNotch)
            {
            }
            column(GlobalDimension1Code_HREmployees; "HR Employees"."Implementing Unit Name")
            {
            }
            column(PINNo_HREmployees; "HR Employees"."P.I.N")
            {
            }
            column(NSSFNo_HREmployees; "HR Employees"."Social Security No.")
            {
            }
            column(NHIFNo_HREmployees; "HR Employees"."N.H.I.F No")
            {
            }
            column(GlobalDimension2Code_HREmployees; "HR Employees"."Global Dimension 2 Code")
            {
            }
            column(JobTitle_HREmployees; "HR Employees"."Job Title")
            {
            }
            column(Current_Duty_Station; DutyStationName)
            {
            }
            column(Spacer; Spacer)
            {
            }
            column(CountyName; CountyName)
            {
            }
            column(PayMessage; PayMessage)
            {
            }
            column(AgeMessage; AgeMessage)
            {
            }
            dataitem("PR Salary Card"; "PR Salary Card")
            {
                DataItemLink = "Employee Code" = field("No."), "Period Filter" = field("Pay Period Filter");
                DataItemTableView = sorting("Employee Code") order(ascending);
                PrintOnlyIfDetail = false;
                RequestFilterFields = "Period Filter";
                //column(ReportForNavId_9285; 9285) { } // Autogenerated by ForNav - Do not delete
                column(Bank; Bank)
                {
                }
                column(Branch; Branch)
                {
                }
                column(Account; Account)
                {
                }
                column(NoDaysWorked; NoDaysWorked)
                {
                }
                column(RatePerDay; RatePerDay)
                {
                }
                column(Trans_1__1_; Trans[1] [1])
                {
                }
                column(TransAmt_1__1_; TransAmt[1] [1])
                {
                }
                column(TransBal_1__1_; TransBal[1] [1])
                {
                }
                column(TransBal_1__2_; TransBal[1] [2])
                {
                }
                column(TransAmt_1__2_; TransAmt[1] [2])
                {
                }
                column(Trans_1__2_; Trans[1] [2])
                {
                }
                column(TransBal_1__3_; TransBal[1] [3])
                {
                }
                column(TransAmt_1__3_; TransAmt[1] [3])
                {
                }
                column(Trans_1__3_; Trans[1] [3])
                {
                }
                column(TransBal_1__4_; TransBal[1] [4])
                {
                }
                column(TransBal_1__5_; TransBal[1] [5])
                {
                }
                column(TransBal_1__6_; TransBal[1] [6])
                {
                }
                column(TransAmt_1__4_; TransAmt[1] [4])
                {
                }
                column(TransAmt_1__5_; TransAmt[1] [5])
                {
                }
                column(TransAmt_1__6_; TransAmt[1] [6])
                {
                }
                column(Trans_1__4_; Trans[1] [4])
                {
                }
                column(Trans_1__5_; Trans[1] [5])
                {
                }
                column(Trans_1__6_; Trans[1] [6])
                {
                }
                column(TransBal_1__7_; TransBal[1] [7])
                {
                }
                column(TransBal_1__8_; TransBal[1] [8])
                {
                }
                column(TransBal_1__9_; TransBal[1] [9])
                {
                }
                column(TransAmt_1__7_; TransAmt[1] [7])
                {
                }
                column(TransAmt_1__8_; TransAmt[1] [8])
                {
                }
                column(TransAmt_1__9_; TransAmt[1] [9])
                {
                }
                column(Trans_1__7_; Trans[1] [7])
                {
                }
                column(Trans_1__8_; Trans[1] [8])
                {
                }
                column(Trans_1__9_; Trans[1] [9])
                {
                }
                column(TransBal_1__10_; TransBal[1] [10])
                {
                }
                column(TransBal_1__12_; TransBal[1] [12])
                {
                }
                column(TransBal_1__13_; TransBal[1] [13])
                {
                }
                column(TransAmt_1__10_; TransAmt[1] [10])
                {
                }
                column(TransAmt_1__12_; TransAmt[1] [12])
                {
                }
                column(TransAmt_1__13_; TransAmt[1] [13])
                {
                }
                column(Trans_1__10_; Trans[1] [10])
                {
                }
                column(Trans_1__12_; Trans[1] [12])
                {
                }
                column(Trans_1__13_; Trans[1] [13])
                {
                }
                column(TransBal_1__14_; TransBal[1] [14])
                {
                }
                column(TransBal_1__15_; TransBal[1] [15])
                {
                }
                column(TransBal_1__16_; TransBal[1] [16])
                {
                }
                column(TransBal_1__17_; TransBal[1] [17])
                {
                }
                column(TransBal_1__18_; TransBal[1] [18])
                {
                }
                column(TransBal_1__19_; TransBal[1] [19])
                {
                }
                column(TransBal_1__11_; TransBal[1] [11])
                {
                }
                column(TransBal_1__20_; TransBal[1] [20])
                {
                }
                column(TransAmt_1__14_; TransAmt[1] [14])
                {
                }
                column(TransAmt_1__15_; TransAmt[1] [15])
                {
                }
                column(TransAmt_1__16_; TransAmt[1] [16])
                {
                }
                column(TransAmt_1__17_; TransAmt[1] [17])
                {
                }
                column(TransAmt_1__18_; TransAmt[1] [18])
                {
                }
                column(TransAmt_1__19_; TransAmt[1] [19])
                {
                }
                column(TransAmt_1__11_; TransAmt[1] [11])
                {
                }
                column(TransAmt_1__20_; TransAmt[1] [20])
                {
                }
                column(Trans_1__14_; Trans[1] [14])
                {
                }
                column(Trans_1__15_; Trans[1] [15])
                {
                }
                column(Trans_1__16_; Trans[1] [16])
                {
                }
                column(Trans_1__17_; Trans[1] [17])
                {
                }
                column(Trans_1__18_; Trans[1] [18])
                {
                }
                column(Trans_1__19_; Trans[1] [19])
                {
                }
                column(Trans_1__11_; Trans[1] [11])
                {
                }
                column(Trans_1__20_; Trans[1] [20])
                {
                }
                column(Addr_1__1_; Addr[1] [1])
                {
                }
                column(Addr_1__2_; Addr[1] [2])
                {
                }
                column(Addr_1__3_; Addr[1] [3])
                {
                }
                column(TransBal_1__21_; TransBal[1] [21])
                {
                }
                column(TransBal_1__22_; TransBal[1] [22])
                {
                }
                column(TransAmt_1__21_; TransAmt[1] [21])
                {
                }
                column(TransAmt_1__22_; TransAmt[1] [22])
                {
                }
                column(TransBal_1__23_; TransBal[1] [23])
                {
                }
                column(TransAmt_1__23_; TransAmt[1] [23])
                {
                }
                column(TransBal_1__24_; TransBal[1] [24])
                {
                }
                column(TransAmt_1__24_; TransAmt[1] [24])
                {
                }
                column(Trans_1__21_; Trans[1] [21])
                {
                }
                column(Trans_1__23_; Trans[1] [23])
                {
                }
                column(Trans_1__24_; Trans[1] [24])
                {
                }
                column(Trans_1__22_; Trans[1] [22])
                {
                }
                column(TransBal_1__25_; TransBal[1] [25])
                {
                }
                column(TransAmt_1__25_; TransAmt[1] [25])
                {
                }
                column(Trans_1__25_; Trans[1] [25])
                {
                }
                column(TransBal_1__26_; TransBal[1] [26])
                {
                }
                column(TransAmt_1__26_; TransAmt[1] [26])
                {
                }
                column(Trans_1__26_; Trans[1] [26])
                {
                }
                column(TransBal_1__27_; TransBal[1] [27])
                {
                }
                column(TransAmt_1__27_; TransAmt[1] [27])
                {
                }
                column(Trans_1__27_; Trans[1] [27])
                {
                }
                column(TransBal_1__28_; TransBal[1] [28])
                {
                }
                column(TransAmt_1__28_; TransAmt[1] [28])
                {
                }
                column(Trans_1__28_; Trans[1] [28])
                {
                }
                column(TransBal_1__29_; TransBal[1] [29])
                {
                }
                column(TransAmt_1__29_; TransAmt[1] [29])
                {
                }
                column(Trans_1__29_; Trans[1] [29])
                {
                }
                column(TransBal_1__30_; TransBal[1] [30])
                {
                }
                column(TransAmt_1__30_; TransAmt[1] [30])
                {
                }
                column(Trans_1__30_; Trans[1] [30])
                {
                }
                column(TransBal_1__31_; TransBal[1] [31])
                {
                }
                column(TransAmt_1__31_; TransAmt[1] [31])
                {
                }
                column(Trans_1__31_; Trans[1] [31])
                {
                }
                column(TransBal_1__32_; TransBal[1] [32])
                {
                }
                column(TransBal_1__33_; TransBal[1] [33])
                {
                }
                column(TransBal_1__34_; TransBal[1] [34])
                {
                }
                column(TransBal_1__35_; TransBal[1] [35])
                {
                }
                column(TransBal_1__36_; TransBal[1] [36])
                {
                }
                column(TransBal_1__37_; TransBal[1] [37])
                {
                }
                column(TransBal_1__38_; TransBal[1] [38])
                {
                }
                column(TransBal_1__39_; TransBal[1] [39])
                {
                }
                column(TransBal_1__40_; TransBal[1] [40])
                {
                }
                column(TransAmt_1__32_; TransAmt[1] [32])
                {
                }
                column(TransAmt_1__33_; TransAmt[1] [33])
                {
                }
                column(TransAmt_1__34_; TransAmt[1] [34])
                {
                }
                column(TransAmt_1__35_; TransAmt[1] [35])
                {
                }
                column(TransAmt_1__36_; TransAmt[1] [36])
                {
                }
                column(TransAmt_1__37_; TransAmt[1] [37])
                {
                }
                column(TransAmt_1__38_; TransAmt[1] [38])
                {
                }
                column(TransAmt_1__39_; TransAmt[1] [39])
                {
                }
                column(TransAmt_1__40_; TransAmt[1] [40])
                {
                }
                column(Trans_1__32_; Trans[1] [32])
                {
                }
                column(Trans_1__34_; Trans[1] [34])
                {
                }
                column(Trans_1__35_; Trans[1] [35])
                {
                }
                column(Trans_1__33_; Trans[1] [33])
                {
                }
                column(Trans_1__36_; Trans[1] [36])
                {
                }
                column(Trans_1__37_; Trans[1] [37])
                {
                }
                column(Trans_1__38_; Trans[1] [38])
                {
                }
                column(Trans_1__39_; Trans[1] [39])
                {
                }
                column(Trans_1__40_; Trans[1] [40])
                {
                }
                column(Trans_1__45_; Trans[1] [45])
                {
                }
                column(TransAmt_1__45_; TransAmt[1] [45])
                {
                }
                column(TransAmt_1__46_; TransAmt[1] [46])
                {
                }
                column(TransAmt_1__47_; TransAmt[1] [47])
                {
                }
                column(TransAmt_1__48_; TransAmt[1] [48])
                {
                }
                column(TransAmt_1__49_; TransAmt[1] [49])
                {
                }
                column(Trans_1__46_; Trans[1] [46])
                {
                }
                column(Trans_1__47_; Trans[1] [47])
                {
                }
                column(Trans_1__48_; Trans[1] [48])
                {
                }
                column(Trans_1__49_; Trans[1] [49])
                {
                }
                column(TransAmt_1__50_; TransAmt[1] [50])
                {
                }
                column(TransAmt_1__51_; TransAmt[1] [51])
                {
                }
                column(Trans_1__50_; Trans[1] [50])
                {
                }
                column(Trans_1__51_; Trans[1] [51])
                {
                }
                column(Trans_1__53_; Trans[1] [53])
                {
                }
                column(TransBal_1__42_; TransBal[1] [42])
                {
                }
                column(TransAmt_1__42_; TransAmt[1] [42])
                {
                }
                column(Trans_1__42_; Trans[1] [42])
                {
                }
                column(TransBal_1__43_; TransBal[1] [43])
                {
                }
                column(TransAmt_1__43_; TransAmt[1] [43])
                {
                }
                column(Trans_1__43_; Trans[1] [43])
                {
                }
                column(TransBal_1__44_; TransBal[1] [44])
                {
                }
                column(TransAmt_1__44_; TransAmt[1] [44])
                {
                }
                column(Trans_1__44_; Trans[1] [44])
                {
                }
                column(Trans_1__41_; Trans[1] [41])
                {
                }
                column(TransAmt_1__41_; TransAmt[1] [41])
                {
                }
                column(TransBal_1__41_; TransBal[1] [41])
                {
                }
                column(TransAmt_1__52_; TransAmt[1] [52])
                {
                }
                column(Trans_1__52_; Trans[1] [52])
                {
                }
                column(TransBal_1__45_; TransBal[1] [45])
                {
                }
                column(TransBal_1__46_; TransBal[1] [46])
                {
                }
                column(TransBal_1__47_; TransBal[1] [47])
                {
                }
                column(TransBal_1__48_; TransBal[1] [48])
                {
                }
                column(TransBal_1__49_; TransBal[1] [49])
                {
                }
                column(EmptyStringCaption; EmptyStringCaptionLbl)
                {
                }
                column(Employee_Caption; Employee_CaptionLbl)
                {
                }
                column(Department_Caption; Department_CaptionLbl)
                {
                }
                column(Period_Caption; Period_CaptionLbl)
                {
                }
                column(PR_Salary_Card_Employee_Code; "Employee Code")
                {
                }
                column(PayslipMessage; PayslipMessage)
                {
                }
                trigger OnPreDataItem();
                begin
                    NoOfRecords := Count;
                    NoOfColumns := 2;
                    /*
					PeriodTrans.RESET;
					PeriodTrans.SETRANGE(PeriodTrans."Employee Code","prSalary Card"."Employee Code");
					PeriodTrans.SETRANGE(PeriodTrans."Payroll Period",SelectedPeriod);
					PeriodTrans.SETRANGE(PeriodTrans."Transaction Code",'NPAY');
					IF PeriodTrans.FINDFirst() =FALSE THEN
					 CurrReport.SKIP;
					 */
                    strNssfNo := ' ';
                    strNhifNo := ' ';
                    strBank := ' ';
                    strBranch := ' ';
                    strAccountNo := ' ';

                end;

                trigger OnAfterGetRecord();
                var
                    HrEmp: Record "Employee";
                begin
                    //Bank Details
                    HREmpBA.Reset;
                    HREmpBA.SetRange(HREmpBA."No.", "PR Salary Card"."Employee Code");
                    HREmpBA.SetRange(HREmpBA."Payroll Period", SelectedPeriod);
                    if HREmpBA.FindFirst() then begin
                        Bank := HREmpBA."Bank Name";
                        Branch := HREmpBA."Branch Name";
                        Account := HREmpBA."A/C Number";
                        SalaryNotch := HREmpBA."Salary Notch";
                        salaryScale := HREmpBA."Salary Scale";

                    end else begin
                        HrEmp.Reset();
                        HrEmp.SetRange(HrEmp."No.", "PR Salary Card"."Employee Code");
                        if HrEmp.Find('-') then begin
                            Bank := HrEmp."Bank Name";
                            Branch := HrEmp."Bank Branch Name";
                            Account := HrEmp."Bank Account Number";

                        end;

                    end;
                    strNssfNo := '. ';
                    strNhifNo := '. ';
                    strBank := '. ';
                    strBranch := '. ';
                    strAccountNo := '. ';
                    strPin := '. ';
                    STRGRATUITY := 0;
                    RecordNo := RecordNo + 1;
                    ColumnNo := ColumnNo + 1;
                    //Get the staff details (header)
                    Clear(HREmployeePR);
                    HREmployeePR.SetRange(HREmployeePR."No.", "Employee Code");
                    if HREmployeePR.FindFirst() then begin
                        strEmpName := HREmployeePR."First Name" + '  ' + HREmployeePR."Middle Name" + ' ' + ' ' + HREmployeePR."Last Name";
                        strPin := HREmployeePR."P.I.N";
                        dtDOE := HREmployeePR."Employment Date";
                        Status := Format(HREmployeePR.Status);
                        dept := HREmployeePR."Global Dimension 2 Code";
                        if DutyS.Get(HREmployeePR."Current Duty Station") then
                            DutyStationName := DutyS.Description;
                        if HREmployeePR."Date Of Leaving" = 0D then
                            dtOfLeaving := Dmy2date(31, 12, 9999)
                        else
                            dtOfLeaving := HREmployeePR."Date Of Leaving";
                        if SalaryNotch = '' then
                            SalaryNotch := HREmployeePR.Present;
                        if salaryScale = '' then
                            salaryScale := HREmployeePR."Salary Scale";
                        strNssfNo := HREmployeePR."Social Security No.";
                        strNhifNo := HREmployeePR."N.H.I.F No";
                        strPin := HREmployeePR."P.I.N";

                        strBankno := HREmployeePR."Bank Name";
                        strBranchno := HREmployeePR."Bank Branch";

                    end;

                    //Clear headers
                    Addr[ColumnNo] [1] := '';
                    Addr[ColumnNo] [2] := '';
                    Addr[ColumnNo] [3] := '';
                    Addr[ColumnNo] [4] := '';
                    Addr[ColumnNo] [5] := '';
                    //Clear previous Transaction entries 53
                    for intRow := 1 to 55 do begin
                        Trans[ColumnNo, intRow] := '';
                        TransAmt[ColumnNo, intRow] := '';
                        TransBal[ColumnNo, intRow] := '';
                    end;
                    //Loop through the transactions
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetFilter(PeriodTrans."Transaction Code", '<>%1&<>%2', 'TOT-DED', 'NPAY');
                    PeriodTrans.SetFilter(PeriodTrans."Special Transaction", '<>%1', PeriodTrans."Special Transaction"::"Defined Contribution");
                    PeriodTrans.SetRange(PeriodTrans."Company Deduction", false);        //Added to filter our company deductions
                    PeriodTrans.SetCurrentkey(PeriodTrans."Employee Code", PeriodTrans."Period Month", PeriodTrans."Period Year",
                    PeriodTrans."Group Order", PeriodTrans."Sub Group Order");
                    Addr[ColumnNo] [1] := Format(strEmpName);
                    Addr[ColumnNo] [2] := dept; //Depart
                    Addr[ColumnNo] [3] := PeriodName; //Period
                    Addr[ColumnNo] [4] := strPin; //Pin
                    Index := 1;
                    strGrpText := '';
                    if PeriodTrans.FindSet() then
                        repeat
                            //Check if the group has changed
                            if not (PeriodTrans."Group Order" in [6, 20]) or
                            ((PeriodTrans."Group Order" = 6) and not (PeriodTrans."Sub Group Order" in [7, 8, 9])) then begin
                                if strGrpText <> PeriodTrans."Group Text" then begin
                                    if not (PeriodTrans."Group Text" in ['BASIC SALARY', 'GROSS PAY', 'STATUTORIES', 'DEDUCTIONS', 'NET PAY', 'ALLOWANCE']) then begin
                                        if PeriodTrans."Group Order" <> 1 then begin
                                            Index := Index + 1;
                                        end;
                                        Index := Index + 1;
                                        strGrpText := PeriodTrans."Group Text";
                                        if strGrpText = 'TAX CALCULATIONS' then
                                            strGrpText := 'LESS:';
                                        Trans[ColumnNo, Index] := strGrpText;
                                        TransAmt[ColumnNo, Index] := ' ';
                                        TransBal[ColumnNo, Index] := ' ';
                                        strGrpText := PeriodTrans."Group Text";
                                    end;
                                    Index := Index + 1;

                                    Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                                    Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));
                                    if (PeriodTrans.Balance = 0) or (PeriodTrans."Transaction Code" in ['BPAY', 'DED-0003', 'DED-0240', 'DED-0001', 'DED-0005', 'DED-0006']) then
                                        Evaluate(TransBal[ColumnNo, Index], Format('						    '))
                                    else
                                        Evaluate(TransBal[ColumnNo, Index], Format(Round(PeriodTrans.Balance, 0.01)));

                                end else begin
                                    Index := Index + 1;
                                    strGrpText := PeriodTrans."Group Text";
                                    Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                                    Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));
                                    if (PeriodTrans.Balance = 0) or (PeriodTrans."Transaction Code" in ['BPAY', 'DED-0003', 'DED-0240', 'DED-0001', 'DED-0005', 'DED-0006']) then
                                        Evaluate(TransBal[ColumnNo, Index], Format('						    '))
                                    else
                                        Evaluate(TransBal[ColumnNo, Index], Format(Round(PeriodTrans.Balance + PeriodTrans."Emp Amount", 0.01)));
                                end;
                                if (PeriodTrans."Group Order" = 6) and (PeriodTrans."Sub Group Order" = 6) then begin
                                    Index := Index + 1;
                                    Trans[ColumnNo, Index] := '============================';
                                    TransAmt[ColumnNo, Index] := '=================';
                                    TransBal[ColumnNo, Index] := '=================';
                                    Index := Index + 1;
                                    Trans[ColumnNo, Index] := 'DEDUCTIONS';
                                    TransAmt[ColumnNo, Index] := '						    ';
                                    TransBal[ColumnNo, Index] := '						    ';
                                end;
                            end;

                        //if PeriodTrans."Transaction Code" = 'TXCHRG' then
                        //    Evaluate(TransAmt[ColumnNo, Index], Format(PeriodTrans.Amount - 2400));


                        until PeriodTrans.Next = 0;

                    Index += 1;
                    Trans[ColumnNo, Index] := 'Retirement Benefits Contributions (10%)';
                    Evaluate(TransAmt[ColumnNo, Index], ' ');
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetFilter(PeriodTrans."Special Transaction", '%1', PeriodTrans."Special Transaction"::"Defined Contribution");
                    PeriodTrans.SetRange(PeriodTrans."Company Deduction", false);        //Added to filter our company deductions
                    PeriodTrans.SetCurrentkey(PeriodTrans."Employee Code", PeriodTrans."Period Month", PeriodTrans."Period Year",
                    PeriodTrans."Group Order", PeriodTrans."Sub Group Order");
                    if PeriodTrans.FindFirst() then begin
                        repeat
                            Index := Index + 1;
                            Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                            Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));
                        until PeriodTrans.Next() = 0;
                    end;
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetFilter(PeriodTrans."Transaction Code", '=%1', 'TOT-DED');
                    if PeriodTrans.FindFirst() then begin
                        repeat
                            Index := Index + 1;
                            Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                            Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));
                        until PeriodTrans.Next() = 0;
                    end;
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetFilter(PeriodTrans."Transaction Code", '=%1', 'NPAY');
                    if PeriodTrans.FindFirst() then begin
                        repeat
                            Index := Index + 1;
                            Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                            Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));
                        until PeriodTrans.Next() = 0;
                    end;

                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetFilter(PeriodTrans."Group Text", 'STATUTORIES');
                    if PeriodTrans.FIND('-') then begin
                        repeat
                            TotalDeductions := PeriodTrans.Amount + TotalDeductions;
                        until PeriodTrans.NEXT = 0
                    end;

                    Index += 1;
                    Trans[ColumnNo, Index] := '============================';
                    Evaluate(TransAmt[ColumnNo, Index], '=================');
                    Index += 1;
                    Trans[ColumnNo, Index] := 'Bank Details';
                    hrempbank.reset;
                    // hrempbank.SetAutoCalcFields("Bank Name", "Branch Name");
                    hrempbank.setrange(hrempbank."No.", HREmployeePR."No.");
                    hrempbank.setrange(hrempbank."Payroll Period", SelectedPeriod);
                    if hrempbank.FindFirst() then begin
                        Index += 1;
                        Trans[ColumnNo, Index] := 'Bank';
                        Evaluate(TransAmt[ColumnNo, Index], hrempbank."Bank Name");

                        Index += 1;
                        Trans[ColumnNo, Index] := 'Branch';
                        Evaluate(TransAmt[ColumnNo, Index], hrempbank."Branch Name");

                        Index += 1;
                        Trans[ColumnNo, Index] := 'Account Number';
                        Evaluate(TransAmt[ColumnNo, Index], hrempbank."A/C Number");

                        // Index += 1;
                        // Trans[ColumnNo, Index] := 'KRA PIN';
                        // Evaluate(TransAmt[ColumnNo, Index], hrempbank."P.I.N");
                    end;
                    //Tax Calculations
                    Index += 1;
                    Trans[ColumnNo, Index] := '======================';
                    Evaluate(TransAmt[ColumnNo, Index], '==');
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetRange(PeriodTrans."Group Order", 6);
                    PeriodTrans.SetRange(PeriodTrans."Sub Group Order", 7);
                    if PeriodTrans.FindFirst() then begin
                        Index := Index + 1;
                        Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                        Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));

                    end;
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetRange(PeriodTrans."Group Order", 6);
                    PeriodTrans.SetRange(PeriodTrans."Sub Group Order", 9);
                    if PeriodTrans.FindFirst() then begin
                        Index := Index + 1;
                        Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                        Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));

                    end;
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetRange(PeriodTrans."Group Order", 6);
                    PeriodTrans.SetRange(PeriodTrans."Sub Group Order", 8);
                    if PeriodTrans.FindSet() then begin
                        PeriodTrans.CalcSums(Amount);
                        Index := Index + 1;
                        Trans[ColumnNo, Index] := 'Insurance Relief';
                        Evaluate(TransAmt[ColumnNo, Index], Format(PeriodTrans.Amount));

                    end;
                    PeriodTrans.Reset;
                    PeriodTrans.SetRange(PeriodTrans."Employee Code", "Employee Code");
                    PeriodTrans.SetRange(PeriodTrans."Payroll Period", SelectedPeriod);
                    PeriodTrans.SetRange(PeriodTrans."Group Order", 7);
                    PeriodTrans.SetRange(PeriodTrans."Sub Group Order", 3);
                    if PeriodTrans.FindFirst() then begin
                        Index := Index + 1;
                        Trans[ColumnNo, Index] := PeriodTrans."Transaction Name";
                        Evaluate(TransAmt[ColumnNo, Index], Format(Round(PeriodTrans.Amount, 0.01)));

                    end;

                    // DW - Display Employer Contributions on the Payslip
                    Index += 1;
                    Trans[ColumnNo, Index] := '============================';
                    Evaluate(TransAmt[ColumnNo, Index], '=================');
                    Index += 1;
                    Trans[ColumnNo, Index] := 'Employer Contributions';
                    Evaluate(TransAmt[ColumnNo, Index], ' ');
                    PREmployerContr.Reset;
                    PREmployerContr.SetRange(PREmployerContr."Payroll Period", SelectedPeriod);
                    PREmployerContr.SetRange(PREmployerContr."Employee Code", HREmployeePR."No.");
                    if PREmployerContr.FindFirst() then begin
                        repeat
                            if PRVitalSetup.Get() then begin
                                PRVitalSetup.TestField("PrPension Employer Code");
                                PRVitalSetup.Testfield("PrPension Employee Code");

                                if PREmployerContr."Transaction Code" = 'NSSF' then begin
                                    Index += 1;
                                    Trans[ColumnNo, Index] := 'N.S.S.F: ';
                                    Evaluate(TransAmt[ColumnNo, Index], Format(PREmployerContr.Amount));
                                end else

                                    if PREmployerContr."Transaction Code" = 'HLEVY' then begin
                                        Index += 1;
                                        Trans[ColumnNo, Index] := 'Affordable Housing Levy: ';
                                        Evaluate(TransAmt[ColumnNo, Index], Format(Round(PREmployerContr.Amount, 0.01)));
                                    end else
                                        if PREmployerContr."Transaction Code" = PRVitalSetup."PrPension Employer Code" then begin
                                            Index += 1;
                                            Trans[ColumnNo, Index] := 'Pension (Employer): ';
                                            Evaluate(TransAmt[ColumnNo, Index], Format(Round(PREmployerContr.Amount, 0.01)));
                                        end else begin
                                            Index += 1;
                                            if PREmployerContr."Transaction Name" <> '' then
                                                Trans[ColumnNo, Index] := PREmployerContr."Transaction Name"
                                            else
                                                Trans[ColumnNo, Index] := PREmployerContr."Transaction Code";
                                            Evaluate(TransAmt[ColumnNo, Index], Format(Round(PREmployerContr.Amount, 0.01)));
                                        end;
                                // if PREmployerContr."Transaction Code" = PRVitalSetup."PrPension Employee Code" then begin
                                //     Index += 1;
                                //     Trans[ColumnNo, Index] := 'Pension (Employee): ';
                                //     Evaluate(TransAmt[ColumnNo, Index], Format(PREmployerContr.Amount));
                                // end;
                            end;
                        until PREmployerContr.Next = 0;
                    end;
                    if (RecordNo = NoOfRecords) and (ColumnNo < 3) then begin
                        for i := ColumnNo + 1 to NoOfColumns do begin
                            Clear(Addr[i]);
                            Clear(Trans[i]);
                            Clear(TransAmt[i]);
                            Clear(TransBal[i]);
                        end;
                        ColumnNo := 0;
                    end else begin
                        if ColumnNo = NoOfColumns then
                            ColumnNo := 0;
                    end;
                end;

            }
            trigger OnPreDataItem();
            begin
                //Payslip Message
                PRVitalSetupInfo.Reset;
                PRVitalSetupInfo.Get;
                PayMessage := PRVitalSetupInfo."Payslip Message";
                // Calcfields("Department Name");
            end;

            trigger OnAfterGetRecord();
            var
                CurrYear: Integer;
                BirthYear: Integer;
                RetireDays: Integer;
                currAge: Integer;
                BRTMonth, CurrMonth, AgeMonths : Integer;

            begin
                if SelectedPeriod = 0D then begin
                    EVALUATE(SelectedPeriod, "HR Employees".GETFILTER("Pay Period Filter"));
                    HREmployeePR.get("HR Employees"."No.");
                    SelectedPeriod := HREmployeePR."Pay Period Filter";

                end;

                //Calcfields("Department Name");
                AgeMessage := '';
                if "HR Employees"."Date Of Birth" <> 0D then begin
                    CurrYear := Date2dmy(Today, 3);
                    BirthYear := Date2dmy("HR Employees"."Date Of Birth", 3);
                    BRTMonth := Date2dmy("HR Employees"."Date Of Birth", 2);
                    CurrMonth := Date2dmy(Today, 2);

                    currAge := CurrYear - BirthYear;
                    if BRTMonth > CurrMonth then begin
                        currAge -= 1;
                        AgeMonths := CurrMonth + 12 - BRTMonth;
                    end else
                        AgeMonths := CurrMonth - BRTMonth;
                    if ("HR Employees".Disabled = true) then begin

                        RetireDays := PRVitalSetupInfo."PWD Staff Retirement Age" - currAge;
                    end else begin
                        RetireDays := PRVitalSetupInfo."Other Staff Retirement Age" - currAge;
                    end;
                    AgeMessage := format(currAge) + ' Y, ' + format(AgeMonths) + ' M';
                    //'You are now ' + Format(currAge) + ' years old ' + Format(RetireDays) + ' years to retire';
                end;
                DimensionValue.Reset;
                DimensionValue.SetRange(DimensionValue."Global Dimension No.", 1);
                DimensionValue.SetRange(DimensionValue.Code, "Global Dimension 1 Code");
                if DimensionValue.FindFirst() then begin
                    CountyName := UpperCase(DimensionValue.Name);
                end;
            end;

        }
    }
    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Control3)
                {
                    field(SelectedPeriod; SelectedPeriod)
                    {
                        ApplicationArea = All;
                        TableRelation = "PR Payroll Periods"."Date Opened";
                    }

                }
            }
        }
        actions
        {
            area(processing)
            {

            }
        }
    }

    trigger OnPreReport()
    var
        HrSetup: Record "Human Resources Setup";
    begin
        PeriodName := '';
        Clear(PeriodYear);
        if SelectedPeriod = 0D then begin
            EVALUATE(SelectedPeriod, "HR Employees".GETFILTER("Pay Period Filter"));
            // HREmployeePR.get("HR Employees"."No.");
            // SelectedPeriod := HREmployeePR."Pay Period Filter";
            if HrSetup.Get() then
                SelectedPeriod := HrSetup."Payroll Period";

        end;
        // else beg
        //     PRPayrollPeriods.Reset;
        // PRPayrollPeriods.SetRange(Closed, false);
        // PRPayrollPeriods.FindFirst();
        // SelectedPeriod := PRPayrollPeriods."Date Opened";

        if SelectedPeriod = 0D then begin
            PeriodFilter := "PR Salary Card".GetFilter("Period Filter");

            SelectedPeriod := "PR Salary Card".GetRangeMin("Period Filter");
            if PeriodFilter = '' then Error('You must specify the period filter');
        end;
        PRPayrollPeriods.Reset;
        PRPayrollPeriods.SetRange(PRPayrollPeriods."Date Opened", SelectedPeriod);
        if PRPayrollPeriods.FindFirst() then begin
            PeriodName := PRPayrollPeriods."Period Name";
            PeriodYear := PRPayrollPeriods."Period Year";
        end;

        // Message(Format(SelectedPeriod));

        if CompanyInfo.Get() then begin
            CompanyInfo.CalcFields(CompanyInfo.Picture);
            CompanyInfo.CalcFields(CompanyInfo."Company Watermark");
        end;

    end;

    var
        Addr: array[2, 10] of Text[1050];
        NoOfRecords: Integer;
        DateFilter: Date;
        hrempbank: record "HR Bank Summary";
        RecordNo: Integer;
        NoOfColumns: Integer;
        ColumnNo: Integer;
        intInfo: Integer;
        i: Integer;
        PeriodTrans: Record "PR Period Transactions";
        intRow: Integer;
        Index: Integer;
        HREmployeePR: Record "Employee";
        strEmpName: Text[1050];
        strPin: Text[30];
        Trans: array[2, 60] of Text;
        TransAmt: array[2, 60] of Text;
        TransBal: array[2, 60] of Text;
        strGrpText: Text[100];
        strNssfNo: Text[30];
        strNhifNo: Text[30];
        strBank: Text[100];
        strBranch: Text[100];
        strAccountNo: Text[100];
        strMessage: Text[100];
        PeriodName: Text[30];
        PeriodYear: Integer;
        PeriodFilter: Text[30];
        SelectedPeriod: Date;
        PRPayrollPeriods: Record "PR Payroll Periods";
        dtDOE: Date;
        strEmpCode: Text[30];
        STATUS: Text[30];
        ControlInfo: Record "Company Information";
        dtOfLeaving: Date;
        "Served Notice Period": Boolean;
        dept: Text[30];
        emploadva: Record "PR Employee Transactions";
        strBankno: Text[30];
        strBranchno: Text[30];
        CompanyInfo: Record "Company Information";
        PRPayrollProcessing: Codeunit "PR Payroll Processing";
        STRGRATUITY: Decimal;
        Gratuitty: array[2, 10] of Decimal;
        Gratuittities: Decimal;
        PRSalaryCard: Record "PR Salary Card";
        EmptyStringCaptionLbl: label '=======================================================';
        Employee_CaptionLbl: label 'Employee:';
        Department_CaptionLbl: label 'Department:';
        Period_CaptionLbl: label 'Period:';
        PREmployerContr: Record "PR Employer Deductions";
        PRVitalSetup: Record "PR Vital Setup Info";
        PayslipMessage: Text;
        RatePerDay: Decimal;
        NoDaysWorked: Decimal;
        PRPerTrans: Record "PR Period Transactions";
        Spacer: label ' - ';
        CountyName: Text;
        DimensionValue: Record "Dimension Value";
        Bank: Text;
        Branch: Text;
        Account: Text;
        HREmpBA: Record "HR Bank Summary";
        PRVitalSetupInfo: Record "PR Vital Setup Info";
        PayMessage: Text;
        AgeMessage: Text;
        TotalDeductions: Decimal;
        DutyStationName: Text;
        DutyS: Record "Duty Station";
        salaryScale: Text;
        SalaryNotch: Text;



    procedure FnPeriodFilter(Period: Date)
    begin
        DateFilter := Period;
    end;

}
